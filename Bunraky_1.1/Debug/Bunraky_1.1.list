
Bunraky_1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800b268  0800b268  0001b268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2cc  0800b2cc  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2cc  0800b2cc  0001b2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2d4  0800b2d4  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2d4  0800b2d4  0001b2d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2d8  0800b2d8  0001b2d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800b2dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002638  20000100  0800b3dc  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002738  0800b3dc  00022738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196fa  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cc5  00000000  00000000  0003982a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0003e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001408  00000000  00000000  0003fb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee3b  00000000  00000000  00040f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001beef  00000000  00000000  0005fd8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a466c  00000000  00000000  0007bc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001202e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a34  00000000  00000000  00120338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000100 	.word	0x20000100
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b250 	.word	0x0800b250

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000104 	.word	0x20000104
 80001d0:	0800b250 	.word	0x0800b250

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004de:	463b      	mov	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	605a      	str	r2, [r3, #4]
 80004e6:	609a      	str	r2, [r3, #8]
 80004e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ea:	4b8c      	ldr	r3, [pc, #560]	; (800071c <MX_ADC1_Init+0x244>)
 80004ec:	4a8c      	ldr	r2, [pc, #560]	; (8000720 <MX_ADC1_Init+0x248>)
 80004ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004f0:	4b8a      	ldr	r3, [pc, #552]	; (800071c <MX_ADC1_Init+0x244>)
 80004f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f8:	4b88      	ldr	r3, [pc, #544]	; (800071c <MX_ADC1_Init+0x244>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004fe:	4b87      	ldr	r3, [pc, #540]	; (800071c <MX_ADC1_Init+0x244>)
 8000500:	2201      	movs	r2, #1
 8000502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	4b85      	ldr	r3, [pc, #532]	; (800071c <MX_ADC1_Init+0x244>)
 8000506:	2200      	movs	r2, #0
 8000508:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 800050a:	4b84      	ldr	r3, [pc, #528]	; (800071c <MX_ADC1_Init+0x244>)
 800050c:	2201      	movs	r2, #1
 800050e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000512:	4b82      	ldr	r3, [pc, #520]	; (800071c <MX_ADC1_Init+0x244>)
 8000514:	2201      	movs	r2, #1
 8000516:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000518:	4b80      	ldr	r3, [pc, #512]	; (800071c <MX_ADC1_Init+0x244>)
 800051a:	2200      	movs	r2, #0
 800051c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051e:	4b7f      	ldr	r3, [pc, #508]	; (800071c <MX_ADC1_Init+0x244>)
 8000520:	4a80      	ldr	r2, [pc, #512]	; (8000724 <MX_ADC1_Init+0x24c>)
 8000522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000524:	4b7d      	ldr	r3, [pc, #500]	; (800071c <MX_ADC1_Init+0x244>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 16;
 800052a:	4b7c      	ldr	r3, [pc, #496]	; (800071c <MX_ADC1_Init+0x244>)
 800052c:	2210      	movs	r2, #16
 800052e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000530:	4b7a      	ldr	r3, [pc, #488]	; (800071c <MX_ADC1_Init+0x244>)
 8000532:	2200      	movs	r2, #0
 8000534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b78      	ldr	r3, [pc, #480]	; (800071c <MX_ADC1_Init+0x244>)
 800053a:	2201      	movs	r2, #1
 800053c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053e:	4877      	ldr	r0, [pc, #476]	; (800071c <MX_ADC1_Init+0x244>)
 8000540:	f002 ff28 	bl	8003394 <HAL_ADC_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800054a:	f002 f8e7 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800054e:	2308      	movs	r3, #8
 8000550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000556:	2301      	movs	r3, #1
 8000558:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055a:	463b      	mov	r3, r7
 800055c:	4619      	mov	r1, r3
 800055e:	486f      	ldr	r0, [pc, #444]	; (800071c <MX_ADC1_Init+0x244>)
 8000560:	f003 f8dc 	bl	800371c <HAL_ADC_ConfigChannel>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 800056a:	f002 f8d7 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800056e:	2309      	movs	r3, #9
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000572:	2302      	movs	r3, #2
 8000574:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000576:	463b      	mov	r3, r7
 8000578:	4619      	mov	r1, r3
 800057a:	4868      	ldr	r0, [pc, #416]	; (800071c <MX_ADC1_Init+0x244>)
 800057c:	f003 f8ce 	bl	800371c <HAL_ADC_ConfigChannel>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000586:	f002 f8c9 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800058a:	230e      	movs	r3, #14
 800058c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800058e:	2303      	movs	r3, #3
 8000590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4861      	ldr	r0, [pc, #388]	; (800071c <MX_ADC1_Init+0x244>)
 8000598:	f003 f8c0 	bl	800371c <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80005a2:	f002 f8bb 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80005a6:	230f      	movs	r3, #15
 80005a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	463b      	mov	r3, r7
 80005b0:	4619      	mov	r1, r3
 80005b2:	485a      	ldr	r0, [pc, #360]	; (800071c <MX_ADC1_Init+0x244>)
 80005b4:	f003 f8b2 	bl	800371c <HAL_ADC_ConfigChannel>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80005be:	f002 f8ad 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005c2:	2306      	movs	r3, #6
 80005c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005c6:	2305      	movs	r3, #5
 80005c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4619      	mov	r1, r3
 80005ce:	4853      	ldr	r0, [pc, #332]	; (800071c <MX_ADC1_Init+0x244>)
 80005d0:	f003 f8a4 	bl	800371c <HAL_ADC_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80005da:	f002 f89f 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005de:	2307      	movs	r3, #7
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80005e2:	2306      	movs	r3, #6
 80005e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	484c      	ldr	r0, [pc, #304]	; (800071c <MX_ADC1_Init+0x244>)
 80005ec:	f003 f896 	bl	800371c <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0x122>
  {
    Error_Handler();
 80005f6:	f002 f891 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80005fe:	2307      	movs	r3, #7
 8000600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4845      	ldr	r0, [pc, #276]	; (800071c <MX_ADC1_Init+0x244>)
 8000608:	f003 f888 	bl	800371c <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8000612:	f002 f883 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	2305      	movs	r3, #5
 8000618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800061a:	2308      	movs	r3, #8
 800061c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	483e      	ldr	r0, [pc, #248]	; (800071c <MX_ADC1_Init+0x244>)
 8000624:	f003 f87a 	bl	800371c <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 800062e:	f002 f875 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000632:	2303      	movs	r3, #3
 8000634:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000636:	2309      	movs	r3, #9
 8000638:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4837      	ldr	r0, [pc, #220]	; (800071c <MX_ADC1_Init+0x244>)
 8000640:	f003 f86c 	bl	800371c <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC1_Init+0x176>
  {
    Error_Handler();
 800064a:	f002 f867 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800064e:	2302      	movs	r3, #2
 8000650:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000652:	230a      	movs	r3, #10
 8000654:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000656:	463b      	mov	r3, r7
 8000658:	4619      	mov	r1, r3
 800065a:	4830      	ldr	r0, [pc, #192]	; (800071c <MX_ADC1_Init+0x244>)
 800065c:	f003 f85e 	bl	800371c <HAL_ADC_ConfigChannel>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_ADC1_Init+0x192>
  {
    Error_Handler();
 8000666:	f002 f859 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800066a:	2301      	movs	r3, #1
 800066c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800066e:	230b      	movs	r3, #11
 8000670:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	4619      	mov	r1, r3
 8000676:	4829      	ldr	r0, [pc, #164]	; (800071c <MX_ADC1_Init+0x244>)
 8000678:	f003 f850 	bl	800371c <HAL_ADC_ConfigChannel>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_ADC1_Init+0x1ae>
  {
    Error_Handler();
 8000682:	f002 f84b 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800068a:	230c      	movs	r3, #12
 800068c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068e:	463b      	mov	r3, r7
 8000690:	4619      	mov	r1, r3
 8000692:	4822      	ldr	r0, [pc, #136]	; (800071c <MX_ADC1_Init+0x244>)
 8000694:	f003 f842 	bl	800371c <HAL_ADC_ConfigChannel>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 800069e:	f002 f83d 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006a2:	230d      	movs	r3, #13
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80006a6:	230d      	movs	r3, #13
 80006a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006aa:	463b      	mov	r3, r7
 80006ac:	4619      	mov	r1, r3
 80006ae:	481b      	ldr	r0, [pc, #108]	; (800071c <MX_ADC1_Init+0x244>)
 80006b0:	f003 f834 	bl	800371c <HAL_ADC_ConfigChannel>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x1e6>
  {
    Error_Handler();
 80006ba:	f002 f82f 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80006be:	230c      	movs	r3, #12
 80006c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80006c2:	230e      	movs	r3, #14
 80006c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4814      	ldr	r0, [pc, #80]	; (800071c <MX_ADC1_Init+0x244>)
 80006cc:	f003 f826 	bl	800371c <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0x202>
  {
    Error_Handler();
 80006d6:	f002 f821 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80006da:	230b      	movs	r3, #11
 80006dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 15;
 80006de:	230f      	movs	r3, #15
 80006e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e2:	463b      	mov	r3, r7
 80006e4:	4619      	mov	r1, r3
 80006e6:	480d      	ldr	r0, [pc, #52]	; (800071c <MX_ADC1_Init+0x244>)
 80006e8:	f003 f818 	bl	800371c <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 80006f2:	f002 f813 	bl	800271c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006f6:	230a      	movs	r3, #10
 80006f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 16;
 80006fa:	2310      	movs	r3, #16
 80006fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	4619      	mov	r1, r3
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <MX_ADC1_Init+0x244>)
 8000704:	f003 f80a 	bl	800371c <HAL_ADC_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_ADC1_Init+0x23a>
  {
    Error_Handler();
 800070e:	f002 f805 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000011c 	.word	0x2000011c
 8000720:	40012000 	.word	0x40012000
 8000724:	0f000001 	.word	0x0f000001

08000728 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a31      	ldr	r2, [pc, #196]	; (800080c <HAL_ADC_MspInit+0xe4>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d15b      	bne.n	8000802 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4b30      	ldr	r3, [pc, #192]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 8000750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000752:	4a2f      	ldr	r2, [pc, #188]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 8000754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000758:	6453      	str	r3, [r2, #68]	; 0x44
 800075a:	4b2d      	ldr	r3, [pc, #180]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b29      	ldr	r3, [pc, #164]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a28      	ldr	r2, [pc, #160]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 8000770:	f043 0304 	orr.w	r3, r3, #4
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0304 	and.w	r3, r3, #4
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b22      	ldr	r3, [pc, #136]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a21      	ldr	r2, [pc, #132]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a1a      	ldr	r2, [pc, #104]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <HAL_ADC_MspInit+0xe8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ba:	233f      	movs	r3, #63	; 0x3f
 80007bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4811      	ldr	r0, [pc, #68]	; (8000814 <HAL_ADC_MspInit+0xec>)
 80007ce:	f003 fe17 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007d2:	23ff      	movs	r3, #255	; 0xff
 80007d4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007d6:	2303      	movs	r3, #3
 80007d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <HAL_ADC_MspInit+0xf0>)
 80007e6:	f003 fe0b 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007ea:	2303      	movs	r3, #3
 80007ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <HAL_ADC_MspInit+0xf4>)
 80007fe:	f003 fdff 	bl	8004400 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	; 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40012000 	.word	0x40012000
 8000810:	40023800 	.word	0x40023800
 8000814:	40020800 	.word	0x40020800
 8000818:	40020000 	.word	0x40020000
 800081c:	40020400 	.word	0x40020400

08000820 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	683a      	ldr	r2, [r7, #0]
 800084a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000868:	2b40      	cmp	r3, #64	; 0x40
 800086a:	bf0c      	ite	eq
 800086c:	2301      	moveq	r3, #1
 800086e:	2300      	movne	r3, #0
 8000870:	b2db      	uxtb	r3, r3
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088e:	2b80      	cmp	r3, #128	; 0x80
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
}
 8000898:	4618      	mov	r0, r3
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80008cc:	78fa      	ldrb	r2, [r7, #3]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	605a      	str	r2, [r3, #4]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	619a      	str	r2, [r3, #24]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	041a      	lsls	r2, r3, #16
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	619a      	str	r2, [r3, #24]
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <transmitData>:
#include "adc.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"

void transmitData(USART_TypeDef *USARTx, uint8_t *data, int length)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	LL_GPIO_SetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Tx mode
 8000924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000928:	4817      	ldr	r0, [pc, #92]	; (8000988 <transmitData+0x70>)
 800092a:	f7ff ffd8 	bl	80008de <LL_GPIO_SetOutputPin>
	for (int i = 0; i < length; i++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e011      	b.n	8000958 <transmitData+0x40>
	{
		while (!LL_USART_IsActiveFlag_TXE(USARTx));
 8000934:	bf00      	nop
 8000936:	68f8      	ldr	r0, [r7, #12]
 8000938:	f7ff ffa1 	bl	800087e <LL_USART_IsActiveFlag_TXE>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f9      	beq.n	8000936 <transmitData+0x1e>
		LL_USART_TransmitData8(USARTx, data[i]);
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	68ba      	ldr	r2, [r7, #8]
 8000946:	4413      	add	r3, r2
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f7ff ffb7 	bl	80008c0 <LL_USART_TransmitData8>
	for (int i = 0; i < length; i++)
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	3301      	adds	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
 8000958:	697a      	ldr	r2, [r7, #20]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	dbe9      	blt.n	8000934 <transmitData+0x1c>
	}
	while (!LL_USART_IsActiveFlag_TC(USARTx))
 8000960:	bf00      	nop
 8000962:	68f8      	ldr	r0, [r7, #12]
 8000964:	f7ff ff78 	bl	8000858 <LL_USART_IsActiveFlag_TC>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f9      	beq.n	8000962 <transmitData+0x4a>
		;
	LL_USART_ClearFlag_TC(USARTx);
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f7ff ff98 	bl	80008a4 <LL_USART_ClearFlag_TC>
	LL_GPIO_ResetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Rx mode
 8000974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <transmitData+0x70>)
 800097a:	f7ff ffbe 	bl	80008fa <LL_GPIO_ResetOutputPin>
}
 800097e:	bf00      	nop
 8000980:	3718      	adds	r7, #24
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40020800 	.word	0x40020800

0800098c <readForseSensor>:

uint8_t readForseSensor(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	memset(force_sensor_4_value, 0, sizeof(force_sensor_4_value)); // Clear force sensors buffer
 8000992:	2208      	movs	r2, #8
 8000994:	2100      	movs	r1, #0
 8000996:	4827      	ldr	r0, [pc, #156]	; (8000a34 <readForseSensor+0xa8>)
 8000998:	f00a fc2e 	bl	800b1f8 <memset>
 800099c:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <readForseSensor+0xac>)
 800099e:	781a      	ldrb	r2, [r3, #0]
	memcpy(txBuffer, (uint8_t*)(&command_to_read_force), sizeof(command_to_read_force)); //*
 80009a0:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <readForseSensor+0xb0>)
 80009a2:	701a      	strb	r2, [r3, #0]
	transmitData(USART6, (uint8_t*)txBuffer, (sizeof(command_to_read_force)));
 80009a4:	2201      	movs	r2, #1
 80009a6:	4925      	ldr	r1, [pc, #148]	; (8000a3c <readForseSensor+0xb0>)
 80009a8:	4825      	ldr	r0, [pc, #148]	; (8000a40 <readForseSensor+0xb4>)
 80009aa:	f7ff ffb5 	bl	8000918 <transmitData>
	LL_mDelay(2);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f007 fece 	bl	8008750 <LL_mDelay>

	for(uint8_t i=0; i<4; i++)
 80009b4:	2300      	movs	r3, #0
 80009b6:	71fb      	strb	r3, [r7, #7]
 80009b8:	e00d      	b.n	80009d6 <readForseSensor+0x4a>
		memcpy(&force_sensor_4_value[i], rxBuffer + (i * sizeof(uint16_t)), sizeof(uint16_t));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	4a1d      	ldr	r2, [pc, #116]	; (8000a34 <readForseSensor+0xa8>)
 80009c0:	4413      	add	r3, r2
 80009c2:	79fa      	ldrb	r2, [r7, #7]
 80009c4:	0052      	lsls	r2, r2, #1
 80009c6:	491f      	ldr	r1, [pc, #124]	; (8000a44 <readForseSensor+0xb8>)
 80009c8:	440a      	add	r2, r1
 80009ca:	8812      	ldrh	r2, [r2, #0]
 80009cc:	b292      	uxth	r2, r2
 80009ce:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i<4; i++)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	3301      	adds	r3, #1
 80009d4:	71fb      	strb	r3, [r7, #7]
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d9ee      	bls.n	80009ba <readForseSensor+0x2e>
	memcpy(&recieved_CRC_32, rxBuffer + (4 * sizeof(uint16_t)), sizeof(uint32_t));
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <readForseSensor+0xbc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <readForseSensor+0xc0>)
 80009e4:	601a      	str	r2, [r3, #0]

	for (uint8_t i = 0; i < 4; i++)
 80009e6:	2300      	movs	r3, #0
 80009e8:	71bb      	strb	r3, [r7, #6]
 80009ea:	e00b      	b.n	8000a04 <readForseSensor+0x78>
		CRC_uint32_calc_buffer[i] = (uint32_t)force_sensor_4_value[i];
 80009ec:	79bb      	ldrb	r3, [r7, #6]
 80009ee:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <readForseSensor+0xa8>)
 80009f0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009f4:	79bb      	ldrb	r3, [r7, #6]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4a15      	ldr	r2, [pc, #84]	; (8000a50 <readForseSensor+0xc4>)
 80009fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8_t i = 0; i < 4; i++)
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	3301      	adds	r3, #1
 8000a02:	71bb      	strb	r3, [r7, #6]
 8000a04:	79bb      	ldrb	r3, [r7, #6]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d9f0      	bls.n	80009ec <readForseSensor+0x60>
	calculated_CRC_32 = HAL_CRC_Calculate(&hcrc, &CRC_uint32_calc_buffer, 4);
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	4910      	ldr	r1, [pc, #64]	; (8000a50 <readForseSensor+0xc4>)
 8000a0e:	4811      	ldr	r0, [pc, #68]	; (8000a54 <readForseSensor+0xc8>)
 8000a10:	f003 f9cf 	bl	8003db2 <HAL_CRC_Calculate>
 8000a14:	4603      	mov	r3, r0
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <readForseSensor+0xcc>)
 8000a18:	6013      	str	r3, [r2, #0]
	if (recieved_CRC_32 == calculated_CRC_32)
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <readForseSensor+0xc0>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <readForseSensor+0xcc>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d101      	bne.n	8000a2a <readForseSensor+0x9e>
		return 1;
 8000a26:	2301      	movs	r3, #1
 8000a28:	e000      	b.n	8000a2c <readForseSensor+0xa0>
	else
		return 0;
 8000a2a:	2300      	movs	r3, #0

}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	2000028c 	.word	0x2000028c
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	200002f8 	.word	0x200002f8
 8000a40:	40011400 	.word	0x40011400
 8000a44:	200006e0 	.word	0x200006e0
 8000a48:	200006e8 	.word	0x200006e8
 8000a4c:	20000174 	.word	0x20000174
 8000a50:	2000025c 	.word	0x2000025c
 8000a54:	20000164 	.word	0x20000164
 8000a58:	20000170 	.word	0x20000170

08000a5c <clearUsbBuffers>:

void clearUsbBuffers(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	 memset(USB_Tx_buffer, 0, sizeof(USB_Tx_buffer));  // Clear USB Tx buffer
 8000a60:	2264      	movs	r2, #100	; 0x64
 8000a62:	2100      	movs	r1, #0
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <clearUsbBuffers+0x1c>)
 8000a66:	f00a fbc7 	bl	800b1f8 <memset>
	 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 8000a6a:	2240      	movs	r2, #64	; 0x40
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4803      	ldr	r0, [pc, #12]	; (8000a7c <clearUsbBuffers+0x20>)
 8000a70:	f00a fbc2 	bl	800b1f8 <memset>
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000294 	.word	0x20000294
 8000a7c:	20000dcc 	.word	0x20000dcc

08000a80 <clearBufferAndCounter>:

void clearBufferAndCounter(void)
	{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
		memset(rxBuffer, 0, sizeof(rxBuffer));
 8000a84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a88:	2100      	movs	r1, #0
 8000a8a:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <clearBufferAndCounter+0x38>)
 8000a8c:	f00a fbb4 	bl	800b1f8 <memset>
		rxBufferCounter = 0;
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <clearBufferAndCounter+0x3c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	801a      	strh	r2, [r3, #0]
		memset(txBuffer, 0, sizeof(txBuffer));
 8000a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <clearBufferAndCounter+0x40>)
 8000a9e:	f00a fbab 	bl	800b1f8 <memset>
		recieved_CRC_32 = 0;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <clearBufferAndCounter+0x44>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
		memset(CRC_uint32_calc_buffer, 0, sizeof(CRC_uint32_calc_buffer));
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <clearBufferAndCounter+0x48>)
 8000aae:	f00a fba3 	bl	800b1f8 <memset>
	}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	200006e0 	.word	0x200006e0
 8000abc:	2000016c 	.word	0x2000016c
 8000ac0:	200002f8 	.word	0x200002f8
 8000ac4:	20000174 	.word	0x20000174
 8000ac8:	2000025c 	.word	0x2000025c

08000acc <set_new_force>:

void set_new_force(void)
	{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
		float pwm_calculations_right_hand = 0;
 8000ad2:	f04f 0300 	mov.w	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
		float pwm_calculations_left_hand = 0;
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	603b      	str	r3, [r7, #0]

		if (right_hand_activation==1)
 8000ade:	4b42      	ldr	r3, [pc, #264]	; (8000be8 <set_new_force+0x11c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d132      	bne.n	8000b4c <set_new_force+0x80>
		{
		    if (force_sensor_4_value[0] > 4096)
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <set_new_force+0x120>)
 8000ae8:	881b      	ldrh	r3, [r3, #0]
 8000aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aee:	d903      	bls.n	8000af8 <set_new_force+0x2c>
		    	force_sensor_4_value[0] = 4096;
 8000af0:	4b3e      	ldr	r3, [pc, #248]	; (8000bec <set_new_force+0x120>)
 8000af2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000af6:	801a      	strh	r2, [r3, #0]

		    if (force_sensor_4_value[0] < 60)
 8000af8:	4b3c      	ldr	r3, [pc, #240]	; (8000bec <set_new_force+0x120>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	2b3b      	cmp	r3, #59	; 0x3b
 8000afe:	d802      	bhi.n	8000b06 <set_new_force+0x3a>
		    	force_sensor_4_value[0] = 0;
 8000b00:	4b3a      	ldr	r3, [pc, #232]	; (8000bec <set_new_force+0x120>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	801a      	strh	r2, [r3, #0]

		    pwm_calculations_right_hand = force_sensor_4_value[0];
 8000b06:	4b39      	ldr	r3, [pc, #228]	; (8000bec <set_new_force+0x120>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b12:	edc7 7a01 	vstr	s15, [r7, #4]
		    pwm_calculations_right_hand = (uint16_t)roundf((pwm_calculations_right_hand * 350.0f) / 4096.0f); // Scale value from 0-4096 to 0-350
 8000b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b1a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000bf0 <set_new_force+0x124>
 8000b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b22:	eddf 6a34 	vldr	s13, [pc, #208]	; 8000bf4 <set_new_force+0x128>
 8000b26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8000b2e:	f00a fb6b 	bl	800b208 <roundf>
 8000b32:	eef0 7a40 	vmov.f32	s15, s0
 8000b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b3a:	ee17 3a90 	vmov	r3, s15
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b48:	edc7 7a01 	vstr	s15, [r7, #4]
		}

		if (left_hand_activation==1)
 8000b4c:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <set_new_force+0x12c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d132      	bne.n	8000bba <set_new_force+0xee>
		{
		    if (force_sensor_4_value[3] > 4096)
 8000b54:	4b25      	ldr	r3, [pc, #148]	; (8000bec <set_new_force+0x120>)
 8000b56:	88db      	ldrh	r3, [r3, #6]
 8000b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b5c:	d903      	bls.n	8000b66 <set_new_force+0x9a>
		    	force_sensor_4_value[3] = 4096;
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <set_new_force+0x120>)
 8000b60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b64:	80da      	strh	r2, [r3, #6]

		    if (force_sensor_4_value[3] < 60)
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <set_new_force+0x120>)
 8000b68:	88db      	ldrh	r3, [r3, #6]
 8000b6a:	2b3b      	cmp	r3, #59	; 0x3b
 8000b6c:	d802      	bhi.n	8000b74 <set_new_force+0xa8>
		    	force_sensor_4_value[3] = 0;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <set_new_force+0x120>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	80da      	strh	r2, [r3, #6]

		    pwm_calculations_left_hand = force_sensor_4_value[3];
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <set_new_force+0x120>)
 8000b76:	88db      	ldrh	r3, [r3, #6]
 8000b78:	ee07 3a90 	vmov	s15, r3
 8000b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b80:	edc7 7a00 	vstr	s15, [r7]
		    pwm_calculations_left_hand = (uint16_t)roundf((pwm_calculations_left_hand * 350.0f) / 4096.0f); // Scale value from 0-4096 to 0-350
 8000b84:	edd7 7a00 	vldr	s15, [r7]
 8000b88:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000bf0 <set_new_force+0x124>
 8000b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b90:	eddf 6a18 	vldr	s13, [pc, #96]	; 8000bf4 <set_new_force+0x128>
 8000b94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000b98:	eeb0 0a47 	vmov.f32	s0, s14
 8000b9c:	f00a fb34 	bl	800b208 <roundf>
 8000ba0:	eef0 7a40 	vmov.f32	s15, s0
 8000ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ba8:	ee17 3a90 	vmov	r3, s15
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	ee07 3a90 	vmov	s15, r3
 8000bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bb6:	edc7 7a00 	vstr	s15, [r7]
		}


	    LL_TIM_OC_SetCompareCH1(TIM2, pwm_calculations_right_hand); // for right arm
 8000bba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bc2:	ee17 1a90 	vmov	r1, s15
 8000bc6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bca:	f7ff fe29 	bl	8000820 <LL_TIM_OC_SetCompareCH1>
	    LL_TIM_OC_SetCompareCH1(TIM3, pwm_calculations_left_hand); // for left arm
 8000bce:	edd7 7a00 	vldr	s15, [r7]
 8000bd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bd6:	ee17 1a90 	vmov	r1, s15
 8000bda:	4808      	ldr	r0, [pc, #32]	; (8000bfc <set_new_force+0x130>)
 8000bdc:	f7ff fe20 	bl	8000820 <LL_TIM_OC_SetCompareCH1>
	}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000002 	.word	0x20000002
 8000bec:	2000028c 	.word	0x2000028c
 8000bf0:	43af0000 	.word	0x43af0000
 8000bf4:	45800000 	.word	0x45800000
 8000bf8:	20000001 	.word	0x20000001
 8000bfc:	40000400 	.word	0x40000400

08000c00 <stop_motor>:

void stop_motor(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH1(TIM2, 0);
 8000c04:	2100      	movs	r1, #0
 8000c06:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c0a:	f7ff fe09 	bl	8000820 <LL_TIM_OC_SetCompareCH1>
	LL_TIM_OC_SetCompareCH2(TIM3,0);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <stop_motor+0x1c>)
 8000c12:	f7ff fe13 	bl	800083c <LL_TIM_OC_SetCompareCH2>
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40000400 	.word	0x40000400

08000c20 <readADCchannels>:

void readADCchannels(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	memset(adcBuffer, 0, sizeof(adcBuffer));
 8000c26:	2220      	movs	r2, #32
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4811      	ldr	r0, [pc, #68]	; (8000c70 <readADCchannels+0x50>)
 8000c2c:	f00a fae4 	bl	800b1f8 <memset>

    for (uint8_t i = 0; i < 16; i++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	71fb      	strb	r3, [r7, #7]
 8000c34:	e012      	b.n	8000c5c <readADCchannels+0x3c>
		{
			HAL_ADC_Start(&hadc1);
 8000c36:	480f      	ldr	r0, [pc, #60]	; (8000c74 <readADCchannels+0x54>)
 8000c38:	f002 fbf0 	bl	800341c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 100);
 8000c3c:	2164      	movs	r1, #100	; 0x64
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <readADCchannels+0x54>)
 8000c40:	f002 fcd3 	bl	80035ea <HAL_ADC_PollForConversion>
			adcBuffer[i] = HAL_ADC_GetValue(&hadc1);
 8000c44:	480b      	ldr	r0, [pc, #44]	; (8000c74 <readADCchannels+0x54>)
 8000c46:	f002 fd5b 	bl	8003700 <HAL_ADC_GetValue>
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	b211      	sxth	r1, r2
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <readADCchannels+0x50>)
 8000c52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 16; i++)
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	71fb      	strb	r3, [r7, #7]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	2b0f      	cmp	r3, #15
 8000c60:	d9e9      	bls.n	8000c36 <readADCchannels+0x16>
		}

    HAL_ADC_Stop(&hadc1);
 8000c62:	4804      	ldr	r0, [pc, #16]	; (8000c74 <readADCchannels+0x54>)
 8000c64:	f002 fc8e 	bl	8003584 <HAL_ADC_Stop>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000026c 	.word	0x2000026c
 8000c74:	2000011c 	.word	0x2000011c

08000c78 <is_min_max_calibrated>:

void is_min_max_calibrated(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
	if(left_hand_activation==0)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <is_min_max_calibrated+0x5c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d10d      	bne.n	8000ca2 <is_min_max_calibrated+0x2a>
	{
		for(uint8_t i=0; i<8; i++)
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e007      	b.n	8000c9c <is_min_max_calibrated+0x24>
			adcBuffer[i] = 0;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <is_min_max_calibrated+0x60>)
 8000c90:	2100      	movs	r1, #0
 8000c92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i=0; i<8; i++)
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	71fb      	strb	r3, [r7, #7]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	d9f4      	bls.n	8000c8c <is_min_max_calibrated+0x14>
	}

	if(right_hand_activation==0)
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <is_min_max_calibrated+0x64>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10d      	bne.n	8000cc6 <is_min_max_calibrated+0x4e>
	{
		for(uint8_t i=8; i<16; i++)
 8000caa:	2308      	movs	r3, #8
 8000cac:	71bb      	strb	r3, [r7, #6]
 8000cae:	e007      	b.n	8000cc0 <is_min_max_calibrated+0x48>
			adcBuffer[i] = 0;
 8000cb0:	79bb      	ldrb	r3, [r7, #6]
 8000cb2:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <is_min_max_calibrated+0x60>)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i=8; i<16; i++)
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	71bb      	strb	r3, [r7, #6]
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	2b0f      	cmp	r3, #15
 8000cc4:	d9f4      	bls.n	8000cb0 <is_min_max_calibrated+0x38>
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000001 	.word	0x20000001
 8000cd8:	2000026c 	.word	0x2000026c
 8000cdc:	20000002 	.word	0x20000002

08000ce0 <calibration_ADC_values>:

void calibration_ADC_values(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i<16; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	e050      	b.n	8000d8e <calibration_ADC_values+0xae>
	{
		if (adcBuffer[i] < CCW_limits[i])
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	4a6d      	ldr	r2, [pc, #436]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000cf0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a6b      	ldr	r2, [pc, #428]	; (8000ea8 <calibration_ADC_values+0x1c8>)
 8000cfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	da08      	bge.n	8000d14 <calibration_ADC_values+0x34>
			adcBuffer[i] = CCW_limits[i];
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4a68      	ldr	r2, [pc, #416]	; (8000ea8 <calibration_ADC_values+0x1c8>)
 8000d06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	b211      	sxth	r1, r2
 8000d0e:	4a65      	ldr	r2, [pc, #404]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d10:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if (adcBuffer[i] > CW_limits[i])
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	4a63      	ldr	r2, [pc, #396]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d18:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	4a62      	ldr	r2, [pc, #392]	; (8000eac <calibration_ADC_values+0x1cc>)
 8000d22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d26:	4299      	cmp	r1, r3
 8000d28:	dd08      	ble.n	8000d3c <calibration_ADC_values+0x5c>
			adcBuffer[i] = CW_limits[i];
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a5f      	ldr	r2, [pc, #380]	; (8000eac <calibration_ADC_values+0x1cc>)
 8000d2e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	b211      	sxth	r1, r2
 8000d36:	4a5b      	ldr	r2, [pc, #364]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		adcBuffer[i] = adcBuffer[i] - CCW_limits[i];
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4a59      	ldr	r2, [pc, #356]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	4957      	ldr	r1, [pc, #348]	; (8000ea8 <calibration_ADC_values+0x1c8>)
 8000d4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	b211      	sxth	r1, r2
 8000d56:	4a53      	ldr	r2, [pc, #332]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		if((i!=7) && (i!=15))
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b07      	cmp	r3, #7
 8000d60:	d012      	beq.n	8000d88 <calibration_ADC_values+0xa8>
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d00f      	beq.n	8000d88 <calibration_ADC_values+0xa8>
			adcBuffer[i] = adcBuffer[i] - zero_points[i];
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d6c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	494e      	ldr	r1, [pc, #312]	; (8000eb0 <calibration_ADC_values+0x1d0>)
 8000d76:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000d7a:	1ad3      	subs	r3, r2, r3
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	b211      	sxth	r1, r2
 8000d82:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<16; i++)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d9ab      	bls.n	8000cec <calibration_ADC_values+0xc>
	}

	if(left_hand_activation==1)
 8000d94:	4b47      	ldr	r3, [pc, #284]	; (8000eb4 <calibration_ADC_values+0x1d4>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d13c      	bne.n	8000e16 <calibration_ADC_values+0x136>
	{
		adcBuffer[0] *= 1;
 8000d9c:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000d9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000da2:	4b40      	ldr	r3, [pc, #256]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000da4:	801a      	strh	r2, [r3, #0]
		adcBuffer[1] *= 1;
 8000da6:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000da8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000dac:	4b3d      	ldr	r3, [pc, #244]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dae:	805a      	strh	r2, [r3, #2]
		adcBuffer[2] *= 1;
 8000db0:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000db2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000db8:	809a      	strh	r2, [r3, #4]
		adcBuffer[3] *= 1;
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dbc:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8000dc0:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dc2:	80da      	strh	r2, [r3, #6]
		adcBuffer[4] *= 1;
 8000dc4:	4b37      	ldr	r3, [pc, #220]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dc6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dcc:	811a      	strh	r2, [r3, #8]
		adcBuffer[5] *= 1;
 8000dce:	4b35      	ldr	r3, [pc, #212]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dd0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dd6:	815a      	strh	r2, [r3, #10]
		adcBuffer[6] *= 1;
 8000dd8:	4b32      	ldr	r3, [pc, #200]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000dda:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000de0:	819a      	strh	r2, [r3, #12]
		// Left gripper value should be: 0 - 255
		adcBuffer[7] = (int16_t)roundf((adcBuffer[7] * 255) / (CW_limits[7] - CCW_limits[7]));
 8000de2:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000de4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4613      	mov	r3, r2
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	1a9a      	subs	r2, r3, r2
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <calibration_ADC_values+0x1cc>)
 8000df2:	89db      	ldrh	r3, [r3, #14]
 8000df4:	4619      	mov	r1, r3
 8000df6:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <calibration_ADC_values+0x1c8>)
 8000df8:	89db      	ldrh	r3, [r3, #14]
 8000dfa:	1acb      	subs	r3, r1, r3
 8000dfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0c:	ee17 3a90 	vmov	r3, s15
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e14:	81da      	strh	r2, [r3, #14]
		// Invert value (because of construction constraints)
//		adcBuffer[7] = 255 - adcBuffer[7];
	}

	if(right_hand_activation==1)
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <calibration_ADC_values+0x1d8>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d13c      	bne.n	8000e98 <calibration_ADC_values+0x1b8>
	{
		adcBuffer[8]  *= 1;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e20:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e26:	821a      	strh	r2, [r3, #16]
		adcBuffer[9]  *= 1;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e2a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e30:	825a      	strh	r2, [r3, #18]
		adcBuffer[10] *= 1;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e34:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e3a:	829a      	strh	r2, [r3, #20]
		adcBuffer[11] *= 1;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e3e:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e44:	82da      	strh	r2, [r3, #22]
		adcBuffer[12] *= 1;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e48:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e4e:	831a      	strh	r2, [r3, #24]
		adcBuffer[13] *= 1;
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e52:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8000e56:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e58:	835a      	strh	r2, [r3, #26]
		adcBuffer[14] *= 1;
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e5c:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e62:	839a      	strh	r2, [r3, #28]
		// Right gripper value should be: 0 - 255
		adcBuffer[15] = (int16_t)roundf((adcBuffer[15] * 255) / (CW_limits[15] - CCW_limits[15]));
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e66:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	1a9a      	subs	r2, r3, r2
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <calibration_ADC_values+0x1cc>)
 8000e74:	8bdb      	ldrh	r3, [r3, #30]
 8000e76:	4619      	mov	r1, r3
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <calibration_ADC_values+0x1c8>)
 8000e7a:	8bdb      	ldrh	r3, [r3, #30]
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e82:	ee07 3a90 	vmov	s15, r3
 8000e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e8e:	ee17 3a90 	vmov	r3, s15
 8000e92:	b21a      	sxth	r2, r3
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <calibration_ADC_values+0x1c4>)
 8000e96:	83da      	strh	r2, [r3, #30]
		// Invert value (because of construction constraints)
//		adcBuffer[15] = 255 - adcBuffer[15];
	}
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	2000026c 	.word	0x2000026c
 8000ea8:	200001bc 	.word	0x200001bc
 8000eac:	2000019c 	.word	0x2000019c
 8000eb0:	2000017c 	.word	0x2000017c
 8000eb4:	20000001 	.word	0x20000001
 8000eb8:	20000002 	.word	0x20000002

08000ebc <calibration_function>:


uint32_t calibration_function(uint8_t DoF_number, uint8_t min_max)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	71fb      	strb	r3, [r7, #7]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	71bb      	strb	r3, [r7, #6]
	 uint8_t count_write_flash = sizeof(CCW_limits_uint32_flash) / sizeof(CCW_limits_uint32_flash[0]);
 8000ecc:	2310      	movs	r3, #16
 8000ece:	73fb      	strb	r3, [r7, #15]
	 readADCchannels();
 8000ed0:	f7ff fea6 	bl	8000c20 <readADCchannels>
	 load_calibration_values();
 8000ed4:	f000 f9e2 	bl	800129c <load_calibration_values>
	 if (DoF_number>16)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d901      	bls.n	8000ee2 <calibration_function+0x26>
		 return 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e027      	b.n	8000f32 <calibration_function+0x76>
	 else if(min_max==0) // CCW position calibration
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d110      	bne.n	8000f0a <calibration_function+0x4e>
	 {
		 CCW_limits_uint32_flash[DoF_number] = (uint32_t) adcBuffer[DoF_number];
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4a14      	ldr	r2, [pc, #80]	; (8000f3c <calibration_function+0x80>)
 8000eec:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <calibration_function+0x84>)
 8000ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 return flash_write_words(FLASH_SECTOR_6, ADDR_FLASH_SECTOR_6, CCW_limits_uint32_flash, count_write_flash); // if error == 0 == Recording was successful;
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	4a10      	ldr	r2, [pc, #64]	; (8000f40 <calibration_function+0x84>)
 8000efe:	4911      	ldr	r1, [pc, #68]	; (8000f44 <calibration_function+0x88>)
 8000f00:	2006      	movs	r0, #6
 8000f02:	f000 fa9e 	bl	8001442 <flash_write_words>
 8000f06:	4603      	mov	r3, r0
 8000f08:	e013      	b.n	8000f32 <calibration_function+0x76>
	 }
	 else if (min_max==1) // CW position calibration
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d110      	bne.n	8000f32 <calibration_function+0x76>
	 {
		 CW_limits_uint32_flash[DoF_number] = (uint32_t) adcBuffer[DoF_number];
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <calibration_function+0x80>)
 8000f14:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <calibration_function+0x8c>)
 8000f1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		 return flash_write_words(FLASH_SECTOR_7, ADDR_FLASH_SECTOR_7, CW_limits_uint32_flash, count_write_flash); // if error == 0 == Recording was successful;
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <calibration_function+0x8c>)
 8000f26:	4909      	ldr	r1, [pc, #36]	; (8000f4c <calibration_function+0x90>)
 8000f28:	2007      	movs	r0, #7
 8000f2a:	f000 fa8a 	bl	8001442 <flash_write_words>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	e7ff      	b.n	8000f32 <calibration_function+0x76>
	 }
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000026c 	.word	0x2000026c
 8000f40:	2000021c 	.word	0x2000021c
 8000f44:	08040000 	.word	0x08040000
 8000f48:	200001dc 	.word	0x200001dc
 8000f4c:	08060000 	.word	0x08060000

08000f50 <process_calibration>:


void process_calibration(uint8_t usb_cmd, uint8_t DoF)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	460a      	mov	r2, r1
 8000f5a:	71fb      	strb	r3, [r7, #7]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	71bb      	strb	r3, [r7, #6]
/*
* @brief Processes calibration on received command.
* @param usb_cmd Command from USB (expects '0' for MIN or '1' for MAX).
* @param DoF DOF number used in calibration_function.
*/
	uint32_t error = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]

    if (DoF < 1 || DoF > 16)
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d02c      	beq.n	8000fc4 <process_calibration+0x74>
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	2b10      	cmp	r3, #16
 8000f6e:	d829      	bhi.n	8000fc4 <process_calibration+0x74>
        return;

	// Convert 1-8 to 0-15 for array work
	DoF -= 1;
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	71bb      	strb	r3, [r7, #6]

    if (usb_cmd == '0') // Call calibration function for CCW (second parameter = 0)
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b30      	cmp	r3, #48	; 0x30
 8000f7a:	d107      	bne.n	8000f8c <process_calibration+0x3c>
        error = calibration_function(DoF, 0);
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff9b 	bl	8000ebc <calibration_function>
 8000f86:	4603      	mov	r3, r0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	e009      	b.n	8000fa0 <process_calibration+0x50>

    else if (usb_cmd == '1') // Call calibration function for CW (second parameter = 1)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b31      	cmp	r3, #49	; 0x31
 8000f90:	d106      	bne.n	8000fa0 <process_calibration+0x50>
        error = calibration_function(DoF, 1);
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	2101      	movs	r1, #1
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff90 	bl	8000ebc <calibration_function>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

    // Copy the error to USB_Tx_buffer to send via USB
    memcpy(USB_Tx_buffer, (uint8_t*)(&error), sizeof(error));
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <process_calibration+0x7c>)
 8000fa4:	6013      	str	r3, [r2, #0]

    // Wait until USB transfer is complete
    while (CDC_Transmit_FS(USB_Tx_buffer, sizeof(error)) == USBD_BUSY)
 8000fa6:	bf00      	nop
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <process_calibration+0x7c>)
 8000fac:	f009 fc96 	bl	800a8dc <CDC_Transmit_FS>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d0f8      	beq.n	8000fa8 <process_calibration+0x58>
        ;

    // Clear buffers and counters
    clearBufferAndCounter();
 8000fb6:	f7ff fd63 	bl	8000a80 <clearBufferAndCounter>
    clearUsbBuffers();
 8000fba:	f7ff fd4f 	bl	8000a5c <clearUsbBuffers>
    depug_piip();
 8000fbe:	f000 faa7 	bl	8001510 <depug_piip>
 8000fc2:	e000      	b.n	8000fc6 <process_calibration+0x76>
        return;
 8000fc4:	bf00      	nop
}
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000294 	.word	0x20000294

08000fd0 <wrote_zero_to_dof>:


uint32_t wrote_zero_to_dof(uint8_t DoF_number)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
	 uint32_t error_1 = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	 uint32_t error_2 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
	 uint8_t count_write_flash = sizeof(CCW_limits_uint32_flash) / sizeof(CCW_limits_uint32_flash[0]);
 8000fe2:	2310      	movs	r3, #16
 8000fe4:	73fb      	strb	r3, [r7, #15]

	 load_calibration_values();
 8000fe6:	f000 f959 	bl	800129c <load_calibration_values>

	if (DoF_number < 1 || DoF_number > 16)
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d027      	beq.n	8001040 <wrote_zero_to_dof+0x70>
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d824      	bhi.n	8001040 <wrote_zero_to_dof+0x70>
		return;

	// Convert 1-8 to 0-15 for array work
	 DoF_number--;
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]

	 CCW_limits_uint32_flash[DoF_number] = 0;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <wrote_zero_to_dof+0x7c>)
 8001000:	2100      	movs	r1, #0
 8001002:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 error_1 = flash_write_words(FLASH_SECTOR_6, ADDR_FLASH_SECTOR_6, CCW_limits_uint32_flash, count_write_flash); // if error == 0 == Recording was successful;
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	4a10      	ldr	r2, [pc, #64]	; (800104c <wrote_zero_to_dof+0x7c>)
 800100a:	4911      	ldr	r1, [pc, #68]	; (8001050 <wrote_zero_to_dof+0x80>)
 800100c:	2006      	movs	r0, #6
 800100e:	f000 fa18 	bl	8001442 <flash_write_words>
 8001012:	6178      	str	r0, [r7, #20]

	 CW_limits_uint32_flash[DoF_number] = 0;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <wrote_zero_to_dof+0x84>)
 8001018:	2100      	movs	r1, #0
 800101a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 error_2 = flash_write_words(FLASH_SECTOR_7, ADDR_FLASH_SECTOR_7, CW_limits_uint32_flash, count_write_flash); // if error == 0 == Recording was successful;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <wrote_zero_to_dof+0x84>)
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <wrote_zero_to_dof+0x88>)
 8001024:	2007      	movs	r0, #7
 8001026:	f000 fa0c 	bl	8001442 <flash_write_words>
 800102a:	6138      	str	r0, [r7, #16]

	 if((error_1!=0)||(error_2!=0))
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <wrote_zero_to_dof+0x68>
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <wrote_zero_to_dof+0x6c>
		 return 1;
 8001038:	2301      	movs	r3, #1
 800103a:	e003      	b.n	8001044 <wrote_zero_to_dof+0x74>
	 else
		 return 0;
 800103c:	2300      	movs	r3, #0
 800103e:	e001      	b.n	8001044 <wrote_zero_to_dof+0x74>
		return;
 8001040:	bf00      	nop
 8001042:	bf00      	nop
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	2000021c 	.word	0x2000021c
 8001050:	08040000 	.word	0x08040000
 8001054:	200001dc 	.word	0x200001dc
 8001058:	08060000 	.word	0x08060000

0800105c <init_load_calibration_values>:


uint8_t init_load_calibration_values(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
	uint8_t error_values_flag = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	70bb      	strb	r3, [r7, #2]
	// Load calibration values from flash
	uint8_t count_read_flash = sizeof(CCW_limits_uint32_flash) / sizeof(CCW_limits_uint32_flash[0]);
 8001066:	2310      	movs	r3, #16
 8001068:	707b      	strb	r3, [r7, #1]
	flash_read_words(ADDR_FLASH_SECTOR_6, CCW_limits_uint32_flash, count_read_flash);
 800106a:	787b      	ldrb	r3, [r7, #1]
 800106c:	461a      	mov	r2, r3
 800106e:	4980      	ldr	r1, [pc, #512]	; (8001270 <init_load_calibration_values+0x214>)
 8001070:	4880      	ldr	r0, [pc, #512]	; (8001274 <init_load_calibration_values+0x218>)
 8001072:	f000 f9c4 	bl	80013fe <flash_read_words>
	// 32 - Number of bytes for the first 8 uint32_t numbers for an array CCW_limits_uint32_flash
	// Its needed to read next portion of flash memory, where locate CW_limits_uint32_flash
	flash_read_words(ADDR_FLASH_SECTOR_7, CW_limits_uint32_flash, count_read_flash);
 8001076:	787b      	ldrb	r3, [r7, #1]
 8001078:	461a      	mov	r2, r3
 800107a:	497f      	ldr	r1, [pc, #508]	; (8001278 <init_load_calibration_values+0x21c>)
 800107c:	487f      	ldr	r0, [pc, #508]	; (800127c <init_load_calibration_values+0x220>)
 800107e:	f000 f9be 	bl	80013fe <flash_read_words>

	// If left hand have not calibrated, nothing will works
	for(uint8_t i=0; i<8; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	e016      	b.n	80010b6 <init_load_calibration_values+0x5a>
	{
		if (CCW_limits_uint32_flash[i]>4096)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a79      	ldr	r2, [pc, #484]	; (8001270 <init_load_calibration_values+0x214>)
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001094:	d902      	bls.n	800109c <init_load_calibration_values+0x40>
			left_hand_activation = 0;
 8001096:	4b7a      	ldr	r3, [pc, #488]	; (8001280 <init_load_calibration_values+0x224>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
		if (CW_limits_uint32_flash[i]>4096)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	4a76      	ldr	r2, [pc, #472]	; (8001278 <init_load_calibration_values+0x21c>)
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010a8:	d902      	bls.n	80010b0 <init_load_calibration_values+0x54>
			left_hand_activation = 0;
 80010aa:	4b75      	ldr	r3, [pc, #468]	; (8001280 <init_load_calibration_values+0x224>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<8; i++)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	3301      	adds	r3, #1
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b07      	cmp	r3, #7
 80010ba:	d9e5      	bls.n	8001088 <init_load_calibration_values+0x2c>
	}

	// If right hand have not calibrated, nothing will works
	for(uint8_t i=8; i<16; i++)
 80010bc:	2308      	movs	r3, #8
 80010be:	71bb      	strb	r3, [r7, #6]
 80010c0:	e016      	b.n	80010f0 <init_load_calibration_values+0x94>
	{
		if (CCW_limits_uint32_flash[i]>4096)
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	4a6a      	ldr	r2, [pc, #424]	; (8001270 <init_load_calibration_values+0x214>)
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010ce:	d902      	bls.n	80010d6 <init_load_calibration_values+0x7a>
			right_hand_activation = 0;
 80010d0:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <init_load_calibration_values+0x228>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]
		if (CW_limits_uint32_flash[i]>4096)
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	4a67      	ldr	r2, [pc, #412]	; (8001278 <init_load_calibration_values+0x21c>)
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e2:	d902      	bls.n	80010ea <init_load_calibration_values+0x8e>
			right_hand_activation = 0;
 80010e4:	4b67      	ldr	r3, [pc, #412]	; (8001284 <init_load_calibration_values+0x228>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=8; i<16; i++)
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	3301      	adds	r3, #1
 80010ee:	71bb      	strb	r3, [r7, #6]
 80010f0:	79bb      	ldrb	r3, [r7, #6]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d9e5      	bls.n	80010c2 <init_load_calibration_values+0x66>
	}


	// Explicitly convert to the required type
	if (left_hand_activation==1)
 80010f6:	4b62      	ldr	r3, [pc, #392]	; (8001280 <init_load_calibration_values+0x224>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d11a      	bne.n	8001134 <init_load_calibration_values+0xd8>
	{
		for(uint8_t i=0; i<8; i++)
 80010fe:	2300      	movs	r3, #0
 8001100:	717b      	strb	r3, [r7, #5]
 8001102:	e014      	b.n	800112e <init_load_calibration_values+0xd2>
		{
			CW_limits[i] = (uint16_t) CW_limits_uint32_flash[i];
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	4a5c      	ldr	r2, [pc, #368]	; (8001278 <init_load_calibration_values+0x21c>)
 8001108:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800110c:	797b      	ldrb	r3, [r7, #5]
 800110e:	b291      	uxth	r1, r2
 8001110:	4a5d      	ldr	r2, [pc, #372]	; (8001288 <init_load_calibration_values+0x22c>)
 8001112:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			CCW_limits[i] = (uint16_t) CCW_limits_uint32_flash[i];
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	4a55      	ldr	r2, [pc, #340]	; (8001270 <init_load_calibration_values+0x214>)
 800111a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	b291      	uxth	r1, r2
 8001122:	4a5a      	ldr	r2, [pc, #360]	; (800128c <init_load_calibration_values+0x230>)
 8001124:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i=0; i<8; i++)
 8001128:	797b      	ldrb	r3, [r7, #5]
 800112a:	3301      	adds	r3, #1
 800112c:	717b      	strb	r3, [r7, #5]
 800112e:	797b      	ldrb	r3, [r7, #5]
 8001130:	2b07      	cmp	r3, #7
 8001132:	d9e7      	bls.n	8001104 <init_load_calibration_values+0xa8>
		}
	}

	// Explicitly convert to the required type
	if (right_hand_activation==1)
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <init_load_calibration_values+0x228>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d11a      	bne.n	8001172 <init_load_calibration_values+0x116>
	{
		for(uint8_t i=8; i<16; i++)
 800113c:	2308      	movs	r3, #8
 800113e:	713b      	strb	r3, [r7, #4]
 8001140:	e014      	b.n	800116c <init_load_calibration_values+0x110>
		{
			CW_limits[i] = (uint16_t) CW_limits_uint32_flash[i];
 8001142:	793b      	ldrb	r3, [r7, #4]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <init_load_calibration_values+0x21c>)
 8001146:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	b291      	uxth	r1, r2
 800114e:	4a4e      	ldr	r2, [pc, #312]	; (8001288 <init_load_calibration_values+0x22c>)
 8001150:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			CCW_limits[i] = (uint16_t) CCW_limits_uint32_flash[i];
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	4a46      	ldr	r2, [pc, #280]	; (8001270 <init_load_calibration_values+0x214>)
 8001158:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800115c:	793b      	ldrb	r3, [r7, #4]
 800115e:	b291      	uxth	r1, r2
 8001160:	4a4a      	ldr	r2, [pc, #296]	; (800128c <init_load_calibration_values+0x230>)
 8001162:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(uint8_t i=8; i<16; i++)
 8001166:	793b      	ldrb	r3, [r7, #4]
 8001168:	3301      	adds	r3, #1
 800116a:	713b      	strb	r3, [r7, #4]
 800116c:	793b      	ldrb	r3, [r7, #4]
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d9e7      	bls.n	8001142 <init_load_calibration_values+0xe6>
		}
	}

	for(uint8_t i=0; i<16; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	70fb      	strb	r3, [r7, #3]
 8001176:	e06d      	b.n	8001254 <init_load_calibration_values+0x1f8>
	{
		if(i==2)
 8001178:	78fb      	ldrb	r3, [r7, #3]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d121      	bne.n	80011c2 <init_load_calibration_values+0x166>
			zero_points[i] = (uint16_t)roundf((CW_limits[i] - CCW_limits[i]) * (40.0f / 260.0f)); // angles of 3 DOF joint
 800117e:	78fb      	ldrb	r3, [r7, #3]
 8001180:	4a41      	ldr	r2, [pc, #260]	; (8001288 <init_load_calibration_values+0x22c>)
 8001182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001186:	4619      	mov	r1, r3
 8001188:	78fb      	ldrb	r3, [r7, #3]
 800118a:	4a40      	ldr	r2, [pc, #256]	; (800128c <init_load_calibration_values+0x230>)
 800118c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001190:	1acb      	subs	r3, r1, r3
 8001192:	ee07 3a90 	vmov	s15, r3
 8001196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800119a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001290 <init_load_calibration_values+0x234>
 800119e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011a2:	eeb0 0a67 	vmov.f32	s0, s15
 80011a6:	f00a f82f 	bl	800b208 <roundf>
 80011aa:	eef0 7a40 	vmov.f32	s15, s0
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011b4:	ee17 2a90 	vmov	r2, s15
 80011b8:	b291      	uxth	r1, r2
 80011ba:	4a36      	ldr	r2, [pc, #216]	; (8001294 <init_load_calibration_values+0x238>)
 80011bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80011c0:	e045      	b.n	800124e <init_load_calibration_values+0x1f2>
		else if(i==10)
 80011c2:	78fb      	ldrb	r3, [r7, #3]
 80011c4:	2b0a      	cmp	r3, #10
 80011c6:	d121      	bne.n	800120c <init_load_calibration_values+0x1b0>
			zero_points[i] = (uint16_t)roundf((CW_limits[i] - CCW_limits[i]) * (220.0f / 260.0f));// angles of 3 DOF joint
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	4a2f      	ldr	r2, [pc, #188]	; (8001288 <init_load_calibration_values+0x22c>)
 80011cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011d0:	4619      	mov	r1, r3
 80011d2:	78fb      	ldrb	r3, [r7, #3]
 80011d4:	4a2d      	ldr	r2, [pc, #180]	; (800128c <init_load_calibration_values+0x230>)
 80011d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011da:	1acb      	subs	r3, r1, r3
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011e4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001298 <init_load_calibration_values+0x23c>
 80011e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ec:	eeb0 0a67 	vmov.f32	s0, s15
 80011f0:	f00a f80a 	bl	800b208 <roundf>
 80011f4:	eef0 7a40 	vmov.f32	s15, s0
 80011f8:	78fb      	ldrb	r3, [r7, #3]
 80011fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011fe:	ee17 2a90 	vmov	r2, s15
 8001202:	b291      	uxth	r1, r2
 8001204:	4a23      	ldr	r2, [pc, #140]	; (8001294 <init_load_calibration_values+0x238>)
 8001206:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800120a:	e020      	b.n	800124e <init_load_calibration_values+0x1f2>
		else
			zero_points[i] = (uint16_t)roundf((CW_limits[i] - CCW_limits[i]) / 2.0f);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <init_load_calibration_values+0x22c>)
 8001210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001214:	4619      	mov	r1, r3
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <init_load_calibration_values+0x230>)
 800121a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800121e:	1acb      	subs	r3, r1, r3
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001228:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800122c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001230:	eeb0 0a47 	vmov.f32	s0, s14
 8001234:	f009 ffe8 	bl	800b208 <roundf>
 8001238:	eef0 7a40 	vmov.f32	s15, s0
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001242:	ee17 2a90 	vmov	r2, s15
 8001246:	b291      	uxth	r1, r2
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <init_load_calibration_values+0x238>)
 800124a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i=0; i<16; i++)
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	3301      	adds	r3, #1
 8001252:	70fb      	strb	r3, [r7, #3]
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	2b0f      	cmp	r3, #15
 8001258:	d98e      	bls.n	8001178 <init_load_calibration_values+0x11c>

	}


	if (error_values_flag == 0)
 800125a:	78bb      	ldrb	r3, [r7, #2]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <init_load_calibration_values+0x208>
		return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e000      	b.n	8001266 <init_load_calibration_values+0x20a>
	else
		return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000021c 	.word	0x2000021c
 8001274:	08040000 	.word	0x08040000
 8001278:	200001dc 	.word	0x200001dc
 800127c:	08060000 	.word	0x08060000
 8001280:	20000001 	.word	0x20000001
 8001284:	20000002 	.word	0x20000002
 8001288:	2000019c 	.word	0x2000019c
 800128c:	200001bc 	.word	0x200001bc
 8001290:	3e1d89d9 	.word	0x3e1d89d9
 8001294:	2000017c 	.word	0x2000017c
 8001298:	3f589d8a 	.word	0x3f589d8a

0800129c <load_calibration_values>:

void load_calibration_values(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	// Load calibration values from flash
	uint8_t count_read_flash = sizeof(CCW_limits_uint32_flash) / sizeof(CCW_limits_uint32_flash[0]);
 80012a2:	2310      	movs	r3, #16
 80012a4:	71bb      	strb	r3, [r7, #6]
	flash_read_words(ADDR_FLASH_SECTOR_6, CCW_limits_uint32_flash, count_read_flash);
 80012a6:	79bb      	ldrb	r3, [r7, #6]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4915      	ldr	r1, [pc, #84]	; (8001300 <load_calibration_values+0x64>)
 80012ac:	4815      	ldr	r0, [pc, #84]	; (8001304 <load_calibration_values+0x68>)
 80012ae:	f000 f8a6 	bl	80013fe <flash_read_words>
	// 32 - Number of bytes for the first 8 uint32_t numbers for an array CCW_limits_uint32_flash
	// Its needed to read next portion of flash memory, where locate CW_limits_uint32_flash
	flash_read_words(ADDR_FLASH_SECTOR_7, CW_limits_uint32_flash, count_read_flash);
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4914      	ldr	r1, [pc, #80]	; (8001308 <load_calibration_values+0x6c>)
 80012b8:	4814      	ldr	r0, [pc, #80]	; (800130c <load_calibration_values+0x70>)
 80012ba:	f000 f8a0 	bl	80013fe <flash_read_words>


	for(uint8_t i = 0; i<count_read_flash; i++)
 80012be:	2300      	movs	r3, #0
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	e014      	b.n	80012ee <load_calibration_values+0x52>
	{
		CCW_limits[i] = (uint16_t) CCW_limits_uint32_flash[i];
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	4a0e      	ldr	r2, [pc, #56]	; (8001300 <load_calibration_values+0x64>)
 80012c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	b291      	uxth	r1, r2
 80012d0:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <load_calibration_values+0x74>)
 80012d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		CW_limits[i] = (uint16_t) CW_limits_uint32_flash[i];
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <load_calibration_values+0x6c>)
 80012da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	b291      	uxth	r1, r2
 80012e2:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <load_calibration_values+0x78>)
 80012e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint8_t i = 0; i<count_read_flash; i++)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	3301      	adds	r3, #1
 80012ec:	71fb      	strb	r3, [r7, #7]
 80012ee:	79fa      	ldrb	r2, [r7, #7]
 80012f0:	79bb      	ldrb	r3, [r7, #6]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d3e6      	bcc.n	80012c4 <load_calibration_values+0x28>
	}

}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000021c 	.word	0x2000021c
 8001304:	08040000 	.word	0x08040000
 8001308:	200001dc 	.word	0x200001dc
 800130c:	08060000 	.word	0x08060000
 8001310:	200001bc 	.word	0x200001bc
 8001314:	2000019c 	.word	0x2000019c

08001318 <information_leds_activation>:

void information_leds_activation(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	if (sense_flag==0)
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <information_leds_activation+0x94>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10f      	bne.n	8001344 <information_leds_activation+0x2c>
	{
		// Sense Lvl 1 LED activation
		LL_GPIO_SetOutputPin(Sense_Lvl_1_GPIO_Port, Sense_Lvl_1_Pin);
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4821      	ldr	r0, [pc, #132]	; (80013b0 <information_leds_activation+0x98>)
 800132a:	f7ff fad8 	bl	80008de <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(Sense_Lvl_2_GPIO_Port, Sense_Lvl_2_Pin);
 800132e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001332:	481f      	ldr	r0, [pc, #124]	; (80013b0 <information_leds_activation+0x98>)
 8001334:	f7ff fae1 	bl	80008fa <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(Sense_Lvl_3_GPIO_Port, Sense_Lvl_3_Pin);
 8001338:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133c:	481c      	ldr	r0, [pc, #112]	; (80013b0 <information_leds_activation+0x98>)
 800133e:	f7ff fadc 	bl	80008fa <LL_GPIO_ResetOutputPin>
 8001342:	e022      	b.n	800138a <information_leds_activation+0x72>
	}
	else if (sense_flag==1)
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <information_leds_activation+0x94>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d10f      	bne.n	800136c <information_leds_activation+0x54>
	{
		// Sense Lvl 2 LED activation
		LL_GPIO_ResetOutputPin(Sense_Lvl_1_GPIO_Port, Sense_Lvl_1_Pin);
 800134c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001350:	4817      	ldr	r0, [pc, #92]	; (80013b0 <information_leds_activation+0x98>)
 8001352:	f7ff fad2 	bl	80008fa <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(Sense_Lvl_2_GPIO_Port, Sense_Lvl_2_Pin);
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	4815      	ldr	r0, [pc, #84]	; (80013b0 <information_leds_activation+0x98>)
 800135c:	f7ff fabf 	bl	80008de <LL_GPIO_SetOutputPin>
		LL_GPIO_ResetOutputPin(Sense_Lvl_3_GPIO_Port, Sense_Lvl_3_Pin);
 8001360:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <information_leds_activation+0x98>)
 8001366:	f7ff fac8 	bl	80008fa <LL_GPIO_ResetOutputPin>
 800136a:	e00e      	b.n	800138a <information_leds_activation+0x72>
	}
	else
	{
		// Sense Lvl 3 LED activation
		LL_GPIO_ResetOutputPin(Sense_Lvl_1_GPIO_Port, Sense_Lvl_1_Pin);
 800136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001370:	480f      	ldr	r0, [pc, #60]	; (80013b0 <information_leds_activation+0x98>)
 8001372:	f7ff fac2 	bl	80008fa <LL_GPIO_ResetOutputPin>
		LL_GPIO_ResetOutputPin(Sense_Lvl_2_GPIO_Port, Sense_Lvl_2_Pin);
 8001376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137a:	480d      	ldr	r0, [pc, #52]	; (80013b0 <information_leds_activation+0x98>)
 800137c:	f7ff fabd 	bl	80008fa <LL_GPIO_ResetOutputPin>
		LL_GPIO_SetOutputPin(Sense_Lvl_3_GPIO_Port, Sense_Lvl_3_Pin);
 8001380:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001384:	480a      	ldr	r0, [pc, #40]	; (80013b0 <information_leds_activation+0x98>)
 8001386:	f7ff faaa 	bl	80008de <LL_GPIO_SetOutputPin>
	}

	// Data collection LED activation
	if(start_dataset_collection_flag==0)
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <information_leds_activation+0x9c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d105      	bne.n	800139e <information_leds_activation+0x86>
		LL_GPIO_ResetOutputPin(start_dataset_collection_led_GPIO_Port, start_dataset_collection_led_Pin);
 8001392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <information_leds_activation+0x98>)
 8001398:	f7ff faaf 	bl	80008fa <LL_GPIO_ResetOutputPin>
	else
		LL_GPIO_SetOutputPin(start_dataset_collection_led_GPIO_Port, start_dataset_collection_led_Pin);
}
 800139c:	e004      	b.n	80013a8 <information_leds_activation+0x90>
		LL_GPIO_SetOutputPin(start_dataset_collection_led_GPIO_Port, start_dataset_collection_led_Pin);
 800139e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013a2:	4803      	ldr	r0, [pc, #12]	; (80013b0 <information_leds_activation+0x98>)
 80013a4:	f7ff fa9b 	bl	80008de <LL_GPIO_SetOutputPin>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000179 	.word	0x20000179
 80013b0:	40020400 	.word	0x40020400
 80013b4:	20000178 	.word	0x20000178

080013b8 <erase_flash>:


void erase_flash(uint32_t sector)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PageError = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
	// Settings of clearing flash
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;  // Clear sector
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80013c8:	2302      	movs	r3, #2
 80013ca:	61fb      	str	r3, [r7, #28]
	EraseInitStruct.Sector = sector; // Point to sector
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;  // Number of sector
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 80013d4:	f002 fd74 	bl	8003ec0 <HAL_FLASH_Unlock>

	// Clearing
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 80013d8:	f107 0208 	add.w	r2, r7, #8
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f002 feea 	bl	80041bc <HAL_FLASHEx_Erase>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <erase_flash+0x3a>
	{
		HAL_FLASH_Lock();
 80013ee:	f002 fd89 	bl	8003f04 <HAL_FLASH_Lock>
	}

	HAL_FLASH_Lock();
 80013f2:	f002 fd87 	bl	8003f04 <HAL_FLASH_Lock>
}
 80013f6:	bf00      	nop
 80013f8:	3720      	adds	r7, #32
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <flash_read_words>:

void flash_read_words(uint32_t address, uint32_t *dest, uint8_t count)
{
 80013fe:	b480      	push	{r7}
 8001400:	b087      	sub	sp, #28
 8001402:	af00      	add	r7, sp, #0
 8001404:	60f8      	str	r0, [r7, #12]
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	4613      	mov	r3, r2
 800140a:	71fb      	strb	r3, [r7, #7]
		* @param dest: pointer to the array where the read data will be written.
		* @param count: number of 32-bit words to read.
		* @retval No return value.
		* @note Reading from flash is done directly, since it is mapped into the address space.
	*/
    for (uint8_t i = 0; i < count; i++)
 800140c:	2300      	movs	r3, #0
 800140e:	75fb      	strb	r3, [r7, #23]
 8001410:	e00c      	b.n	800142c <flash_read_words+0x2e>
    {
        dest[i] = *(volatile uint32_t *)address;  // Or you can use __IO uint32_t * (analogous to volatile uint32_t *)
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	440b      	add	r3, r1
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	601a      	str	r2, [r3, #0]
        address += 4;  // Move to the next 32-bit word
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	3304      	adds	r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < count; i++)
 8001426:	7dfb      	ldrb	r3, [r7, #23]
 8001428:	3301      	adds	r3, #1
 800142a:	75fb      	strb	r3, [r7, #23]
 800142c:	7dfa      	ldrb	r2, [r7, #23]
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	429a      	cmp	r2, r3
 8001432:	d3ee      	bcc.n	8001412 <flash_read_words+0x14>
    }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <flash_write_words>:

uint32_t flash_write_words(uint32_t sector, uint32_t address, uint32_t *idata, uint8_t count)
{
 8001442:	b5b0      	push	{r4, r5, r7, lr}
 8001444:	b08e      	sub	sp, #56	; 0x38
 8001446:	af00      	add	r7, sp, #0
 8001448:	60f8      	str	r0, [r7, #12]
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	70fb      	strb	r3, [r7, #3]
	* @param count: number of 32-bit elements in the array.
	* @retval 0 if the write was successful, or the HAL_FLASH_GetError() error code on error.
	* Tip: ise "uint8_t count = sizeof(my_array) / sizeof(my_array[0]);" for count calculation.
*/
    uint32_t error;
    uint32_t PageError = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    FLASH_EraseInitTypeDef EraseInitStruct;

    // Determine if sector correct, only 6 or 7 allowed
    if ((sector == FLASH_SECTOR_6) || (sector == FLASH_SECTOR_7))
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b06      	cmp	r3, #6
 8001458:	d002      	beq.n	8001460 <flash_write_words+0x1e>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d152      	bne.n	8001506 <flash_write_words+0xc4>
    {
        HAL_FLASH_Unlock();
 8001460:	f002 fd2e 	bl	8003ec0 <HAL_FLASH_Unlock>

    	// Settings of clearing flash
    	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;  // Clear sector
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
    	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001468:	2302      	movs	r3, #2
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
    	EraseInitStruct.Sector = sector; // Point to sector
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	61fb      	str	r3, [r7, #28]
    	EraseInitStruct.NbSectors = 1;  // Number of sector
 8001470:	2301      	movs	r3, #1
 8001472:	623b      	str	r3, [r7, #32]

        if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001474:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fe9c 	bl	80041bc <HAL_FLASHEx_Erase>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <flash_write_words+0x56>
        {
            error = HAL_FLASH_GetError();
 800148a:	f002 fd4b 	bl	8003f24 <HAL_FLASH_GetError>
 800148e:	62f8      	str	r0, [r7, #44]	; 0x2c
            HAL_FLASH_Lock();
 8001490:	f002 fd38 	bl	8003f04 <HAL_FLASH_Lock>
            return error;
 8001494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001496:	e037      	b.n	8001508 <flash_write_words+0xc6>
        }

        uint32_t temp_debug_value = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	633b      	str	r3, [r7, #48]	; 0x30
        // Write data: uint32_t
        for (uint8_t i = 0; i < count; i++)
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80014a2:	e027      	b.n	80014f4 <flash_write_words+0xb2>
        {
        	temp_debug_value = idata[i];
 80014a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	633b      	str	r3, [r7, #48]	; 0x30
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, idata[i]) != HAL_OK)
 80014b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	4413      	add	r3, r2
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	461c      	mov	r4, r3
 80014c2:	4615      	mov	r5, r2
 80014c4:	4622      	mov	r2, r4
 80014c6:	462b      	mov	r3, r5
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	2002      	movs	r0, #2
 80014cc:	f002 fca4 	bl	8003e18 <HAL_FLASH_Program>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <flash_write_words+0xa2>
            {
                error = HAL_FLASH_GetError();
 80014d6:	f002 fd25 	bl	8003f24 <HAL_FLASH_GetError>
 80014da:	62f8      	str	r0, [r7, #44]	; 0x2c
                HAL_FLASH_Lock();
 80014dc:	f002 fd12 	bl	8003f04 <HAL_FLASH_Lock>
                return error;
 80014e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e2:	e011      	b.n	8001508 <flash_write_words+0xc6>
            }
            address += 4;  // Move to the next 32-bit word
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3304      	adds	r3, #4
 80014e8:	60bb      	str	r3, [r7, #8]
        for (uint8_t i = 0; i < count; i++)
 80014ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80014ee:	3301      	adds	r3, #1
 80014f0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80014f4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d3d2      	bcc.n	80014a4 <flash_write_words+0x62>
        }

        HAL_FLASH_Lock();
 80014fe:	f002 fd01 	bl	8003f04 <HAL_FLASH_Lock>
        return 0;  // Recording was successful
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <flash_write_words+0xc6>
    }
    else
        return 1;  // Error: invalid address
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3738      	adds	r7, #56	; 0x38
 800150c:	46bd      	mov	sp, r7
 800150e:	bdb0      	pop	{r4, r5, r7, pc}

08001510 <depug_piip>:

void depug_piip(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001514:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001518:	4806      	ldr	r0, [pc, #24]	; (8001534 <depug_piip+0x24>)
 800151a:	f7ff f9e0 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(35);
 800151e:	2023      	movs	r0, #35	; 0x23
 8001520:	f007 f916 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001524:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <depug_piip+0x24>)
 800152a:	f7ff f9e6 	bl	80008fa <LL_GPIO_ResetOutputPin>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40020000 	.word	0x40020000

08001538 <start_melody>:

void start_melody(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
//	LL_mDelay(1500);
	uint8_t delay_ms = 16;
 800153e:	2310      	movs	r3, #16
 8001540:	71fb      	strb	r3, [r7, #7]

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001542:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001546:	485e      	ldr	r0, [pc, #376]	; (80016c0 <start_melody+0x188>)
 8001548:	f7ff f9c9 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4618      	mov	r0, r3
 8001550:	f007 f8fe 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001558:	4859      	ldr	r0, [pc, #356]	; (80016c0 <start_melody+0x188>)
 800155a:	f7ff f9ce 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	4618      	mov	r0, r3
 8001562:	f007 f8f5 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156a:	4855      	ldr	r0, [pc, #340]	; (80016c0 <start_melody+0x188>)
 800156c:	f7ff f9b7 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	4618      	mov	r0, r3
 8001574:	f007 f8ec 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157c:	4850      	ldr	r0, [pc, #320]	; (80016c0 <start_melody+0x188>)
 800157e:	f7ff f9bc 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	4618      	mov	r0, r3
 8001586:	f007 f8e3 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	484c      	ldr	r0, [pc, #304]	; (80016c0 <start_melody+0x188>)
 8001590:	f7ff f9a5 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4618      	mov	r0, r3
 8001598:	f007 f8da 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 800159c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a0:	4847      	ldr	r0, [pc, #284]	; (80016c0 <start_melody+0x188>)
 80015a2:	f7ff f9aa 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f007 f8d1 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 80015ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b2:	4843      	ldr	r0, [pc, #268]	; (80016c0 <start_melody+0x188>)
 80015b4:	f7ff f993 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f007 f8c8 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 80015c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c4:	483e      	ldr	r0, [pc, #248]	; (80016c0 <start_melody+0x188>)
 80015c6:	f7ff f998 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f007 f8bf 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 80015d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d6:	483a      	ldr	r0, [pc, #232]	; (80016c0 <start_melody+0x188>)
 80015d8:	f7ff f981 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f007 f8b6 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 80015e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015e8:	4835      	ldr	r0, [pc, #212]	; (80016c0 <start_melody+0x188>)
 80015ea:	f7ff f986 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f007 f8ad 	bl	8008750 <LL_mDelay>

	LL_mDelay(70);
 80015f6:	2046      	movs	r0, #70	; 0x46
 80015f8:	f007 f8aa 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 80015fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001600:	482f      	ldr	r0, [pc, #188]	; (80016c0 <start_melody+0x188>)
 8001602:	f7ff f96c 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	4618      	mov	r0, r3
 800160a:	f007 f8a1 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	482b      	ldr	r0, [pc, #172]	; (80016c0 <start_melody+0x188>)
 8001614:	f7ff f971 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f007 f898 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <start_melody+0x188>)
 8001626:	f7ff f95a 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	4618      	mov	r0, r3
 800162e:	f007 f88f 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001632:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001636:	4822      	ldr	r0, [pc, #136]	; (80016c0 <start_melody+0x188>)
 8001638:	f7ff f95f 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	4618      	mov	r0, r3
 8001640:	f007 f886 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001648:	481d      	ldr	r0, [pc, #116]	; (80016c0 <start_melody+0x188>)
 800164a:	f7ff f948 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	4618      	mov	r0, r3
 8001652:	f007 f87d 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165a:	4819      	ldr	r0, [pc, #100]	; (80016c0 <start_melody+0x188>)
 800165c:	f7ff f94d 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	4618      	mov	r0, r3
 8001664:	f007 f874 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 8001668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166c:	4814      	ldr	r0, [pc, #80]	; (80016c0 <start_melody+0x188>)
 800166e:	f7ff f936 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f007 f86b 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	4810      	ldr	r0, [pc, #64]	; (80016c0 <start_melody+0x188>)
 8001680:	f7ff f93b 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	4618      	mov	r0, r3
 8001688:	f007 f862 	bl	8008750 <LL_mDelay>

	LL_GPIO_SetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 800168c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001690:	480b      	ldr	r0, [pc, #44]	; (80016c0 <start_melody+0x188>)
 8001692:	f7ff f924 	bl	80008de <LL_GPIO_SetOutputPin>
	LL_mDelay(delay_ms);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f007 f859 	bl	8008750 <LL_mDelay>
	LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 800169e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <start_melody+0x188>)
 80016a4:	f7ff f929 	bl	80008fa <LL_GPIO_ResetOutputPin>
	LL_mDelay(delay_ms);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f007 f850 	bl	8008750 <LL_mDelay>

	LL_mDelay(200);
 80016b0:	20c8      	movs	r0, #200	; 0xc8
 80016b2:	f007 f84d 	bl	8008750 <LL_mDelay>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	40020000 	.word	0x40020000

080016c4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_CRC_Init+0x20>)
 80016ca:	4a07      	ldr	r2, [pc, #28]	; (80016e8 <MX_CRC_Init+0x24>)
 80016cc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_CRC_Init+0x20>)
 80016d0:	f002 fb53 	bl	8003d7a <HAL_CRC_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016da:	f001 f81f 	bl	800271c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000164 	.word	0x20000164
 80016e8:	40023000 	.word	0x40023000

080016ec <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	; (8001728 <HAL_CRC_MspInit+0x3c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d10d      	bne.n	800171a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_CRC_MspInit+0x40>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a09      	ldr	r2, [pc, #36]	; (800172c <HAL_CRC_MspInit+0x40>)
 8001708:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <HAL_CRC_MspInit+0x40>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023000 	.word	0x40023000
 800172c:	40023800 	.word	0x40023800

08001730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <__NVIC_GetPriorityGrouping+0x18>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	0a1b      	lsrs	r3, r3, #8
 800173a:	f003 0307 	and.w	r3, r3, #7
}
 800173e:	4618      	mov	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	db0b      	blt.n	8001776 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	f003 021f 	and.w	r2, r3, #31
 8001764:	4907      	ldr	r1, [pc, #28]	; (8001784 <__NVIC_EnableIRQ+0x38>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	095b      	lsrs	r3, r3, #5
 800176c:	2001      	movs	r0, #1
 800176e:	fa00 f202 	lsl.w	r2, r0, r2
 8001772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e100 	.word	0xe000e100

08001788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	6039      	str	r1, [r7, #0]
 8001792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db0a      	blt.n	80017b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	490c      	ldr	r1, [pc, #48]	; (80017d4 <__NVIC_SetPriority+0x4c>)
 80017a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a6:	0112      	lsls	r2, r2, #4
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	440b      	add	r3, r1
 80017ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b0:	e00a      	b.n	80017c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <__NVIC_SetPriority+0x50>)
 80017b8:	79fb      	ldrb	r3, [r7, #7]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	3b04      	subs	r3, #4
 80017c0:	0112      	lsls	r2, r2, #4
 80017c2:	b2d2      	uxtb	r2, r2
 80017c4:	440b      	add	r3, r1
 80017c6:	761a      	strb	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000e100 	.word	0xe000e100
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f1c3 0307 	rsb	r3, r3, #7
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	bf28      	it	cs
 80017fa:	2304      	movcs	r3, #4
 80017fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3304      	adds	r3, #4
 8001802:	2b06      	cmp	r3, #6
 8001804:	d902      	bls.n	800180c <NVIC_EncodePriority+0x30>
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3b03      	subs	r3, #3
 800180a:	e000      	b.n	800180e <NVIC_EncodePriority+0x32>
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	f04f 32ff 	mov.w	r2, #4294967295
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43da      	mvns	r2, r3
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	401a      	ands	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001824:	f04f 31ff 	mov.w	r1, #4294967295
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43d9      	mvns	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	4313      	orrs	r3, r2
         );
}
 8001836:	4618      	mov	r0, r3
 8001838:	3724      	adds	r7, #36	; 0x24
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800184e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4313      	orrs	r3, r2
 8001856:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800185a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4013      	ands	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	40023800 	.word	0x40023800

08001874 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 800187e:	4a13      	ldr	r2, [pc, #76]	; (80018cc <LL_SYSCFG_SetEXTISource+0x58>)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	3302      	adds	r3, #2
 8001886:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	0c1b      	lsrs	r3, r3, #16
 800188e:	43db      	mvns	r3, r3
 8001890:	ea02 0103 	and.w	r1, r2, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	0c1b      	lsrs	r3, r3, #16
 8001898:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	fab3 f383 	clz	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	461a      	mov	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	fa03 f202 	lsl.w	r2, r3, r2
 80018b2:	4806      	ldr	r0, [pc, #24]	; (80018cc <LL_SYSCFG_SetEXTISource+0x58>)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	430a      	orrs	r2, r1
 80018ba:	3302      	adds	r3, #2
 80018bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40013800 	.word	0x40013800

080018d0 <LL_GPIO_SetPinMode>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	fa93 f3a3 	rbit	r3, r3
 80018ea:	613b      	str	r3, [r7, #16]
  return result;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	fab3 f383 	clz	r3, r3
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2103      	movs	r1, #3
 80018f8:	fa01 f303 	lsl.w	r3, r1, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	61bb      	str	r3, [r7, #24]
  return result;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	431a      	orrs	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	601a      	str	r2, [r3, #0]
}
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr

0800192e <LL_GPIO_SetPinPull>:
{
 800192e:	b480      	push	{r7}
 8001930:	b089      	sub	sp, #36	; 0x24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa93 f3a3 	rbit	r3, r3
 8001948:	613b      	str	r3, [r7, #16]
  return result;
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fab3 f383 	clz	r3, r3
 8001950:	b2db      	uxtb	r3, r3
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	2103      	movs	r1, #3
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	401a      	ands	r2, r3
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	61bb      	str	r3, [r7, #24]
  return result;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	fab3 f383 	clz	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	60da      	str	r2, [r3, #12]
}
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_GPIO_ResetOutputPin>:
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	041a      	lsls	r2, r3, #16
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	619a      	str	r2, [r3, #24]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	463b      	mov	r3, r7
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]
 80019ca:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80019cc:	2080      	movs	r0, #128	; 0x80
 80019ce:	f7ff ff39 	bl	8001844 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80019d2:	2004      	movs	r0, #4
 80019d4:	f7ff ff36 	bl	8001844 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff ff33 	bl	8001844 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80019de:	2002      	movs	r0, #2
 80019e0:	f7ff ff30 	bl	8001844 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, Sense_Lvl_1_Pin|Sense_Lvl_2_Pin|Sense_Lvl_3_Pin|En_left_motor_Pin
 80019e4:	f247 2128 	movw	r1, #29224	; 0x7228
 80019e8:	485b      	ldr	r0, [pc, #364]	; (8001b58 <MX_GPIO_Init+0x1ac>)
 80019ea:	f7ff ffcf 	bl	800198c <LL_GPIO_ResetOutputPin>
                          |Dir_left_motor_Pin|start_dataset_collection_led_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, RE_DE_Pin|En_right_motor_Pin|Dir_right_motor_Pin);
 80019ee:	f44f 6150 	mov.w	r1, #3328	; 0xd00
 80019f2:	485a      	ldr	r0, [pc, #360]	; (8001b5c <MX_GPIO_Init+0x1b0>)
 80019f4:	f7ff ffca 	bl	800198c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Buzzer_GPIO_Port, Buzzer_Pin);
 80019f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fc:	4858      	ldr	r0, [pc, #352]	; (8001b60 <MX_GPIO_Init+0x1b4>)
 80019fe:	f7ff ffc5 	bl	800198c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a02:	2304      	movs	r3, #4
 8001a04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4619      	mov	r1, r3
 8001a12:	4851      	ldr	r0, [pc, #324]	; (8001b58 <MX_GPIO_Init+0x1ac>)
 8001a14:	f004 fb20 	bl	8006058 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Sense_Lvl_1_Pin|Sense_Lvl_2_Pin|Sense_Lvl_3_Pin|En_left_motor_Pin
 8001a18:	f247 2328 	movw	r3, #29224	; 0x7228
 8001a1c:	603b      	str	r3, [r7, #0]
                          |Dir_left_motor_Pin|start_dataset_collection_led_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4619      	mov	r1, r3
 8001a32:	4849      	ldr	r0, [pc, #292]	; (8001b58 <MX_GPIO_Init+0x1ac>)
 8001a34:	f004 fb10 	bl	8006058 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RE_DE_Pin;
 8001a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(RE_DE_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4842      	ldr	r0, [pc, #264]	; (8001b5c <MX_GPIO_Init+0x1b0>)
 8001a54:	f004 fb00 	bl	8006058 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001a58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a5c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_MEDIUM;
 8001a62:	2301      	movs	r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	483b      	ldr	r0, [pc, #236]	; (8001b60 <MX_GPIO_Init+0x1b4>)
 8001a74:	f004 faf0 	bl	8006058 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = En_right_motor_Pin|Dir_right_motor_Pin;
 8001a78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a7c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8e:	463b      	mov	r3, r7
 8001a90:	4619      	mov	r1, r3
 8001a92:	4832      	ldr	r0, [pc, #200]	; (8001b5c <MX_GPIO_Init+0x1b0>)
 8001a94:	f004 fae0 	bl	8006058 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE15);
 8001a98:	4932      	ldr	r1, [pc, #200]	; (8001b64 <MX_GPIO_Init+0x1b8>)
 8001a9a:	2001      	movs	r0, #1
 8001a9c:	f7ff feea 	bl	8001874 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE8);
 8001aa0:	4931      	ldr	r1, [pc, #196]	; (8001b68 <MX_GPIO_Init+0x1bc>)
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7ff fee6 	bl	8001874 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8001aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aac:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 f944 	bl	8005d4c <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8001ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac8:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001aca:	2301      	movs	r3, #1
 8001acc:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001ad6:	f107 0318 	add.w	r3, r7, #24
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 f936 	bl	8005d4c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(EXTI15_10_Selecting_the_sensitivity_mode_GPIO_Port, EXTI15_10_Selecting_the_sensitivity_mode_Pin, LL_GPIO_PULL_DOWN);
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae6:	481c      	ldr	r0, [pc, #112]	; (8001b58 <MX_GPIO_Init+0x1ac>)
 8001ae8:	f7ff ff21 	bl	800192e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(EXTI9_5_start_dataset_collection_GPIO_Port, EXTI9_5_start_dataset_collection_Pin, LL_GPIO_PULL_DOWN);
 8001aec:	2202      	movs	r2, #2
 8001aee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001af2:	4819      	ldr	r0, [pc, #100]	; (8001b58 <MX_GPIO_Init+0x1ac>)
 8001af4:	f7ff ff1b 	bl	800192e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(EXTI15_10_Selecting_the_sensitivity_mode_GPIO_Port, EXTI15_10_Selecting_the_sensitivity_mode_Pin, LL_GPIO_MODE_INPUT);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afe:	4816      	ldr	r0, [pc, #88]	; (8001b58 <MX_GPIO_Init+0x1ac>)
 8001b00:	f7ff fee6 	bl	80018d0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(EXTI9_5_start_dataset_collection_GPIO_Port, EXTI9_5_start_dataset_collection_Pin, LL_GPIO_MODE_INPUT);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0a:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_GPIO_Init+0x1ac>)
 8001b0c:	f7ff fee0 	bl	80018d0 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI9_5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b10:	f7ff fe0e 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fe5e 	bl	80017dc <NVIC_EncodePriority>
 8001b20:	4603      	mov	r3, r0
 8001b22:	4619      	mov	r1, r3
 8001b24:	2017      	movs	r0, #23
 8001b26:	f7ff fe2f 	bl	8001788 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b2a:	2017      	movs	r0, #23
 8001b2c:	f7ff fe0e 	bl	800174c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b30:	f7ff fdfe 	bl	8001730 <__NVIC_GetPriorityGrouping>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fe4e 	bl	80017dc <NVIC_EncodePriority>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4619      	mov	r1, r3
 8001b44:	2028      	movs	r0, #40	; 0x28
 8001b46:	f7ff fe1f 	bl	8001788 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b4a:	2028      	movs	r0, #40	; 0x28
 8001b4c:	f7ff fdfe 	bl	800174c <__NVIC_EnableIRQ>

}
 8001b50:	bf00      	nop
 8001b52:	3720      	adds	r7, #32
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020000 	.word	0x40020000
 8001b64:	f0000003 	.word	0xf0000003
 8001b68:	000f0002 	.word	0x000f0002

08001b6c <__NVIC_EnableIRQ>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	db0b      	blt.n	8001b96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	f003 021f 	and.w	r2, r3, #31
 8001b84:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <__NVIC_EnableIRQ+0x38>)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	095b      	lsrs	r3, r3, #5
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000e100 	.word	0xe000e100

08001ba8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <LL_RCC_HSE_Enable+0x1c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <LL_RCC_HSE_Enable+0x1c>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <LL_RCC_HSE_IsReady+0x24>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bd8:	bf0c      	ite	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	2300      	movne	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800

08001bf0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <LL_RCC_SetSysClkSource+0x24>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 0203 	bic.w	r2, r3, #3
 8001c00:	4904      	ldr	r1, [pc, #16]	; (8001c14 <LL_RCC_SetSysClkSource+0x24>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40023800 	.word	0x40023800

08001c18 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <LL_RCC_GetSysClkSource+0x18>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 030c 	and.w	r3, r3, #12
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <LL_RCC_SetAHBPrescaler+0x24>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <LL_RCC_SetAHBPrescaler+0x24>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	608b      	str	r3, [r1, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40023800 	.word	0x40023800

08001c5c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c6c:	4904      	ldr	r1, [pc, #16]	; (8001c80 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	608b      	str	r3, [r1, #8]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	40023800 	.word	0x40023800

08001c84 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c94:	4904      	ldr	r1, [pc, #16]	; (8001ca8 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	608b      	str	r3, [r1, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	40023800 	.word	0x40023800

08001cac <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <LL_RCC_SetTIMPrescaler+0x28>)
 8001cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001cbe:	4905      	ldr	r1, [pc, #20]	; (8001cd4 <LL_RCC_SetTIMPrescaler+0x28>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001cdc:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <LL_RCC_PLL_Enable+0x1c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <LL_RCC_PLL_Enable+0x1c>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001cfc:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <LL_RCC_PLL_IsReady+0x24>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d08:	bf0c      	ite	eq
 8001d0a:	2301      	moveq	r3, #1
 8001d0c:	2300      	movne	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800

08001d20 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
 8001d2c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	68f9      	ldr	r1, [r7, #12]
 8001d38:	68ba      	ldr	r2, [r7, #8]
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	0192      	lsls	r2, r2, #6
 8001d40:	430a      	orrs	r2, r1
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d50:	4904      	ldr	r1, [pc, #16]	; (8001d64 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40023800 	.word	0x40023800
 8001d68:	ffbf8000 	.word	0xffbf8000

08001d6c <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	68f9      	ldr	r1, [r7, #12]
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	0192      	lsls	r2, r2, #6
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	430a      	orrs	r2, r1
 8001d92:	4904      	ldr	r1, [pc, #16]	; (8001da4 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40023800 	.word	0x40023800
 8001da8:	f0bf8000 	.word	0xf0bf8000

08001dac <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <LL_FLASH_SetLatency+0x24>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f023 0207 	bic.w	r2, r3, #7
 8001dbc:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <LL_FLASH_SetLatency+0x24>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	600b      	str	r3, [r1, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40023c00 	.word	0x40023c00

08001dd4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <LL_FLASH_GetLatency+0x18>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0307 	and.w	r3, r3, #7
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023c00 	.word	0x40023c00

08001df0 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	600b      	str	r3, [r1, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40007000 	.word	0x40007000

08001e18 <LL_TIM_EnableCounter>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f043 0201 	orr.w	r2, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	601a      	str	r2, [r3, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_TIM_CC_EnableChannel>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1a      	ldr	r2, [r3, #32]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	621a      	str	r2, [r3, #32]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <LL_TIM_OC_SetCompareCH1>:
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
 8001e62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <LL_USART_EnableIT_RXNE>:
{
 8001e76:	b480      	push	{r7}
 8001e78:	b089      	sub	sp, #36	; 0x24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	330c      	adds	r3, #12
 8001e82:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	e853 3f00 	ldrex	r3, [r3]
 8001e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f043 0320 	orr.w	r3, r3, #32
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	330c      	adds	r3, #12
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	61ba      	str	r2, [r7, #24]
 8001e9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	e841 2300 	strex	r3, r2, [r1]
 8001ea6:	613b      	str	r3, [r7, #16]
   return(result);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1e7      	bne.n	8001e7e <LL_USART_EnableIT_RXNE+0x8>
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3724      	adds	r7, #36	; 0x24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_USART_EnableIT_ERROR>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	e853 3f00 	ldrex	r3, [r3]
 8001ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3314      	adds	r3, #20
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	61ba      	str	r2, [r7, #24]
 8001ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	e841 2300 	strex	r3, r2, [r1]
 8001eec:	613b      	str	r3, [r7, #16]
   return(result);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e7      	bne.n	8001ec4 <LL_USART_EnableIT_ERROR+0x8>
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_GPIO_SetOutputPin>:
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_GPIO_ResetOutputPin>:
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	041a      	lsls	r2, r3, #16
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	619a      	str	r2, [r3, #24]
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f42:	f001 f991 	bl	8003268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f46:	f000 fb95 	bl	8002674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f4a:	f7ff fd2f 	bl	80019ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001f4e:	f7fe fac3 	bl	80004d8 <MX_ADC1_Init>
  MX_CRC_Init();
 8001f52:	f7ff fbb7 	bl	80016c4 <MX_CRC_Init>
  MX_TIM2_Init();
 8001f56:	f000 ff1f 	bl	8002d98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f5a:	f000 ff9f 	bl	8002e9c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001f5e:	f001 f8f9 	bl	8003154 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8001f62:	f008 fbf3 	bl	800a74c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  	uint32_t crc_test_value = 462;
 8001f66:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
 8001f6a:	61bb      	str	r3, [r7, #24]



	// Start Tim 2 to work, it will produce right motor PWM
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f72:	f7ff ff61 	bl	8001e38 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM2);
 8001f76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f7a:	f7ff ff4d 	bl	8001e18 <LL_TIM_EnableCounter>

	// Set En and Dir pins for right motor
	LL_GPIO_SetOutputPin(En_right_motor_GPIO_Port, En_right_motor_Pin);
 8001f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f82:	48c0      	ldr	r0, [pc, #768]	; (8002284 <main+0x348>)
 8001f84:	f7ff ffbd 	bl	8001f02 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(Dir_right_motor_GPIO_Port, Dir_right_motor_Pin);
 8001f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8c:	48bd      	ldr	r0, [pc, #756]	; (8002284 <main+0x348>)
 8001f8e:	f7ff ffc6 	bl	8001f1e <LL_GPIO_ResetOutputPin>

	// Set PWM for right motor to 0 (equal ZERO current)
	LL_TIM_OC_SetCompareCH1(TIM2,0);
 8001f92:	2100      	movs	r1, #0
 8001f94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f98:	f7ff ff5f 	bl	8001e5a <LL_TIM_OC_SetCompareCH1>



	// Allow Tim 3 to work, it will produce left motor PWM
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	48ba      	ldr	r0, [pc, #744]	; (8002288 <main+0x34c>)
 8001fa0:	f7ff ff4a 	bl	8001e38 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 8001fa4:	48b8      	ldr	r0, [pc, #736]	; (8002288 <main+0x34c>)
 8001fa6:	f7ff ff37 	bl	8001e18 <LL_TIM_EnableCounter>

	// Set En and Dir pins for left motor
	LL_GPIO_SetOutputPin(En_left_motor_GPIO_Port, En_left_motor_Pin);
 8001faa:	2108      	movs	r1, #8
 8001fac:	48b7      	ldr	r0, [pc, #732]	; (800228c <main+0x350>)
 8001fae:	f7ff ffa8 	bl	8001f02 <LL_GPIO_SetOutputPin>
	LL_GPIO_ResetOutputPin(Dir_left_motor_GPIO_Port, Dir_left_motor_Pin);
 8001fb2:	2120      	movs	r1, #32
 8001fb4:	48b5      	ldr	r0, [pc, #724]	; (800228c <main+0x350>)
 8001fb6:	f7ff ffb2 	bl	8001f1e <LL_GPIO_ResetOutputPin>

	// Set PWM for left motor to 0 (equal ZERO current)
	LL_TIM_OC_SetCompareCH1(TIM3,0);
 8001fba:	2100      	movs	r1, #0
 8001fbc:	48b2      	ldr	r0, [pc, #712]	; (8002288 <main+0x34c>)
 8001fbe:	f7ff ff4c 	bl	8001e5a <LL_TIM_OC_SetCompareCH1>



	// Allow USART 6 to work
	NVIC_EnableIRQ(USART6_IRQn);
 8001fc2:	2047      	movs	r0, #71	; 0x47
 8001fc4:	f7ff fdd2 	bl	8001b6c <__NVIC_EnableIRQ>

	//  LL_USART_Enable(USART6);
	USART6->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8001fc8:	4bb1      	ldr	r3, [pc, #708]	; (8002290 <main+0x354>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4ab0      	ldr	r2, [pc, #704]	; (8002290 <main+0x354>)
 8001fce:	f043 030c 	orr.w	r3, r3, #12
 8001fd2:	60d3      	str	r3, [r2, #12]
	LL_USART_EnableIT_RXNE(USART6);
 8001fd4:	48ae      	ldr	r0, [pc, #696]	; (8002290 <main+0x354>)
 8001fd6:	f7ff ff4e 	bl	8001e76 <LL_USART_EnableIT_RXNE>
	LL_USART_EnableIT_ERROR(USART6);
 8001fda:	48ad      	ldr	r0, [pc, #692]	; (8002290 <main+0x354>)
 8001fdc:	f7ff ff6e 	bl	8001ebc <LL_USART_EnableIT_ERROR>

	LL_GPIO_ResetOutputPin(RE_DE_GPIO_Port, RE_DE_Pin); // Set MAX485 to Rx mode
 8001fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe4:	48a7      	ldr	r0, [pc, #668]	; (8002284 <main+0x348>)
 8001fe6:	f7ff ff9a 	bl	8001f1e <LL_GPIO_ResetOutputPin>

//    LL_TIM_EnableIT_UPDATE(TIM2); // Start timer 2 for interruption each 35 ms for buzzers
//    LL_TIM_EnableCounter(TIM2);   // Start timer 2

	// Load calibration values from flash
	uint8_t init_load_calibration_error = init_load_calibration_values(); // if 1 == some problems
 8001fea:	f7ff f837 	bl	800105c <init_load_calibration_values>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	75fb      	strb	r3, [r7, #23]
	uint32_t error = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
	uint32_t error_zero_dof_6 = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
	uint32_t error_zero_dof_7 = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
	uint32_t error_zero_dof_8 = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	607b      	str	r3, [r7, #4]
	uint32_t stop_motor_counter = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	61fb      	str	r3, [r7, #28]

	//	uint8_t count_write_flash = sizeof(my_array) / sizeof(my_array[0]);
	//	uint32_t error = flash_write_words(FLASH_SECTOR_6, ADDR_FLASH_SECTOR_6, CCW_limits_uint32_flash, count_write_flash);
	//	uint32_t error = flash_write_words(FLASH_SECTOR_6, ADDR_FLASH_SECTOR_6, CW_limits_uint32_flash, count_write_flash);
	LL_GPIO_SetOutputPin(Sense_Lvl_1_GPIO_Port, Sense_Lvl_1_Pin);
 8002006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200a:	48a0      	ldr	r0, [pc, #640]	; (800228c <main+0x350>)
 800200c:	f7ff ff79 	bl	8001f02 <LL_GPIO_SetOutputPin>
	start_melody();
 8002010:	f7ff fa92 	bl	8001538 <start_melody>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LL_mDelay(1);
 8002014:	2001      	movs	r0, #1
 8002016:	f006 fb9b 	bl	8008750 <LL_mDelay>
//	  USB_Rx_buffer[0]='c'; // Command to calibration
//	  USB_Rx_buffer[1]='l'; // Left arm choice
//	  USB_Rx_buffer[2]='6'; // DoF mode
//	  USB_Rx_buffer[3]='1'; // DoF to calibrate
//	  USB_Rx_buffer[4]='0'; // Min Max choice
	  switch(USB_Rx_buffer[0])
 800201a:	4b9e      	ldr	r3, [pc, #632]	; (8002294 <main+0x358>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	3b63      	subs	r3, #99	; 0x63
 8002020:	2b15      	cmp	r3, #21
 8002022:	f200 8300 	bhi.w	8002626 <main+0x6ea>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <main+0xf0>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	08002085 	.word	0x08002085
 8002030:	08002627 	.word	0x08002627
 8002034:	080025d1 	.word	0x080025d1
 8002038:	08002627 	.word	0x08002627
 800203c:	08002627 	.word	0x08002627
 8002040:	08002627 	.word	0x08002627
 8002044:	08002627 	.word	0x08002627
 8002048:	08002627 	.word	0x08002627
 800204c:	08002627 	.word	0x08002627
 8002050:	08002627 	.word	0x08002627
 8002054:	08002627 	.word	0x08002627
 8002058:	08002627 	.word	0x08002627
 800205c:	08002627 	.word	0x08002627
 8002060:	08002627 	.word	0x08002627
 8002064:	08002627 	.word	0x08002627
 8002068:	080024a7 	.word	0x080024a7
 800206c:	0800261b 	.word	0x0800261b
 8002070:	08002627 	.word	0x08002627
 8002074:	08002627 	.word	0x08002627
 8002078:	08002627 	.word	0x08002627
 800207c:	08002627 	.word	0x08002627
 8002080:	080025e7 	.word	0x080025e7
		  {
	  	  	 case 'c': // command to calibration
	  	  		 switch(USB_Rx_buffer[1])
 8002084:	4b83      	ldr	r3, [pc, #524]	; (8002294 <main+0x358>)
 8002086:	785b      	ldrb	r3, [r3, #1]
 8002088:	2b6c      	cmp	r3, #108	; 0x6c
 800208a:	d003      	beq.n	8002094 <main+0x158>
 800208c:	2b72      	cmp	r3, #114	; 0x72
 800208e:	f000 8107 	beq.w	80022a0 <main+0x364>
 8002092:	e203      	b.n	800249c <main+0x560>
	  	  		 {
	  	  		 	 case 'l': // left arm choice
	  	  		 		 switch(USB_Rx_buffer[2])
 8002094:	4b7f      	ldr	r3, [pc, #508]	; (8002294 <main+0x358>)
 8002096:	789b      	ldrb	r3, [r3, #2]
 8002098:	2b38      	cmp	r3, #56	; 0x38
 800209a:	f000 809f 	beq.w	80021dc <main+0x2a0>
 800209e:	2b38      	cmp	r3, #56	; 0x38
 80020a0:	f300 81f9 	bgt.w	8002496 <main+0x55a>
 80020a4:	2b36      	cmp	r3, #54	; 0x36
 80020a6:	d002      	beq.n	80020ae <main+0x172>
 80020a8:	2b37      	cmp	r3, #55	; 0x37
 80020aa:	d048      	beq.n	800213e <main+0x202>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 8);
	  		  	  		 		 	 break;
	  		  	  		 		 }
	  	  		 		 		 break;
	  	  		 		 }
	  	  		 		 break;
 80020ac:	e1f3      	b.n	8002496 <main+0x55a>
								 switch(USB_Rx_buffer[3])
 80020ae:	4b79      	ldr	r3, [pc, #484]	; (8002294 <main+0x358>)
 80020b0:	78db      	ldrb	r3, [r3, #3]
 80020b2:	3b31      	subs	r3, #49	; 0x31
 80020b4:	2b05      	cmp	r3, #5
 80020b6:	f200 80e2 	bhi.w	800227e <main+0x342>
 80020ba:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <main+0x184>)
 80020bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c0:	080020d9 	.word	0x080020d9
 80020c4:	080020e7 	.word	0x080020e7
 80020c8:	080020f5 	.word	0x080020f5
 80020cc:	08002103 	.word	0x08002103
 80020d0:	08002111 	.word	0x08002111
 80020d4:	0800211f 	.word	0x0800211f
										 process_calibration(USB_Rx_buffer[4], 1);
 80020d8:	4b6e      	ldr	r3, [pc, #440]	; (8002294 <main+0x358>)
 80020da:	791b      	ldrb	r3, [r3, #4]
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe ff36 	bl	8000f50 <process_calibration>
									 break;
 80020e4:	e02a      	b.n	800213c <main+0x200>
										 process_calibration(USB_Rx_buffer[4], 2);
 80020e6:	4b6b      	ldr	r3, [pc, #428]	; (8002294 <main+0x358>)
 80020e8:	791b      	ldrb	r3, [r3, #4]
 80020ea:	2102      	movs	r1, #2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe ff2f 	bl	8000f50 <process_calibration>
									 break;
 80020f2:	e023      	b.n	800213c <main+0x200>
										 process_calibration(USB_Rx_buffer[4], 3);
 80020f4:	4b67      	ldr	r3, [pc, #412]	; (8002294 <main+0x358>)
 80020f6:	791b      	ldrb	r3, [r3, #4]
 80020f8:	2103      	movs	r1, #3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe ff28 	bl	8000f50 <process_calibration>
									 break;
 8002100:	e01c      	b.n	800213c <main+0x200>
										 process_calibration(USB_Rx_buffer[4], 4);
 8002102:	4b64      	ldr	r3, [pc, #400]	; (8002294 <main+0x358>)
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	2104      	movs	r1, #4
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe ff21 	bl	8000f50 <process_calibration>
									 break;
 800210e:	e015      	b.n	800213c <main+0x200>
										 process_calibration(USB_Rx_buffer[4], 5);
 8002110:	4b60      	ldr	r3, [pc, #384]	; (8002294 <main+0x358>)
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	2105      	movs	r1, #5
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ff1a 	bl	8000f50 <process_calibration>
									 break;
 800211c:	e00e      	b.n	800213c <main+0x200>
										 error_zero_dof_8 = wrote_zero_to_dof(7);
 800211e:	2007      	movs	r0, #7
 8002120:	f7fe ff56 	bl	8000fd0 <wrote_zero_to_dof>
 8002124:	6078      	str	r0, [r7, #4]
										 error_zero_dof_8 = wrote_zero_to_dof(8);
 8002126:	2008      	movs	r0, #8
 8002128:	f7fe ff52 	bl	8000fd0 <wrote_zero_to_dof>
 800212c:	6078      	str	r0, [r7, #4]
										 process_calibration(USB_Rx_buffer[4], 6);
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <main+0x358>)
 8002130:	791b      	ldrb	r3, [r3, #4]
 8002132:	2106      	movs	r1, #6
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe ff0b 	bl	8000f50 <process_calibration>
									 break;
 800213a:	bf00      	nop
								 break;
 800213c:	e09f      	b.n	800227e <main+0x342>
	  		  	  		 		 switch(USB_Rx_buffer[3])
 800213e:	4b55      	ldr	r3, [pc, #340]	; (8002294 <main+0x358>)
 8002140:	78db      	ldrb	r3, [r3, #3]
 8002142:	3b31      	subs	r3, #49	; 0x31
 8002144:	2b07      	cmp	r3, #7
 8002146:	f200 80a7 	bhi.w	8002298 <main+0x35c>
 800214a:	a201      	add	r2, pc, #4	; (adr r2, 8002150 <main+0x214>)
 800214c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002150:	08002171 	.word	0x08002171
 8002154:	0800217f 	.word	0x0800217f
 8002158:	0800218d 	.word	0x0800218d
 800215c:	0800219b 	.word	0x0800219b
 8002160:	080021a9 	.word	0x080021a9
 8002164:	080021b7 	.word	0x080021b7
 8002168:	08002299 	.word	0x08002299
 800216c:	080021c5 	.word	0x080021c5
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 1);
 8002170:	4b48      	ldr	r3, [pc, #288]	; (8002294 <main+0x358>)
 8002172:	791b      	ldrb	r3, [r3, #4]
 8002174:	2101      	movs	r1, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe feea 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 800217c:	e02d      	b.n	80021da <main+0x29e>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 2);
 800217e:	4b45      	ldr	r3, [pc, #276]	; (8002294 <main+0x358>)
 8002180:	791b      	ldrb	r3, [r3, #4]
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe fee3 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 800218a:	e026      	b.n	80021da <main+0x29e>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 3);
 800218c:	4b41      	ldr	r3, [pc, #260]	; (8002294 <main+0x358>)
 800218e:	791b      	ldrb	r3, [r3, #4]
 8002190:	2103      	movs	r1, #3
 8002192:	4618      	mov	r0, r3
 8002194:	f7fe fedc 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 8002198:	e01f      	b.n	80021da <main+0x29e>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 4);
 800219a:	4b3e      	ldr	r3, [pc, #248]	; (8002294 <main+0x358>)
 800219c:	791b      	ldrb	r3, [r3, #4]
 800219e:	2104      	movs	r1, #4
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fed5 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 80021a6:	e018      	b.n	80021da <main+0x29e>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 5);
 80021a8:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <main+0x358>)
 80021aa:	791b      	ldrb	r3, [r3, #4]
 80021ac:	2105      	movs	r1, #5
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fece 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 80021b4:	e011      	b.n	80021da <main+0x29e>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 6);
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <main+0x358>)
 80021b8:	791b      	ldrb	r3, [r3, #4]
 80021ba:	2106      	movs	r1, #6
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fec7 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 80021c2:	e00a      	b.n	80021da <main+0x29e>
	  		  	  		 		 		 error_zero_dof_7 = wrote_zero_to_dof(7);
 80021c4:	2007      	movs	r0, #7
 80021c6:	f7fe ff03 	bl	8000fd0 <wrote_zero_to_dof>
 80021ca:	60b8      	str	r0, [r7, #8]
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 8);
 80021cc:	4b31      	ldr	r3, [pc, #196]	; (8002294 <main+0x358>)
 80021ce:	791b      	ldrb	r3, [r3, #4]
 80021d0:	2108      	movs	r1, #8
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7fe febc 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 80021d8:	bf00      	nop
	  	  		 		 		 break;
 80021da:	e05d      	b.n	8002298 <main+0x35c>
	  		  	  		 		 switch(USB_Rx_buffer[3])
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <main+0x358>)
 80021de:	78db      	ldrb	r3, [r3, #3]
 80021e0:	3b31      	subs	r3, #49	; 0x31
 80021e2:	2b07      	cmp	r3, #7
 80021e4:	d85a      	bhi.n	800229c <main+0x360>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <main+0x2b0>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	0800220d 	.word	0x0800220d
 80021f0:	0800221b 	.word	0x0800221b
 80021f4:	08002229 	.word	0x08002229
 80021f8:	08002237 	.word	0x08002237
 80021fc:	08002245 	.word	0x08002245
 8002200:	08002253 	.word	0x08002253
 8002204:	08002261 	.word	0x08002261
 8002208:	0800226f 	.word	0x0800226f
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 1);
 800220c:	4b21      	ldr	r3, [pc, #132]	; (8002294 <main+0x358>)
 800220e:	791b      	ldrb	r3, [r3, #4]
 8002210:	2101      	movs	r1, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f7fe fe9c 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 8002218:	e030      	b.n	800227c <main+0x340>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 2);
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <main+0x358>)
 800221c:	791b      	ldrb	r3, [r3, #4]
 800221e:	2102      	movs	r1, #2
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe fe95 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 8002226:	e029      	b.n	800227c <main+0x340>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 3);
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <main+0x358>)
 800222a:	791b      	ldrb	r3, [r3, #4]
 800222c:	2103      	movs	r1, #3
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fe8e 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 8002234:	e022      	b.n	800227c <main+0x340>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 4);
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <main+0x358>)
 8002238:	791b      	ldrb	r3, [r3, #4]
 800223a:	2104      	movs	r1, #4
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fe87 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 8002242:	e01b      	b.n	800227c <main+0x340>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 5);
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <main+0x358>)
 8002246:	791b      	ldrb	r3, [r3, #4]
 8002248:	2105      	movs	r1, #5
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe fe80 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 8002250:	e014      	b.n	800227c <main+0x340>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 6);
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <main+0x358>)
 8002254:	791b      	ldrb	r3, [r3, #4]
 8002256:	2106      	movs	r1, #6
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe fe79 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 800225e:	e00d      	b.n	800227c <main+0x340>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 7);
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <main+0x358>)
 8002262:	791b      	ldrb	r3, [r3, #4]
 8002264:	2107      	movs	r1, #7
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe fe72 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 800226c:	e006      	b.n	800227c <main+0x340>
	  		  	  		 		 		 process_calibration(USB_Rx_buffer[4], 8);
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <main+0x358>)
 8002270:	791b      	ldrb	r3, [r3, #4]
 8002272:	2108      	movs	r1, #8
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fe6b 	bl	8000f50 <process_calibration>
	  		  	  		 		 	 break;
 800227a:	bf00      	nop
	  	  		 		 		 break;
 800227c:	e00e      	b.n	800229c <main+0x360>
								 break;
 800227e:	bf00      	nop
 8002280:	e109      	b.n	8002496 <main+0x55a>
 8002282:	bf00      	nop
 8002284:	40020800 	.word	0x40020800
 8002288:	40000400 	.word	0x40000400
 800228c:	40020400 	.word	0x40020400
 8002290:	40011400 	.word	0x40011400
 8002294:	20000dcc 	.word	0x20000dcc
	  	  		 		 		 break;
 8002298:	bf00      	nop
 800229a:	e0fc      	b.n	8002496 <main+0x55a>
	  	  		 		 		 break;
 800229c:	bf00      	nop
	  	  		 		 break;
 800229e:	e0fa      	b.n	8002496 <main+0x55a>


	  	  		 	 case 'r': // Right arm choice  9-16 == 1-8 DoF
	  	  		 		 switch(USB_Rx_buffer[2])
 80022a0:	4bb1      	ldr	r3, [pc, #708]	; (8002568 <main+0x62c>)
 80022a2:	789b      	ldrb	r3, [r3, #2]
 80022a4:	2b38      	cmp	r3, #56	; 0x38
 80022a6:	f000 809f 	beq.w	80023e8 <main+0x4ac>
 80022aa:	2b38      	cmp	r3, #56	; 0x38
 80022ac:	f300 80f5 	bgt.w	800249a <main+0x55e>
 80022b0:	2b36      	cmp	r3, #54	; 0x36
 80022b2:	d002      	beq.n	80022ba <main+0x37e>
 80022b4:	2b37      	cmp	r3, #55	; 0x37
 80022b6:	d048      	beq.n	800234a <main+0x40e>
	  									process_calibration(USB_Rx_buffer[4], 16);
	  								 break;
	  		  	  		 		 }
	  	  		 		 		 break;
	  	  		 		 }
	  	  		 		 break;
 80022b8:	e0ef      	b.n	800249a <main+0x55e>
								 switch(USB_Rx_buffer[3])
 80022ba:	4bab      	ldr	r3, [pc, #684]	; (8002568 <main+0x62c>)
 80022bc:	78db      	ldrb	r3, [r3, #3]
 80022be:	3b31      	subs	r3, #49	; 0x31
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	f200 80e2 	bhi.w	800248a <main+0x54e>
 80022c6:	a201      	add	r2, pc, #4	; (adr r2, 80022cc <main+0x390>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	080022e5 	.word	0x080022e5
 80022d0:	080022f3 	.word	0x080022f3
 80022d4:	08002301 	.word	0x08002301
 80022d8:	0800230f 	.word	0x0800230f
 80022dc:	0800231d 	.word	0x0800231d
 80022e0:	0800232b 	.word	0x0800232b
										 process_calibration(USB_Rx_buffer[4], 9);
 80022e4:	4ba0      	ldr	r3, [pc, #640]	; (8002568 <main+0x62c>)
 80022e6:	791b      	ldrb	r3, [r3, #4]
 80022e8:	2109      	movs	r1, #9
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fe30 	bl	8000f50 <process_calibration>
									 break;
 80022f0:	e02a      	b.n	8002348 <main+0x40c>
										 process_calibration(USB_Rx_buffer[4], 10);
 80022f2:	4b9d      	ldr	r3, [pc, #628]	; (8002568 <main+0x62c>)
 80022f4:	791b      	ldrb	r3, [r3, #4]
 80022f6:	210a      	movs	r1, #10
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fe29 	bl	8000f50 <process_calibration>
									 break;
 80022fe:	e023      	b.n	8002348 <main+0x40c>
										 process_calibration(USB_Rx_buffer[4], 11);
 8002300:	4b99      	ldr	r3, [pc, #612]	; (8002568 <main+0x62c>)
 8002302:	791b      	ldrb	r3, [r3, #4]
 8002304:	210b      	movs	r1, #11
 8002306:	4618      	mov	r0, r3
 8002308:	f7fe fe22 	bl	8000f50 <process_calibration>
									 break;
 800230c:	e01c      	b.n	8002348 <main+0x40c>
										 process_calibration(USB_Rx_buffer[4], 12);
 800230e:	4b96      	ldr	r3, [pc, #600]	; (8002568 <main+0x62c>)
 8002310:	791b      	ldrb	r3, [r3, #4]
 8002312:	210c      	movs	r1, #12
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fe1b 	bl	8000f50 <process_calibration>
									 break;
 800231a:	e015      	b.n	8002348 <main+0x40c>
										 process_calibration(USB_Rx_buffer[4], 13);
 800231c:	4b92      	ldr	r3, [pc, #584]	; (8002568 <main+0x62c>)
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	210d      	movs	r1, #13
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fe14 	bl	8000f50 <process_calibration>
									 break;
 8002328:	e00e      	b.n	8002348 <main+0x40c>
										 error_zero_dof_7 = wrote_zero_to_dof(15);
 800232a:	200f      	movs	r0, #15
 800232c:	f7fe fe50 	bl	8000fd0 <wrote_zero_to_dof>
 8002330:	60b8      	str	r0, [r7, #8]
										 error_zero_dof_7 = wrote_zero_to_dof(16);
 8002332:	2010      	movs	r0, #16
 8002334:	f7fe fe4c 	bl	8000fd0 <wrote_zero_to_dof>
 8002338:	60b8      	str	r0, [r7, #8]
										 process_calibration(USB_Rx_buffer[4], 14);
 800233a:	4b8b      	ldr	r3, [pc, #556]	; (8002568 <main+0x62c>)
 800233c:	791b      	ldrb	r3, [r3, #4]
 800233e:	210e      	movs	r1, #14
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fe05 	bl	8000f50 <process_calibration>
									 break;
 8002346:	bf00      	nop
								 break;
 8002348:	e09f      	b.n	800248a <main+0x54e>
	  		  	  		 		 switch(USB_Rx_buffer[3])
 800234a:	4b87      	ldr	r3, [pc, #540]	; (8002568 <main+0x62c>)
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	3b31      	subs	r3, #49	; 0x31
 8002350:	2b07      	cmp	r3, #7
 8002352:	f200 809c 	bhi.w	800248e <main+0x552>
 8002356:	a201      	add	r2, pc, #4	; (adr r2, 800235c <main+0x420>)
 8002358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235c:	0800237d 	.word	0x0800237d
 8002360:	0800238b 	.word	0x0800238b
 8002364:	08002399 	.word	0x08002399
 8002368:	080023a7 	.word	0x080023a7
 800236c:	080023b5 	.word	0x080023b5
 8002370:	080023c3 	.word	0x080023c3
 8002374:	0800248f 	.word	0x0800248f
 8002378:	080023d1 	.word	0x080023d1
	  									process_calibration(USB_Rx_buffer[4], 9);
 800237c:	4b7a      	ldr	r3, [pc, #488]	; (8002568 <main+0x62c>)
 800237e:	791b      	ldrb	r3, [r3, #4]
 8002380:	2109      	movs	r1, #9
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe fde4 	bl	8000f50 <process_calibration>
	  								 break;
 8002388:	e02d      	b.n	80023e6 <main+0x4aa>
	  									process_calibration(USB_Rx_buffer[4], 10);
 800238a:	4b77      	ldr	r3, [pc, #476]	; (8002568 <main+0x62c>)
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	210a      	movs	r1, #10
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fddd 	bl	8000f50 <process_calibration>
	  								 break;
 8002396:	e026      	b.n	80023e6 <main+0x4aa>
	  									process_calibration(USB_Rx_buffer[4], 11);
 8002398:	4b73      	ldr	r3, [pc, #460]	; (8002568 <main+0x62c>)
 800239a:	791b      	ldrb	r3, [r3, #4]
 800239c:	210b      	movs	r1, #11
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fdd6 	bl	8000f50 <process_calibration>
	  								 break;
 80023a4:	e01f      	b.n	80023e6 <main+0x4aa>
	  									process_calibration(USB_Rx_buffer[4], 12);
 80023a6:	4b70      	ldr	r3, [pc, #448]	; (8002568 <main+0x62c>)
 80023a8:	791b      	ldrb	r3, [r3, #4]
 80023aa:	210c      	movs	r1, #12
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fdcf 	bl	8000f50 <process_calibration>
	  								 break;
 80023b2:	e018      	b.n	80023e6 <main+0x4aa>
	  									process_calibration(USB_Rx_buffer[4], 13);
 80023b4:	4b6c      	ldr	r3, [pc, #432]	; (8002568 <main+0x62c>)
 80023b6:	791b      	ldrb	r3, [r3, #4]
 80023b8:	210d      	movs	r1, #13
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe fdc8 	bl	8000f50 <process_calibration>
	  								 break;
 80023c0:	e011      	b.n	80023e6 <main+0x4aa>
	  									process_calibration(USB_Rx_buffer[4], 14);
 80023c2:	4b69      	ldr	r3, [pc, #420]	; (8002568 <main+0x62c>)
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	210e      	movs	r1, #14
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe fdc1 	bl	8000f50 <process_calibration>
	  								 break;
 80023ce:	e00a      	b.n	80023e6 <main+0x4aa>
	  									error_zero_dof_7 = wrote_zero_to_dof(15);
 80023d0:	200f      	movs	r0, #15
 80023d2:	f7fe fdfd 	bl	8000fd0 <wrote_zero_to_dof>
 80023d6:	60b8      	str	r0, [r7, #8]
	  									process_calibration(USB_Rx_buffer[4], 16);
 80023d8:	4b63      	ldr	r3, [pc, #396]	; (8002568 <main+0x62c>)
 80023da:	791b      	ldrb	r3, [r3, #4]
 80023dc:	2110      	movs	r1, #16
 80023de:	4618      	mov	r0, r3
 80023e0:	f7fe fdb6 	bl	8000f50 <process_calibration>
	  								 break;
 80023e4:	bf00      	nop
	  	  		 		 		 break;
 80023e6:	e052      	b.n	800248e <main+0x552>
	  		  	  		 		 switch(USB_Rx_buffer[3])
 80023e8:	4b5f      	ldr	r3, [pc, #380]	; (8002568 <main+0x62c>)
 80023ea:	78db      	ldrb	r3, [r3, #3]
 80023ec:	3b31      	subs	r3, #49	; 0x31
 80023ee:	2b07      	cmp	r3, #7
 80023f0:	d84f      	bhi.n	8002492 <main+0x556>
 80023f2:	a201      	add	r2, pc, #4	; (adr r2, 80023f8 <main+0x4bc>)
 80023f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f8:	08002419 	.word	0x08002419
 80023fc:	08002427 	.word	0x08002427
 8002400:	08002435 	.word	0x08002435
 8002404:	08002443 	.word	0x08002443
 8002408:	08002451 	.word	0x08002451
 800240c:	0800245f 	.word	0x0800245f
 8002410:	0800246d 	.word	0x0800246d
 8002414:	0800247b 	.word	0x0800247b
	  									process_calibration(USB_Rx_buffer[4], 9);
 8002418:	4b53      	ldr	r3, [pc, #332]	; (8002568 <main+0x62c>)
 800241a:	791b      	ldrb	r3, [r3, #4]
 800241c:	2109      	movs	r1, #9
 800241e:	4618      	mov	r0, r3
 8002420:	f7fe fd96 	bl	8000f50 <process_calibration>
	  								 break;
 8002424:	e030      	b.n	8002488 <main+0x54c>
	  									process_calibration(USB_Rx_buffer[4], 10);
 8002426:	4b50      	ldr	r3, [pc, #320]	; (8002568 <main+0x62c>)
 8002428:	791b      	ldrb	r3, [r3, #4]
 800242a:	210a      	movs	r1, #10
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fd8f 	bl	8000f50 <process_calibration>
	  								 break;
 8002432:	e029      	b.n	8002488 <main+0x54c>
	  									process_calibration(USB_Rx_buffer[4], 11);
 8002434:	4b4c      	ldr	r3, [pc, #304]	; (8002568 <main+0x62c>)
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	210b      	movs	r1, #11
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fd88 	bl	8000f50 <process_calibration>
	  								 break;
 8002440:	e022      	b.n	8002488 <main+0x54c>
	  									process_calibration(USB_Rx_buffer[4], 12);
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <main+0x62c>)
 8002444:	791b      	ldrb	r3, [r3, #4]
 8002446:	210c      	movs	r1, #12
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fd81 	bl	8000f50 <process_calibration>
	  								 break;
 800244e:	e01b      	b.n	8002488 <main+0x54c>
	  									process_calibration(USB_Rx_buffer[4], 13);
 8002450:	4b45      	ldr	r3, [pc, #276]	; (8002568 <main+0x62c>)
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	210d      	movs	r1, #13
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fd7a 	bl	8000f50 <process_calibration>
	  								 break;
 800245c:	e014      	b.n	8002488 <main+0x54c>
	  									process_calibration(USB_Rx_buffer[4], 14);
 800245e:	4b42      	ldr	r3, [pc, #264]	; (8002568 <main+0x62c>)
 8002460:	791b      	ldrb	r3, [r3, #4]
 8002462:	210e      	movs	r1, #14
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fd73 	bl	8000f50 <process_calibration>
	  								 break;
 800246a:	e00d      	b.n	8002488 <main+0x54c>
	  									process_calibration(USB_Rx_buffer[4], 15);
 800246c:	4b3e      	ldr	r3, [pc, #248]	; (8002568 <main+0x62c>)
 800246e:	791b      	ldrb	r3, [r3, #4]
 8002470:	210f      	movs	r1, #15
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fd6c 	bl	8000f50 <process_calibration>
	  								 break;
 8002478:	e006      	b.n	8002488 <main+0x54c>
	  									process_calibration(USB_Rx_buffer[4], 16);
 800247a:	4b3b      	ldr	r3, [pc, #236]	; (8002568 <main+0x62c>)
 800247c:	791b      	ldrb	r3, [r3, #4]
 800247e:	2110      	movs	r1, #16
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe fd65 	bl	8000f50 <process_calibration>
	  								 break;
 8002486:	bf00      	nop
	  	  		 		 		 break;
 8002488:	e003      	b.n	8002492 <main+0x556>
								 break;
 800248a:	bf00      	nop
 800248c:	e005      	b.n	800249a <main+0x55e>
	  	  		 		 		 break;
 800248e:	bf00      	nop
 8002490:	e003      	b.n	800249a <main+0x55e>
	  	  		 		 		 break;
 8002492:	bf00      	nop
	  	  		 		 break;
 8002494:	e001      	b.n	800249a <main+0x55e>
	  	  		 		 break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <main+0x560>
	  	  		 		 break;
 800249a:	bf00      	nop
	  	  		 }
				 clearBufferAndCounter();
 800249c:	f7fe faf0 	bl	8000a80 <clearBufferAndCounter>
				 clearUsbBuffers();
 80024a0:	f7fe fadc 	bl	8000a5c <clearUsbBuffers>
				 break;
 80024a4:	e0d2      	b.n	800264c <main+0x710>

			 case 'r':
	  		 		 switch(USB_Rx_buffer[1])
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <main+0x62c>)
 80024a8:	785b      	ldrb	r3, [r3, #1]
 80024aa:	2b31      	cmp	r3, #49	; 0x31
 80024ac:	d002      	beq.n	80024b4 <main+0x578>
 80024ae:	2b32      	cmp	r3, #50	; 0x32
 80024b0:	d06c      	beq.n	800258c <main+0x650>
 80024b2:	e088      	b.n	80025c6 <main+0x68a>
	  		 		 {
						 case '1':
							 // Function with communication with force sensor pcb
							 if (readForseSensor() == 1)
 80024b4:	f7fe fa6a 	bl	800098c <readForseSensor>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d125      	bne.n	800250a <main+0x5ce>
							 {
								 stop_motor_counter=0;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
								 set_new_force();
 80024c2:	f7fe fb03 	bl	8000acc <set_new_force>
								 readADCchannels();
 80024c6:	f7fe fbab 	bl	8000c20 <readADCchannels>
								 is_min_max_calibrated();
 80024ca:	f7fe fbd5 	bl	8000c78 <is_min_max_calibrated>
								 calibration_ADC_values();
 80024ce:	f7fe fc07 	bl	8000ce0 <calibration_ADC_values>
								 memcpy(USB_Tx_buffer + 0, (uint8_t*)(&adcBuffer), sizeof(adcBuffer));
 80024d2:	2220      	movs	r2, #32
 80024d4:	4925      	ldr	r1, [pc, #148]	; (800256c <main+0x630>)
 80024d6:	4826      	ldr	r0, [pc, #152]	; (8002570 <main+0x634>)
 80024d8:	f008 fe80 	bl	800b1dc <memcpy>
								 memcpy(USB_Tx_buffer + sizeof(adcBuffer), (uint8_t*)(&force_sensor_4_value), sizeof(force_sensor_4_value));
 80024dc:	4b25      	ldr	r3, [pc, #148]	; (8002574 <main+0x638>)
 80024de:	2208      	movs	r2, #8
 80024e0:	4925      	ldr	r1, [pc, #148]	; (8002578 <main+0x63c>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f008 fe7a 	bl	800b1dc <memcpy>
								 memcpy(USB_Tx_buffer + sizeof(adcBuffer) + sizeof(force_sensor_4_value), (uint8_t*)(&start_dataset_collection_flag), sizeof(start_dataset_collection_flag));
 80024e8:	4b24      	ldr	r3, [pc, #144]	; (800257c <main+0x640>)
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <main+0x644>)
 80024ec:	7812      	ldrb	r2, [r2, #0]
 80024ee:	701a      	strb	r2, [r3, #0]
								 memcpy(USB_Tx_buffer + sizeof(adcBuffer) + sizeof(force_sensor_4_value) + sizeof(start_dataset_collection_flag), (uint8_t*)(&sense_flag), sizeof(sense_flag));
 80024f0:	4b24      	ldr	r3, [pc, #144]	; (8002584 <main+0x648>)
 80024f2:	4a25      	ldr	r2, [pc, #148]	; (8002588 <main+0x64c>)
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	701a      	strb	r2, [r3, #0]
								 while (CDC_Transmit_FS(USB_Tx_buffer, sizeof(adcBuffer) + sizeof(force_sensor_4_value) + sizeof(start_dataset_collection_flag) + sizeof(sense_flag)) == USBD_BUSY)
 80024f8:	bf00      	nop
 80024fa:	212a      	movs	r1, #42	; 0x2a
 80024fc:	481c      	ldr	r0, [pc, #112]	; (8002570 <main+0x634>)
 80024fe:	f008 f9ed 	bl	800a8dc <CDC_Transmit_FS>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d0f8      	beq.n	80024fa <main+0x5be>
									 memcpy(USB_Tx_buffer + sizeof(adcBuffer) + sizeof(force_sensor_4_value) + sizeof(start_dataset_collection_flag), (uint8_t*)(&sense_flag), sizeof(sense_flag));
									 while (CDC_Transmit_FS(USB_Tx_buffer, sizeof(adcBuffer) + sizeof(force_sensor_4_value) + sizeof(start_dataset_collection_flag) + sizeof(sense_flag)) == USBD_BUSY)
										 ; // Wait for end of transmission
								 }
							 }
							 break;
 8002508:	e05c      	b.n	80025c4 <main+0x688>
								 LL_mDelay(1);
 800250a:	2001      	movs	r0, #1
 800250c:	f006 f920 	bl	8008750 <LL_mDelay>
								 if (readForseSensor() == 1)
 8002510:	f7fe fa3c 	bl	800098c <readForseSensor>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d154      	bne.n	80025c4 <main+0x688>
									 stop_motor_counter=0;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
									 set_new_force();
 800251e:	f7fe fad5 	bl	8000acc <set_new_force>
									 readADCchannels();
 8002522:	f7fe fb7d 	bl	8000c20 <readADCchannels>
									 is_min_max_calibrated();
 8002526:	f7fe fba7 	bl	8000c78 <is_min_max_calibrated>
									 calibration_ADC_values();
 800252a:	f7fe fbd9 	bl	8000ce0 <calibration_ADC_values>
									 memcpy(USB_Tx_buffer + 0, (uint8_t*)(&adcBuffer), sizeof(adcBuffer));
 800252e:	2220      	movs	r2, #32
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <main+0x630>)
 8002532:	480f      	ldr	r0, [pc, #60]	; (8002570 <main+0x634>)
 8002534:	f008 fe52 	bl	800b1dc <memcpy>
									 memcpy(USB_Tx_buffer + sizeof(adcBuffer), (uint8_t*)(&force_sensor_4_value), sizeof(force_sensor_4_value));
 8002538:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <main+0x638>)
 800253a:	2208      	movs	r2, #8
 800253c:	490e      	ldr	r1, [pc, #56]	; (8002578 <main+0x63c>)
 800253e:	4618      	mov	r0, r3
 8002540:	f008 fe4c 	bl	800b1dc <memcpy>
									 memcpy(USB_Tx_buffer + sizeof(adcBuffer) + sizeof(force_sensor_4_value), (uint8_t*)(&start_dataset_collection_flag), sizeof(start_dataset_collection_flag));
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <main+0x640>)
 8002546:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <main+0x644>)
 8002548:	7812      	ldrb	r2, [r2, #0]
 800254a:	701a      	strb	r2, [r3, #0]
									 memcpy(USB_Tx_buffer + sizeof(adcBuffer) + sizeof(force_sensor_4_value) + sizeof(start_dataset_collection_flag), (uint8_t*)(&sense_flag), sizeof(sense_flag));
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <main+0x648>)
 800254e:	4a0e      	ldr	r2, [pc, #56]	; (8002588 <main+0x64c>)
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	701a      	strb	r2, [r3, #0]
									 while (CDC_Transmit_FS(USB_Tx_buffer, sizeof(adcBuffer) + sizeof(force_sensor_4_value) + sizeof(start_dataset_collection_flag) + sizeof(sense_flag)) == USBD_BUSY)
 8002554:	bf00      	nop
 8002556:	212a      	movs	r1, #42	; 0x2a
 8002558:	4805      	ldr	r0, [pc, #20]	; (8002570 <main+0x634>)
 800255a:	f008 f9bf 	bl	800a8dc <CDC_Transmit_FS>
 800255e:	4603      	mov	r3, r0
 8002560:	2b01      	cmp	r3, #1
 8002562:	d0f8      	beq.n	8002556 <main+0x61a>
							 break;
 8002564:	e02e      	b.n	80025c4 <main+0x688>
 8002566:	bf00      	nop
 8002568:	20000dcc 	.word	0x20000dcc
 800256c:	2000026c 	.word	0x2000026c
 8002570:	20000294 	.word	0x20000294
 8002574:	200002b4 	.word	0x200002b4
 8002578:	2000028c 	.word	0x2000028c
 800257c:	200002bc 	.word	0x200002bc
 8002580:	20000178 	.word	0x20000178
 8002584:	200002bd 	.word	0x200002bd
 8002588:	20000179 	.word	0x20000179

						 case '2':
							 readADCchannels();
 800258c:	f7fe fb48 	bl	8000c20 <readADCchannels>
							 is_min_max_calibrated();
 8002590:	f7fe fb72 	bl	8000c78 <is_min_max_calibrated>
							 calibration_ADC_values();
 8002594:	f7fe fba4 	bl	8000ce0 <calibration_ADC_values>
							 memcpy(USB_Tx_buffer + 0, (uint8_t*)(&adcBuffer), sizeof(adcBuffer));
 8002598:	2220      	movs	r2, #32
 800259a:	492d      	ldr	r1, [pc, #180]	; (8002650 <main+0x714>)
 800259c:	482d      	ldr	r0, [pc, #180]	; (8002654 <main+0x718>)
 800259e:	f008 fe1d 	bl	800b1dc <memcpy>
							 memcpy(USB_Tx_buffer + sizeof(adcBuffer), (uint8_t*)(&start_dataset_collection_flag), sizeof(start_dataset_collection_flag));
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <main+0x71c>)
 80025a4:	4a2d      	ldr	r2, [pc, #180]	; (800265c <main+0x720>)
 80025a6:	7812      	ldrb	r2, [r2, #0]
 80025a8:	701a      	strb	r2, [r3, #0]
							 memcpy(USB_Tx_buffer + sizeof(adcBuffer) + sizeof(start_dataset_collection_flag), (uint8_t*)(&sense_flag), sizeof(sense_flag));
 80025aa:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <main+0x724>)
 80025ac:	4a2d      	ldr	r2, [pc, #180]	; (8002664 <main+0x728>)
 80025ae:	7812      	ldrb	r2, [r2, #0]
 80025b0:	701a      	strb	r2, [r3, #0]
							 while (CDC_Transmit_FS(USB_Tx_buffer, sizeof(adcBuffer) + sizeof(start_dataset_collection_flag) + sizeof(sense_flag)) == USBD_BUSY)
 80025b2:	bf00      	nop
 80025b4:	2122      	movs	r1, #34	; 0x22
 80025b6:	4827      	ldr	r0, [pc, #156]	; (8002654 <main+0x718>)
 80025b8:	f008 f990 	bl	800a8dc <CDC_Transmit_FS>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d0f8      	beq.n	80025b4 <main+0x678>
								 ; // Wait for end of transmission
							 break;
 80025c2:	e000      	b.n	80025c6 <main+0x68a>
							 break;
 80025c4:	bf00      	nop
	  		 		 }

				 clearBufferAndCounter();
 80025c6:	f7fe fa5b 	bl	8000a80 <clearBufferAndCounter>
				 clearUsbBuffers();
 80025ca:	f7fe fa47 	bl	8000a5c <clearUsbBuffers>
				 break;
 80025ce:	e03d      	b.n	800264c <main+0x710>

			 case 'e':
				 erase_flash(FLASH_SECTOR_6);
 80025d0:	2006      	movs	r0, #6
 80025d2:	f7fe fef1 	bl	80013b8 <erase_flash>
				 erase_flash(FLASH_SECTOR_7);
 80025d6:	2007      	movs	r0, #7
 80025d8:	f7fe feee 	bl	80013b8 <erase_flash>
				 clearBufferAndCounter();
 80025dc:	f7fe fa50 	bl	8000a80 <clearBufferAndCounter>
				 clearUsbBuffers();
 80025e0:	f7fe fa3c 	bl	8000a5c <clearUsbBuffers>
				 break;
 80025e4:	e032      	b.n	800264c <main+0x710>

			 case 'x':
				 load_calibration_values();
 80025e6:	f7fe fe59 	bl	800129c <load_calibration_values>
				 memcpy(USB_Tx_buffer + 0, (uint8_t*)(&CCW_limits), sizeof(CCW_limits));
 80025ea:	2220      	movs	r2, #32
 80025ec:	491e      	ldr	r1, [pc, #120]	; (8002668 <main+0x72c>)
 80025ee:	4819      	ldr	r0, [pc, #100]	; (8002654 <main+0x718>)
 80025f0:	f008 fdf4 	bl	800b1dc <memcpy>
				 memcpy(USB_Tx_buffer + sizeof(CW_limits), (uint8_t*)(&CW_limits), sizeof(CW_limits));
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <main+0x71c>)
 80025f6:	2220      	movs	r2, #32
 80025f8:	491c      	ldr	r1, [pc, #112]	; (800266c <main+0x730>)
 80025fa:	4618      	mov	r0, r3
 80025fc:	f008 fdee 	bl	800b1dc <memcpy>
				 while (CDC_Transmit_FS(USB_Tx_buffer, sizeof(CCW_limits) + sizeof(CW_limits)) == USBD_BUSY)
 8002600:	bf00      	nop
 8002602:	2140      	movs	r1, #64	; 0x40
 8002604:	4813      	ldr	r0, [pc, #76]	; (8002654 <main+0x718>)
 8002606:	f008 f969 	bl	800a8dc <CDC_Transmit_FS>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d0f8      	beq.n	8002602 <main+0x6c6>
					 ; // Wait for end of transmission
				 clearBufferAndCounter();
 8002610:	f7fe fa36 	bl	8000a80 <clearBufferAndCounter>
				 clearUsbBuffers();
 8002614:	f7fe fa22 	bl	8000a5c <clearUsbBuffers>
				 break;
 8002618:	e018      	b.n	800264c <main+0x710>

			 case 's':
//				 stop_motor();
				 memset(USB_Rx_buffer, 0, sizeof(USB_Rx_buffer)); // Clear USB Rx buffer
 800261a:	2240      	movs	r2, #64	; 0x40
 800261c:	2100      	movs	r1, #0
 800261e:	4814      	ldr	r0, [pc, #80]	; (8002670 <main+0x734>)
 8002620:	f008 fdea 	bl	800b1f8 <memset>
				 break;
 8002624:	e012      	b.n	800264c <main+0x710>

			 default:
				 stop_motor_counter ++;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3301      	adds	r3, #1
 800262a:	61fb      	str	r3, [r7, #28]
				 if (stop_motor_counter>=2000)
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002632:	d304      	bcc.n	800263e <main+0x702>
				 {
					 stop_motor_counter=3000;
 8002634:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002638:	61fb      	str	r3, [r7, #28]
					 stop_motor();
 800263a:	f7fe fae1 	bl	8000c00 <stop_motor>
				 }
				 information_leds_activation();
 800263e:	f7fe fe6b 	bl	8001318 <information_leds_activation>
				 clearUsbBuffers();
 8002642:	f7fe fa0b 	bl	8000a5c <clearUsbBuffers>
				 clearBufferAndCounter();
 8002646:	f7fe fa1b 	bl	8000a80 <clearBufferAndCounter>
				 continue;
 800264a:	bf00      	nop
	  LL_mDelay(1);
 800264c:	e4e2      	b.n	8002014 <main+0xd8>
 800264e:	bf00      	nop
 8002650:	2000026c 	.word	0x2000026c
 8002654:	20000294 	.word	0x20000294
 8002658:	200002b4 	.word	0x200002b4
 800265c:	20000178 	.word	0x20000178
 8002660:	200002b5 	.word	0x200002b5
 8002664:	20000179 	.word	0x20000179
 8002668:	200001bc 	.word	0x200001bc
 800266c:	2000019c 	.word	0x2000019c
 8002670:	20000dcc 	.word	0x20000dcc

08002674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8002678:	2002      	movs	r0, #2
 800267a:	f7ff fb97 	bl	8001dac <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 800267e:	bf00      	nop
 8002680:	f7ff fba8 	bl	8001dd4 <LL_FLASH_GetLatency>
 8002684:	4603      	mov	r3, r0
 8002686:	2b02      	cmp	r3, #2
 8002688:	d1fa      	bne.n	8002680 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800268a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800268e:	f7ff fbaf 	bl	8001df0 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8002692:	f7ff fa89 	bl	8001ba8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8002696:	bf00      	nop
 8002698:	f7ff fa96 	bl	8001bc8 <LL_RCC_HSE_IsReady>
 800269c:	4603      	mov	r3, r0
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d1fa      	bne.n	8002698 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLP_DIV_4);
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	22a8      	movs	r2, #168	; 0xa8
 80026a8:	2108      	movs	r1, #8
 80026aa:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80026ae:	f7ff fb37 	bl	8001d20 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_8, 168, LL_RCC_PLLQ_DIV_7);
 80026b2:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80026b6:	22a8      	movs	r2, #168	; 0xa8
 80026b8:	2108      	movs	r1, #8
 80026ba:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80026be:	f7ff fb55 	bl	8001d6c <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 80026c2:	f7ff fb09 	bl	8001cd8 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80026c6:	bf00      	nop
 80026c8:	f7ff fb16 	bl	8001cf8 <LL_RCC_PLL_IsReady>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d1fa      	bne.n	80026c8 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7ff faae 	bl	8001c34 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80026d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80026dc:	f7ff fabe 	bl	8001c5c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7ff facf 	bl	8001c84 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80026e6:	2002      	movs	r0, #2
 80026e8:	f7ff fa82 	bl	8001bf0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80026ec:	bf00      	nop
 80026ee:	f7ff fa93 	bl	8001c18 <LL_RCC_GetSysClkSource>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d1fa      	bne.n	80026ee <SystemClock_Config+0x7a>
  {

  }
  LL_SetSystemCoreClock(84000000);
 80026f8:	4807      	ldr	r0, [pc, #28]	; (8002718 <SystemClock_Config+0xa4>)
 80026fa:	f006 f84f 	bl	800879c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80026fe:	200f      	movs	r0, #15
 8002700:	f000 fdd4 	bl	80032ac <HAL_InitTick>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800270a:	f000 f807 	bl	800271c <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff facc 	bl	8001cac <LL_RCC_SetTIMPrescaler>
}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	0501bd00 	.word	0x0501bd00

0800271c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002720:	b672      	cpsid	i
}
 8002722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002724:	e7fe      	b.n	8002724 <Error_Handler+0x8>
	...

08002728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_MspInit+0x4c>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002736:	4a0f      	ldr	r2, [pc, #60]	; (8002774 <HAL_MspInit+0x4c>)
 8002738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800273c:	6453      	str	r3, [r2, #68]	; 0x44
 800273e:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_MspInit+0x4c>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_MspInit+0x4c>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	4a08      	ldr	r2, [pc, #32]	; (8002774 <HAL_MspInit+0x4c>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b06      	ldr	r3, [pc, #24]	; (8002774 <HAL_MspInit+0x4c>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40023800 	.word	0x40023800

08002778 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	429a      	cmp	r2, r3
 800278c:	bf0c      	ite	eq
 800278e:	2301      	moveq	r3, #1
 8002790:	2300      	movne	r3, #0
 8002792:	b2db      	uxtb	r3, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	40013c00 	.word	0x40013c00

080027a4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 80027ac:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6153      	str	r3, [r2, #20]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <LL_USART_IsActiveFlag_PE>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
}
 80027de:	4618      	mov	r0, r3
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <LL_USART_IsActiveFlag_FE>:
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	bf0c      	ite	eq
 80027fe:	2301      	moveq	r3, #1
 8002800:	2300      	movne	r3, #0
 8002802:	b2db      	uxtb	r3, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <LL_USART_IsActiveFlag_ORE>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_USART_IsActiveFlag_RXNE>:
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b20      	cmp	r3, #32
 8002848:	bf0c      	ite	eq
 800284a:	2301      	moveq	r3, #1
 800284c:	2300      	movne	r3, #0
 800284e:	b2db      	uxtb	r3, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <LL_USART_ClearFlag_PE>:
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800286a:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	bf00      	nop
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_USART_ClearFlag_FE>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 800288e:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_USART_ClearFlag_ORE>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  tmpreg = USARTx->SR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80028b2:	68fb      	ldr	r3, [r7, #12]
  tmpreg = USARTx->DR;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	bf00      	nop
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_USART_IsEnabledIT_RXNE>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_USART_ReceiveData8>:
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	b2db      	uxtb	r3, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800290c:	e7fe      	b.n	800290c <NMI_Handler+0x4>

0800290e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler+0x4>

08002914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002918:	e7fe      	b.n	8002918 <MemManage_Handler+0x4>

0800291a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800291e:	e7fe      	b.n	800291e <BusFault_Handler+0x4>

08002920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002924:	e7fe      	b.n	8002924 <UsageFault_Handler+0x4>

08002926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002926:	b480      	push	{r7}
 8002928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800292a:	bf00      	nop
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002954:	f000 fcda 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	// START DATASET COLLECTION RIGHT HAND

  /* USER CODE END EXTI9_5_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8002960:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002964:	f7ff ff08 	bl	8002778 <LL_EXTI_IsActiveFlag_0_31>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00e      	beq.n	800298c <EXTI9_5_IRQHandler+0x30>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_8);
 800296e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002972:	f7ff ff17 	bl	80027a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_8 */
        if (start_dataset_collection_flag==0)
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <EXTI9_5_IRQHandler+0x34>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d103      	bne.n	8002986 <EXTI9_5_IRQHandler+0x2a>
        	start_dataset_collection_flag = 1;
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <EXTI9_5_IRQHandler+0x34>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_8 */
  }
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002984:	e002      	b.n	800298c <EXTI9_5_IRQHandler+0x30>
        	start_dataset_collection_flag=0;
 8002986:	4b02      	ldr	r3, [pc, #8]	; (8002990 <EXTI9_5_IRQHandler+0x34>)
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000178 	.word	0x20000178

08002994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	// SELCTING THE SENSITIVITY MODE LEFT HAND

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80029b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029b8:	f7ff fede 	bl	8002778 <LL_EXTI_IsActiveFlag_0_31>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <EXTI15_10_IRQHandler+0x34>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80029c2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029c6:	f7ff feed 	bl	80027a4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_15 */
        sense_flag++;
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <EXTI15_10_IRQHandler+0x38>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <EXTI15_10_IRQHandler+0x38>)
 80029d4:	701a      	strb	r2, [r3, #0]
        if (sense_flag>=3)
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <EXTI15_10_IRQHandler+0x38>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <EXTI15_10_IRQHandler+0x34>
        	sense_flag = 0;
 80029de:	4b02      	ldr	r3, [pc, #8]	; (80029e8 <EXTI15_10_IRQHandler+0x38>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000179 	.word	0x20000179

080029ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <OTG_FS_IRQHandler+0x10>)
 80029f2:	f001 ffd9 	bl	80049a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	2000200c 	.word	0x2000200c

08002a00 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002a00:	b598      	push	{r3, r4, r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART6) && LL_USART_IsEnabledIT_RXNE(USART6))
 8002a04:	481c      	ldr	r0, [pc, #112]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a06:	f7ff ff16 	bl	8002836 <LL_USART_IsActiveFlag_RXNE>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <USART6_IRQHandler+0x3c>
 8002a10:	4819      	ldr	r0, [pc, #100]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a12:	f7ff ff59 	bl	80028c8 <LL_USART_IsEnabledIT_RXNE>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00f      	beq.n	8002a3c <USART6_IRQHandler+0x3c>
	{
		rxBuffer[rxBufferCounter] = LL_USART_ReceiveData8(USART6);
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <USART6_IRQHandler+0x7c>)
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	461c      	mov	r4, r3
 8002a22:	4815      	ldr	r0, [pc, #84]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a24:	f7ff ff63 	bl	80028ee <LL_USART_ReceiveData8>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <USART6_IRQHandler+0x80>)
 8002a2e:	551a      	strb	r2, [r3, r4]
	    rxBufferCounter ++;
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <USART6_IRQHandler+0x7c>)
 8002a32:	881b      	ldrh	r3, [r3, #0]
 8002a34:	3301      	adds	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <USART6_IRQHandler+0x7c>)
 8002a3a:	801a      	strh	r2, [r3, #0]
	}

    /* Check UART errors */
    if (LL_USART_IsActiveFlag_ORE(USART6)) // overrun
 8002a3c:	480e      	ldr	r0, [pc, #56]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a3e:	f7ff fee7 	bl	8002810 <LL_USART_IsActiveFlag_ORE>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <USART6_IRQHandler+0x4e>
        LL_USART_ClearFlag_ORE(USART6);
 8002a48:	480b      	ldr	r0, [pc, #44]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a4a:	f7ff ff2b 	bl	80028a4 <LL_USART_ClearFlag_ORE>

    if (LL_USART_IsActiveFlag_FE(USART6)) // framing error
 8002a4e:	480a      	ldr	r0, [pc, #40]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a50:	f7ff fecb 	bl	80027ea <LL_USART_IsActiveFlag_FE>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <USART6_IRQHandler+0x60>
        LL_USART_ClearFlag_FE(USART6);
 8002a5a:	4807      	ldr	r0, [pc, #28]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a5c:	f7ff ff10 	bl	8002880 <LL_USART_ClearFlag_FE>

    if (LL_USART_IsActiveFlag_PE(USART6)) // parity error
 8002a60:	4805      	ldr	r0, [pc, #20]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a62:	f7ff feaf 	bl	80027c4 <LL_USART_IsActiveFlag_PE>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d002      	beq.n	8002a72 <USART6_IRQHandler+0x72>
        LL_USART_ClearFlag_PE(USART6);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <USART6_IRQHandler+0x78>)
 8002a6e:	f7ff fef5 	bl	800285c <LL_USART_ClearFlag_PE>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd98      	pop	{r3, r4, r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40011400 	.word	0x40011400
 8002a7c:	2000016c 	.word	0x2000016c
 8002a80:	200006e0 	.word	0x200006e0

08002a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <SystemInit+0x20>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <SystemInit+0x20>)
 8002a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <__NVIC_GetPriorityGrouping>:
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002aac:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	0a1b      	lsrs	r3, r3, #8
 8002ab2:	f003 0307 	and.w	r3, r3, #7
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_EnableIRQ>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	db0b      	blt.n	8002aee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	f003 021f 	and.w	r2, r3, #31
 8002adc:	4907      	ldr	r1, [pc, #28]	; (8002afc <__NVIC_EnableIRQ+0x38>)
 8002ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	e000e100 	.word	0xe000e100

08002b00 <__NVIC_SetPriority>:
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	4603      	mov	r3, r0
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db0a      	blt.n	8002b2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <__NVIC_SetPriority+0x4c>)
 8002b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	440b      	add	r3, r1
 8002b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b28:	e00a      	b.n	8002b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4908      	ldr	r1, [pc, #32]	; (8002b50 <__NVIC_SetPriority+0x50>)
 8002b30:	79fb      	ldrb	r3, [r7, #7]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	3b04      	subs	r3, #4
 8002b38:	0112      	lsls	r2, r2, #4
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	761a      	strb	r2, [r3, #24]
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100
 8002b50:	e000ed00 	.word	0xe000ed00

08002b54 <NVIC_EncodePriority>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f1c3 0307 	rsb	r3, r3, #7
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	bf28      	it	cs
 8002b72:	2304      	movcs	r3, #4
 8002b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	3304      	adds	r3, #4
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d902      	bls.n	8002b84 <NVIC_EncodePriority+0x30>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3b03      	subs	r3, #3
 8002b82:	e000      	b.n	8002b86 <NVIC_EncodePriority+0x32>
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	f04f 32ff 	mov.w	r2, #4294967295
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43da      	mvns	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	401a      	ands	r2, r3
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba6:	43d9      	mvns	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	4313      	orrs	r3, r2
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <LL_AHB1_GRP1_EnableClock>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002bd0:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bda:	68fb      	ldr	r3, [r7, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40023800 	.word	0x40023800

08002bec <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4013      	ands	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40023800 	.word	0x40023800

08002c1c <LL_TIM_DisableARRPreload>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <LL_TIM_OC_DisableFast>:
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d01c      	beq.n	8002c86 <LL_TIM_OC_DisableFast+0x4a>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d017      	beq.n	8002c82 <LL_TIM_OC_DisableFast+0x46>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	d012      	beq.n	8002c7e <LL_TIM_OC_DisableFast+0x42>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d00d      	beq.n	8002c7a <LL_TIM_OC_DisableFast+0x3e>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c64:	d007      	beq.n	8002c76 <LL_TIM_OC_DisableFast+0x3a>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6c:	d101      	bne.n	8002c72 <LL_TIM_OC_DisableFast+0x36>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e00a      	b.n	8002c88 <LL_TIM_OC_DisableFast+0x4c>
 8002c72:	2306      	movs	r3, #6
 8002c74:	e008      	b.n	8002c88 <LL_TIM_OC_DisableFast+0x4c>
 8002c76:	2304      	movs	r3, #4
 8002c78:	e006      	b.n	8002c88 <LL_TIM_OC_DisableFast+0x4c>
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e004      	b.n	8002c88 <LL_TIM_OC_DisableFast+0x4c>
 8002c7e:	2302      	movs	r3, #2
 8002c80:	e002      	b.n	8002c88 <LL_TIM_OC_DisableFast+0x4c>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <LL_TIM_OC_DisableFast+0x4c>
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	3318      	adds	r3, #24
 8002c8e:	4619      	mov	r1, r3
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	4a0b      	ldr	r2, [pc, #44]	; (8002cc0 <LL_TIM_OC_DisableFast+0x84>)
 8002c94:	5cd3      	ldrb	r3, [r2, r3]
 8002c96:	440b      	add	r3, r1
 8002c98:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <LL_TIM_OC_DisableFast+0x88>)
 8002ca2:	5ccb      	ldrb	r3, [r1, r3]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	408b      	lsls	r3, r1
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	601a      	str	r2, [r3, #0]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	0800b2bc 	.word	0x0800b2bc
 8002cc4:	0800b2c4 	.word	0x0800b2c4

08002cc8 <LL_TIM_OC_EnablePreload>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d01c      	beq.n	8002d12 <LL_TIM_OC_EnablePreload+0x4a>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d017      	beq.n	8002d0e <LL_TIM_OC_EnablePreload+0x46>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d012      	beq.n	8002d0a <LL_TIM_OC_EnablePreload+0x42>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d00d      	beq.n	8002d06 <LL_TIM_OC_EnablePreload+0x3e>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d007      	beq.n	8002d02 <LL_TIM_OC_EnablePreload+0x3a>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf8:	d101      	bne.n	8002cfe <LL_TIM_OC_EnablePreload+0x36>
 8002cfa:	2305      	movs	r3, #5
 8002cfc:	e00a      	b.n	8002d14 <LL_TIM_OC_EnablePreload+0x4c>
 8002cfe:	2306      	movs	r3, #6
 8002d00:	e008      	b.n	8002d14 <LL_TIM_OC_EnablePreload+0x4c>
 8002d02:	2304      	movs	r3, #4
 8002d04:	e006      	b.n	8002d14 <LL_TIM_OC_EnablePreload+0x4c>
 8002d06:	2303      	movs	r3, #3
 8002d08:	e004      	b.n	8002d14 <LL_TIM_OC_EnablePreload+0x4c>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	e002      	b.n	8002d14 <LL_TIM_OC_EnablePreload+0x4c>
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e000      	b.n	8002d14 <LL_TIM_OC_EnablePreload+0x4c>
 8002d12:	2300      	movs	r3, #0
 8002d14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3318      	adds	r3, #24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <LL_TIM_OC_EnablePreload+0x80>)
 8002d20:	5cd3      	ldrb	r3, [r2, r3]
 8002d22:	440b      	add	r3, r1
 8002d24:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <LL_TIM_OC_EnablePreload+0x84>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	4619      	mov	r1, r3
 8002d32:	2308      	movs	r3, #8
 8002d34:	408b      	lsls	r3, r1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	0800b2bc 	.word	0x0800b2bc
 8002d4c:	0800b2c4 	.word	0x0800b2c4

08002d50 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	605a      	str	r2, [r3, #4]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	609a      	str	r2, [r3, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b094      	sub	sp, #80	; 0x50
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002d9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
 8002dac:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002dae:	f107 031c 	add.w	r3, r7, #28
 8002db2:	2220      	movs	r2, #32
 8002db4:	2100      	movs	r1, #0
 8002db6:	4618      	mov	r0, r3
 8002db8:	f008 fa1e 	bl	800b1f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
 8002dc6:	60da      	str	r2, [r3, #12]
 8002dc8:	611a      	str	r2, [r3, #16]
 8002dca:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7ff ff0d 	bl	8002bec <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002dd2:	f7ff fe69 	bl	8002aa8 <__NVIC_GetPriorityGrouping>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7ff feb9 	bl	8002b54 <NVIC_EncodePriority>
 8002de2:	4603      	mov	r3, r0
 8002de4:	4619      	mov	r1, r3
 8002de6:	201c      	movs	r0, #28
 8002de8:	f7ff fe8a 	bl	8002b00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002dec:	201c      	movs	r0, #28
 8002dee:	f7ff fe69 	bl	8002ac4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 2;
 8002df2:	2302      	movs	r3, #2
 8002df4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002df6:	2300      	movs	r3, #0
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 999;
 8002dfa:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002dfe:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002e04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e0e:	f003 fb3f 	bl	8006490 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8002e12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e16:	f7ff ff01 	bl	8002c1c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e20:	f7ff ff52 	bl	8002cc8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002e24:	2360      	movs	r3, #96	; 0x60
 8002e26:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 500;
 8002e30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002e34:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002e36:	2300      	movs	r3, #0
 8002e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002e3a:	f107 031c 	add.w	r3, r7, #28
 8002e3e:	461a      	mov	r2, r3
 8002e40:	2101      	movs	r1, #1
 8002e42:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e46:	f003 fb9d 	bl	8006584 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e50:	f7ff fef4 	bl	8002c3c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002e54:	2100      	movs	r1, #0
 8002e56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e5a:	f7ff ff79 	bl	8002d50 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8002e5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e62:	f7ff ff88 	bl	8002d76 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002e66:	2001      	movs	r0, #1
 8002e68:	f7ff fea8 	bl	8002bbc <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e72:	2302      	movs	r3, #2
 8002e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002e82:	2301      	movs	r3, #1
 8002e84:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4803      	ldr	r0, [pc, #12]	; (8002e98 <MX_TIM2_Init+0x100>)
 8002e8c:	f003 f8e4 	bl	8006058 <LL_GPIO_Init>

}
 8002e90:	bf00      	nop
 8002e92:	3750      	adds	r7, #80	; 0x50
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40020000 	.word	0x40020000

08002e9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b094      	sub	sp, #80	; 0x50
 8002ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002ea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	60da      	str	r2, [r3, #12]
 8002eb0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f008 f99c 	bl	800b1f8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	611a      	str	r2, [r3, #16]
 8002ece:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	f7ff fe8b 	bl	8002bec <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002ed6:	f7ff fde7 	bl	8002aa8 <__NVIC_GetPriorityGrouping>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2200      	movs	r2, #0
 8002ede:	2100      	movs	r1, #0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fe37 	bl	8002b54 <NVIC_EncodePriority>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	201d      	movs	r0, #29
 8002eec:	f7ff fe08 	bl	8002b00 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002ef0:	201d      	movs	r0, #29
 8002ef2:	f7ff fde7 	bl	8002ac4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 2;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002efa:	2300      	movs	r3, #0
 8002efc:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 999;
 8002efe:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002f02:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002f04:	2300      	movs	r3, #0
 8002f06:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002f08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	481f      	ldr	r0, [pc, #124]	; (8002f8c <MX_TIM3_Init+0xf0>)
 8002f10:	f003 fabe 	bl	8006490 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002f14:	481d      	ldr	r0, [pc, #116]	; (8002f8c <MX_TIM3_Init+0xf0>)
 8002f16:	f7ff fe81 	bl	8002c1c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	481b      	ldr	r0, [pc, #108]	; (8002f8c <MX_TIM3_Init+0xf0>)
 8002f1e:	f7ff fed3 	bl	8002cc8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002f22:	2360      	movs	r3, #96	; 0x60
 8002f24:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 500;
 8002f2e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002f34:	2300      	movs	r3, #0
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002f38:	f107 031c 	add.w	r3, r7, #28
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4812      	ldr	r0, [pc, #72]	; (8002f8c <MX_TIM3_Init+0xf0>)
 8002f42:	f003 fb1f 	bl	8006584 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002f46:	2101      	movs	r1, #1
 8002f48:	4810      	ldr	r0, [pc, #64]	; (8002f8c <MX_TIM3_Init+0xf0>)
 8002f4a:	f7ff fe77 	bl	8002c3c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	480e      	ldr	r0, [pc, #56]	; (8002f8c <MX_TIM3_Init+0xf0>)
 8002f52:	f7ff fefd 	bl	8002d50 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002f56:	480d      	ldr	r0, [pc, #52]	; (8002f8c <MX_TIM3_Init+0xf0>)
 8002f58:	f7ff ff0d 	bl	8002d76 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8002f5c:	2002      	movs	r0, #2
 8002f5e:	f7ff fe2d 	bl	8002bbc <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8002f62:	2310      	movs	r3, #16
 8002f64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002f66:	2302      	movs	r3, #2
 8002f68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4804      	ldr	r0, [pc, #16]	; (8002f90 <MX_TIM3_Init+0xf4>)
 8002f80:	f003 f86a 	bl	8006058 <LL_GPIO_Init>

}
 8002f84:	bf00      	nop
 8002f86:	3750      	adds	r7, #80	; 0x50
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40020400 	.word	0x40020400

08002f94 <__NVIC_GetPriorityGrouping>:
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <__NVIC_GetPriorityGrouping+0x18>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	f003 0307 	and.w	r3, r3, #7
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <__NVIC_EnableIRQ>:
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	db0b      	blt.n	8002fda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fc2:	79fb      	ldrb	r3, [r7, #7]
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <__NVIC_EnableIRQ+0x38>)
 8002fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fce:	095b      	lsrs	r3, r3, #5
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000e100 	.word	0xe000e100

08002fec <__NVIC_SetPriority>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	6039      	str	r1, [r7, #0]
 8002ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	db0a      	blt.n	8003016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	490c      	ldr	r1, [pc, #48]	; (8003038 <__NVIC_SetPriority+0x4c>)
 8003006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	440b      	add	r3, r1
 8003010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003014:	e00a      	b.n	800302c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <__NVIC_SetPriority+0x50>)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	3b04      	subs	r3, #4
 8003024:	0112      	lsls	r2, r2, #4
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	440b      	add	r3, r1
 800302a:	761a      	strb	r2, [r3, #24]
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000e100 	.word	0xe000e100
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <NVIC_EncodePriority>:
{
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	; 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	f1c3 0307 	rsb	r3, r3, #7
 800305a:	2b04      	cmp	r3, #4
 800305c:	bf28      	it	cs
 800305e:	2304      	movcs	r3, #4
 8003060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	3304      	adds	r3, #4
 8003066:	2b06      	cmp	r3, #6
 8003068:	d902      	bls.n	8003070 <NVIC_EncodePriority+0x30>
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3b03      	subs	r3, #3
 800306e:	e000      	b.n	8003072 <NVIC_EncodePriority+0x32>
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	f04f 32ff 	mov.w	r2, #4294967295
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43da      	mvns	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	401a      	ands	r2, r3
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003088:	f04f 31ff 	mov.w	r1, #4294967295
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa01 f303 	lsl.w	r3, r1, r3
 8003092:	43d9      	mvns	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	4313      	orrs	r3, r2
}
 800309a:	4618      	mov	r0, r3
 800309c:	3724      	adds	r7, #36	; 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <LL_AHB1_GRP1_EnableClock>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80030bc:	4b05      	ldr	r3, [pc, #20]	; (80030d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80030be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4013      	ands	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	40023800 	.word	0x40023800

080030d8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80030e0:	4b08      	ldr	r3, [pc, #32]	; (8003104 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e4:	4907      	ldr	r1, [pc, #28]	; (8003104 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <LL_APB2_GRP1_EnableClock+0x2c>)
 80030ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4013      	ands	r3, r2
 80030f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030f6:	68fb      	ldr	r3, [r7, #12]
}
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	40023800 	.word	0x40023800

08003108 <LL_USART_Enable>:
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	60da      	str	r2, [r3, #12]
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_USART_ConfigAsyncMode>:
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	615a      	str	r2, [r3, #20]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <MX_USART6_UART_Init>:
/* USER CODE END 0 */

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	; 0x38
 8003158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800315a:	f107 031c 	add.w	r3, r7, #28
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	605a      	str	r2, [r3, #4]
 8003164:	609a      	str	r2, [r3, #8]
 8003166:	60da      	str	r2, [r3, #12]
 8003168:	611a      	str	r2, [r3, #16]
 800316a:	615a      	str	r2, [r3, #20]
 800316c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316e:	1d3b      	adds	r3, r7, #4
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	611a      	str	r2, [r3, #16]
 800317c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800317e:	2020      	movs	r0, #32
 8003180:	f7ff ffaa 	bl	80030d8 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003184:	2004      	movs	r0, #4
 8003186:	f7ff ff8f 	bl	80030a8 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800318a:	23c0      	movs	r3, #192	; 0xc0
 800318c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800318e:	2302      	movs	r3, #2
 8003190:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003192:	2303      	movs	r3, #3
 8003194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800319e:	2308      	movs	r3, #8
 80031a0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	4819      	ldr	r0, [pc, #100]	; (800320c <MX_USART6_UART_Init+0xb8>)
 80031a8:	f002 ff56 	bl	8006058 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80031ac:	f7ff fef2 	bl	8002f94 <__NVIC_GetPriorityGrouping>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ff42 	bl	8003040 <NVIC_EncodePriority>
 80031bc:	4603      	mov	r3, r0
 80031be:	4619      	mov	r1, r3
 80031c0:	2047      	movs	r0, #71	; 0x47
 80031c2:	f7ff ff13 	bl	8002fec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80031c6:	2047      	movs	r0, #71	; 0x47
 80031c8:	f7ff fef2 	bl	8002fb0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80031cc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80031d0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80031da:	2300      	movs	r3, #0
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80031de:	230c      	movs	r3, #12
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80031e2:	2300      	movs	r3, #0
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80031e6:	2300      	movs	r3, #0
 80031e8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	4619      	mov	r1, r3
 80031f0:	4807      	ldr	r0, [pc, #28]	; (8003210 <MX_USART6_UART_Init+0xbc>)
 80031f2:	f003 fdfb 	bl	8006dec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <MX_USART6_UART_Init+0xbc>)
 80031f8:	f7ff ff96 	bl	8003128 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80031fc:	4804      	ldr	r0, [pc, #16]	; (8003210 <MX_USART6_UART_Init+0xbc>)
 80031fe:	f7ff ff83 	bl	8003108 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003202:	bf00      	nop
 8003204:	3738      	adds	r7, #56	; 0x38
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40020800 	.word	0x40020800
 8003210:	40011400 	.word	0x40011400

08003214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800324c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800321a:	490e      	ldr	r1, [pc, #56]	; (8003254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800321c:	4a0e      	ldr	r2, [pc, #56]	; (8003258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800321e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003220:	e002      	b.n	8003228 <LoopCopyDataInit>

08003222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003226:	3304      	adds	r3, #4

08003228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800322c:	d3f9      	bcc.n	8003222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800322e:	4a0b      	ldr	r2, [pc, #44]	; (800325c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003230:	4c0b      	ldr	r4, [pc, #44]	; (8003260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003234:	e001      	b.n	800323a <LoopFillZerobss>

08003236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003238:	3204      	adds	r2, #4

0800323a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800323c:	d3fb      	bcc.n	8003236 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800323e:	f7ff fc21 	bl	8002a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003242:	f007 ffa7 	bl	800b194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003246:	f7fe fe79 	bl	8001f3c <main>
  bx  lr    
 800324a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800324c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003254:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003258:	0800b2dc 	.word	0x0800b2dc
  ldr r2, =_sbss
 800325c:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003260:	20002738 	.word	0x20002738

08003264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003264:	e7fe      	b.n	8003264 <ADC_IRQHandler>
	...

08003268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_Init+0x40>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <HAL_Init+0x40>)
 8003272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_Init+0x40>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a0a      	ldr	r2, [pc, #40]	; (80032a8 <HAL_Init+0x40>)
 800327e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_Init+0x40>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_Init+0x40>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f000 fd31 	bl	8003cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003296:	200f      	movs	r0, #15
 8003298:	f000 f808 	bl	80032ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800329c:	f7ff fa44 	bl	8002728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fd49 	bl	8003d62 <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f000 fd11 	bl	8003d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000004 	.word	0x20000004
 8003304:	2000000c 	.word	0x2000000c
 8003308:	20000008 	.word	0x20000008

0800330c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_IncTick+0x20>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_IncTick+0x24>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a04      	ldr	r2, [pc, #16]	; (8003330 <HAL_IncTick+0x24>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000000c 	.word	0x2000000c
 8003330:	20000ac8 	.word	0x20000ac8

08003334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  return uwTick;
 8003338:	4b03      	ldr	r3, [pc, #12]	; (8003348 <HAL_GetTick+0x14>)
 800333a:	681b      	ldr	r3, [r3, #0]
}
 800333c:	4618      	mov	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	20000ac8 	.word	0x20000ac8

0800334c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003354:	f7ff ffee 	bl	8003334 <HAL_GetTick>
 8003358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003364:	d005      	beq.n	8003372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <HAL_Delay+0x44>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003372:	bf00      	nop
 8003374:	f7ff ffde 	bl	8003334 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	429a      	cmp	r2, r3
 8003382:	d8f7      	bhi.n	8003374 <HAL_Delay+0x28>
  {
  }
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	2000000c 	.word	0x2000000c

08003394 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e033      	b.n	8003412 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd f9b8 	bl	8000728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 0310 	and.w	r3, r3, #16
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d118      	bne.n	8003404 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033da:	f023 0302 	bic.w	r3, r3, #2
 80033de:	f043 0202 	orr.w	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 faba 	bl	8003960 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	f043 0201 	orr.w	r2, r3, #1
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	641a      	str	r2, [r3, #64]	; 0x40
 8003402:	e001      	b.n	8003408 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_ADC_Start+0x1a>
 8003432:	2302      	movs	r3, #2
 8003434:	e097      	b.n	8003566 <HAL_ADC_Start+0x14a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b01      	cmp	r3, #1
 800344a:	d018      	beq.n	800347e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800345c:	4b45      	ldr	r3, [pc, #276]	; (8003574 <HAL_ADC_Start+0x158>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a45      	ldr	r2, [pc, #276]	; (8003578 <HAL_ADC_Start+0x15c>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0c9a      	lsrs	r2, r3, #18
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003470:	e002      	b.n	8003478 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	3b01      	subs	r3, #1
 8003476:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f9      	bne.n	8003472 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b01      	cmp	r3, #1
 800348a:	d15f      	bne.n	800354c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ca:	d106      	bne.n	80034da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d0:	f023 0206 	bic.w	r2, r3, #6
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	645a      	str	r2, [r3, #68]	; 0x44
 80034d8:	e002      	b.n	80034e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_ADC_Start+0x160>)
 80034ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 031f 	and.w	r3, r3, #31
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10f      	bne.n	8003522 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d129      	bne.n	8003564 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	e020      	b.n	8003564 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a16      	ldr	r2, [pc, #88]	; (8003580 <HAL_ADC_Start+0x164>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d11b      	bne.n	8003564 <HAL_ADC_Start+0x148>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d114      	bne.n	8003564 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	e00b      	b.n	8003564 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	f043 0210 	orr.w	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000004 	.word	0x20000004
 8003578:	431bde83 	.word	0x431bde83
 800357c:	40012300 	.word	0x40012300
 8003580:	40012000 	.word	0x40012000

08003584 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_ADC_Stop+0x16>
 8003596:	2302      	movs	r3, #2
 8003598:	e021      	b.n	80035de <HAL_ADC_Stop+0x5a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d109      	bne.n	80035d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	f043 0201 	orr.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003606:	d113      	bne.n	8003630 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003616:	d10b      	bne.n	8003630 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e063      	b.n	80036f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003630:	f7ff fe80 	bl	8003334 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003636:	e021      	b.n	800367c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d01d      	beq.n	800367c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <HAL_ADC_PollForConversion+0x6c>
 8003646:	f7ff fe75 	bl	8003334 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d212      	bcs.n	800367c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b02      	cmp	r3, #2
 8003662:	d00b      	beq.n	800367c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e03d      	b.n	80036f8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d1d6      	bne.n	8003638 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f06f 0212 	mvn.w	r2, #18
 8003692:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d123      	bne.n	80036f6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11f      	bne.n	80036f6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d006      	beq.n	80036d2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d111      	bne.n	80036f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d105      	bne.n	80036f6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	f043 0201 	orr.w	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x1c>
 8003734:	2302      	movs	r3, #2
 8003736:	e105      	b.n	8003944 <HAL_ADC_ConfigChannel+0x228>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b09      	cmp	r3, #9
 8003746:	d925      	bls.n	8003794 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68d9      	ldr	r1, [r3, #12]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	461a      	mov	r2, r3
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	3b1e      	subs	r3, #30
 800375e:	2207      	movs	r2, #7
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	43da      	mvns	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	400a      	ands	r2, r1
 800376c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68d9      	ldr	r1, [r3, #12]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	4618      	mov	r0, r3
 8003780:	4603      	mov	r3, r0
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4403      	add	r3, r0
 8003786:	3b1e      	subs	r3, #30
 8003788:	409a      	lsls	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	e022      	b.n	80037da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6919      	ldr	r1, [r3, #16]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	4613      	mov	r3, r2
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	4413      	add	r3, r2
 80037a8:	2207      	movs	r2, #7
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	400a      	ands	r2, r1
 80037b6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6919      	ldr	r1, [r3, #16]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4403      	add	r3, r0
 80037d0:	409a      	lsls	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b06      	cmp	r3, #6
 80037e0:	d824      	bhi.n	800382c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	685a      	ldr	r2, [r3, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	3b05      	subs	r3, #5
 80037f4:	221f      	movs	r2, #31
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43da      	mvns	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	400a      	ands	r2, r1
 8003802:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	b29b      	uxth	r3, r3
 8003810:	4618      	mov	r0, r3
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	3b05      	subs	r3, #5
 800381e:	fa00 f203 	lsl.w	r2, r0, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
 800382a:	e04c      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b0c      	cmp	r3, #12
 8003832:	d824      	bhi.n	800387e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	3b23      	subs	r3, #35	; 0x23
 8003846:	221f      	movs	r2, #31
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43da      	mvns	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	400a      	ands	r2, r1
 8003854:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	4618      	mov	r0, r3
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	3b23      	subs	r3, #35	; 0x23
 8003870:	fa00 f203 	lsl.w	r2, r0, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
 800387c:	e023      	b.n	80038c6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	3b41      	subs	r3, #65	; 0x41
 8003890:	221f      	movs	r2, #31
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	400a      	ands	r2, r1
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4618      	mov	r0, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	3b41      	subs	r3, #65	; 0x41
 80038ba:	fa00 f203 	lsl.w	r2, r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038c6:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_ADC_ConfigChannel+0x234>)
 80038c8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <HAL_ADC_ConfigChannel+0x238>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d109      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x1cc>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2b12      	cmp	r3, #18
 80038da:	d105      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a19      	ldr	r2, [pc, #100]	; (8003954 <HAL_ADC_ConfigChannel+0x238>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d123      	bne.n	800393a <HAL_ADC_ConfigChannel+0x21e>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d003      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x1e6>
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b11      	cmp	r3, #17
 8003900:	d11b      	bne.n	800393a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b10      	cmp	r3, #16
 8003914:	d111      	bne.n	800393a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <HAL_ADC_ConfigChannel+0x23c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a10      	ldr	r2, [pc, #64]	; (800395c <HAL_ADC_ConfigChannel+0x240>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	0c9a      	lsrs	r2, r3, #18
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800392c:	e002      	b.n	8003934 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	3b01      	subs	r3, #1
 8003932:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f9      	bne.n	800392e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40012300 	.word	0x40012300
 8003954:	40012000 	.word	0x40012000
 8003958:	20000004 	.word	0x20000004
 800395c:	431bde83 	.word	0x431bde83

08003960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003968:	4b79      	ldr	r3, [pc, #484]	; (8003b50 <ADC_Init+0x1f0>)
 800396a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	021a      	lsls	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80039b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6899      	ldr	r1, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	4a58      	ldr	r2, [pc, #352]	; (8003b54 <ADC_Init+0x1f4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6899      	ldr	r1, [r3, #8]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6899      	ldr	r1, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	e00f      	b.n	8003a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0202 	bic.w	r2, r2, #2
 8003a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	7e1b      	ldrb	r3, [r3, #24]
 8003a78:	005a      	lsls	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01b      	beq.n	8003ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	035a      	lsls	r2, r3, #13
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
 8003ac2:	e007      	b.n	8003ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	051a      	lsls	r2, r3, #20
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6899      	ldr	r1, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b16:	025a      	lsls	r2, r3, #9
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6899      	ldr	r1, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	029a      	lsls	r2, r3, #10
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	430a      	orrs	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012300 	.word	0x40012300
 8003b54:	0f000001 	.word	0x0f000001

08003b58 <__NVIC_SetPriorityGrouping>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b74:	4013      	ands	r3, r2
 8003b76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b8a:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <__NVIC_SetPriorityGrouping+0x44>)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	60d3      	str	r3, [r2, #12]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	e000ed00 	.word	0xe000ed00

08003ba0 <__NVIC_GetPriorityGrouping>:
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ba4:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	f003 0307 	and.w	r3, r3, #7
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	e000ed00 	.word	0xe000ed00

08003bbc <__NVIC_EnableIRQ>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	db0b      	blt.n	8003be6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bce:	79fb      	ldrb	r3, [r7, #7]
 8003bd0:	f003 021f 	and.w	r2, r3, #31
 8003bd4:	4907      	ldr	r1, [pc, #28]	; (8003bf4 <__NVIC_EnableIRQ+0x38>)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	2001      	movs	r0, #1
 8003bde:	fa00 f202 	lsl.w	r2, r0, r2
 8003be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000e100 	.word	0xe000e100

08003bf8 <__NVIC_SetPriority>:
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	db0a      	blt.n	8003c22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	490c      	ldr	r1, [pc, #48]	; (8003c44 <__NVIC_SetPriority+0x4c>)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	0112      	lsls	r2, r2, #4
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003c20:	e00a      	b.n	8003c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	4908      	ldr	r1, [pc, #32]	; (8003c48 <__NVIC_SetPriority+0x50>)
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	f003 030f 	and.w	r3, r3, #15
 8003c2e:	3b04      	subs	r3, #4
 8003c30:	0112      	lsls	r2, r2, #4
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	440b      	add	r3, r1
 8003c36:	761a      	strb	r2, [r3, #24]
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000e100 	.word	0xe000e100
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <NVIC_EncodePriority>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b089      	sub	sp, #36	; 0x24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	f1c3 0307 	rsb	r3, r3, #7
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf28      	it	cs
 8003c6a:	2304      	movcs	r3, #4
 8003c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3304      	adds	r3, #4
 8003c72:	2b06      	cmp	r3, #6
 8003c74:	d902      	bls.n	8003c7c <NVIC_EncodePriority+0x30>
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3b03      	subs	r3, #3
 8003c7a:	e000      	b.n	8003c7e <NVIC_EncodePriority+0x32>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43da      	mvns	r2, r3
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	401a      	ands	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c94:	f04f 31ff 	mov.w	r1, #4294967295
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c9e:	43d9      	mvns	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	4313      	orrs	r3, r2
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3724      	adds	r7, #36	; 0x24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc4:	d301      	bcc.n	8003cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <SysTick_Config+0x40>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cd8:	f7ff ff8e 	bl	8003bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SysTick_Config+0x40>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <SysTick_Config+0x40>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000e010 	.word	0xe000e010

08003cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff29 	bl	8003b58 <__NVIC_SetPriorityGrouping>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff3e 	bl	8003ba0 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff8e 	bl	8003c4c <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5d 	bl	8003bf8 <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff31 	bl	8003bbc <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7ff ffa2 	bl	8003cb4 <SysTick_Config>
 8003d70:	4603      	mov	r3, r0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e00e      	b.n	8003daa <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	795b      	ldrb	r3, [r3, #5]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d105      	bne.n	8003da2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f7fd fca5 	bl	80016ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b087      	sub	sp, #28
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689a      	ldr	r2, [r3, #8]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	e00a      	b.n	8003df4 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d3f0      	bcc.n	8003dde <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8003e0a:	693b      	ldr	r3, [r7, #16]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	371c      	adds	r7, #28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <HAL_FLASH_Program+0xa0>)
 8003e2c:	7e1b      	ldrb	r3, [r3, #24]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_FLASH_Program+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e03b      	b.n	8003eae <HAL_FLASH_Program+0x96>
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_FLASH_Program+0xa0>)
 8003e38:	2201      	movs	r2, #1
 8003e3a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e40:	f000 f87c 	bl	8003f3c <FLASH_WaitForLastOperation>
 8003e44:	4603      	mov	r3, r0
 8003e46:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d12b      	bne.n	8003ea6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003e54:	783b      	ldrb	r3, [r7, #0]
 8003e56:	4619      	mov	r1, r3
 8003e58:	68b8      	ldr	r0, [r7, #8]
 8003e5a:	f000 f927 	bl	80040ac <FLASH_Program_Byte>
 8003e5e:	e016      	b.n	8003e8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003e66:	883b      	ldrh	r3, [r7, #0]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	68b8      	ldr	r0, [r7, #8]
 8003e6c:	f000 f8fa 	bl	8004064 <FLASH_Program_HalfWord>
 8003e70:	e00d      	b.n	8003e8e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d105      	bne.n	8003e84 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	68b8      	ldr	r0, [r7, #8]
 8003e7e:	f000 f8cf 	bl	8004020 <FLASH_Program_Word>
 8003e82:	e004      	b.n	8003e8e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e88:	68b8      	ldr	r0, [r7, #8]
 8003e8a:	f000 f897 	bl	8003fbc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e8e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e92:	f000 f853 	bl	8003f3c <FLASH_WaitForLastOperation>
 8003e96:	4603      	mov	r3, r0
 8003e98:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <HAL_FLASH_Program+0xa4>)
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	4a07      	ldr	r2, [pc, #28]	; (8003ebc <HAL_FLASH_Program+0xa4>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_FLASH_Program+0xa0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000acc 	.word	0x20000acc
 8003ebc:	40023c00 	.word	0x40023c00

08003ec0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_FLASH_Unlock+0x38>)
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	da0b      	bge.n	8003eea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003ed2:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <HAL_FLASH_Unlock+0x38>)
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_FLASH_Unlock+0x3c>)
 8003ed6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003ed8:	4b07      	ldr	r3, [pc, #28]	; (8003ef8 <HAL_FLASH_Unlock+0x38>)
 8003eda:	4a09      	ldr	r2, [pc, #36]	; (8003f00 <HAL_FLASH_Unlock+0x40>)
 8003edc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003ede:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_FLASH_Unlock+0x38>)
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	da01      	bge.n	8003eea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003eea:	79fb      	ldrb	r3, [r7, #7]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	40023c00 	.word	0x40023c00
 8003efc:	45670123 	.word	0x45670123
 8003f00:	cdef89ab 	.word	0xcdef89ab

08003f04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003f08:	4b05      	ldr	r3, [pc, #20]	; (8003f20 <HAL_FLASH_Lock+0x1c>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <HAL_FLASH_Lock+0x1c>)
 8003f0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003f14:	2300      	movs	r3, #0
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	40023c00 	.word	0x40023c00

08003f24 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <HAL_FLASH_GetError+0x14>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
}  
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20000acc 	.word	0x20000acc

08003f3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <FLASH_WaitForLastOperation+0x78>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f4e:	f7ff f9f1 	bl	8003334 <HAL_GetTick>
 8003f52:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f54:	e010      	b.n	8003f78 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d00c      	beq.n	8003f78 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d007      	beq.n	8003f74 <FLASH_WaitForLastOperation+0x38>
 8003f64:	f7ff f9e6 	bl	8003334 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d201      	bcs.n	8003f78 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e019      	b.n	8003fac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003f78:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <FLASH_WaitForLastOperation+0x7c>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e8      	bne.n	8003f56 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003f84:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <FLASH_WaitForLastOperation+0x7c>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <FLASH_WaitForLastOperation+0x7c>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003f96:	4b08      	ldr	r3, [pc, #32]	; (8003fb8 <FLASH_WaitForLastOperation+0x7c>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003fa2:	f000 f8a5 	bl	80040f0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
  
}  
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	20000acc 	.word	0x20000acc
 8003fb8:	40023c00 	.word	0x40023c00

08003fbc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003fc8:	4b14      	ldr	r3, [pc, #80]	; (800401c <FLASH_Program_DoubleWord+0x60>)
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4a13      	ldr	r2, [pc, #76]	; (800401c <FLASH_Program_DoubleWord+0x60>)
 8003fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <FLASH_Program_DoubleWord+0x60>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4a10      	ldr	r2, [pc, #64]	; (800401c <FLASH_Program_DoubleWord+0x60>)
 8003fda:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003fde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003fe0:	4b0e      	ldr	r3, [pc, #56]	; (800401c <FLASH_Program_DoubleWord+0x60>)
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	; (800401c <FLASH_Program_DoubleWord+0x60>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003ff2:	f3bf 8f6f 	isb	sy
}
 8003ff6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003ff8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	000a      	movs	r2, r1
 8004006:	2300      	movs	r3, #0
 8004008:	68f9      	ldr	r1, [r7, #12]
 800400a:	3104      	adds	r1, #4
 800400c:	4613      	mov	r3, r2
 800400e:	600b      	str	r3, [r1, #0]
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	40023c00 	.word	0x40023c00

08004020 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800402a:	4b0d      	ldr	r3, [pc, #52]	; (8004060 <FLASH_Program_Word+0x40>)
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	4a0c      	ldr	r2, [pc, #48]	; (8004060 <FLASH_Program_Word+0x40>)
 8004030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004034:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <FLASH_Program_Word+0x40>)
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	4a09      	ldr	r2, [pc, #36]	; (8004060 <FLASH_Program_Word+0x40>)
 800403c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004040:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004042:	4b07      	ldr	r3, [pc, #28]	; (8004060 <FLASH_Program_Word+0x40>)
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	4a06      	ldr	r2, [pc, #24]	; (8004060 <FLASH_Program_Word+0x40>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	601a      	str	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40023c00 	.word	0x40023c00

08004064 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <FLASH_Program_HalfWord+0x44>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	4a0c      	ldr	r2, [pc, #48]	; (80040a8 <FLASH_Program_HalfWord+0x44>)
 8004076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800407a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <FLASH_Program_HalfWord+0x44>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	4a09      	ldr	r2, [pc, #36]	; (80040a8 <FLASH_Program_HalfWord+0x44>)
 8004082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004086:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <FLASH_Program_HalfWord+0x44>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	4a06      	ldr	r2, [pc, #24]	; (80040a8 <FLASH_Program_HalfWord+0x44>)
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	801a      	strh	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40023c00 	.word	0x40023c00

080040ac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <FLASH_Program_Byte+0x40>)
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	4a0b      	ldr	r2, [pc, #44]	; (80040ec <FLASH_Program_Byte+0x40>)
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <FLASH_Program_Byte+0x40>)
 80040c6:	4a09      	ldr	r2, [pc, #36]	; (80040ec <FLASH_Program_Byte+0x40>)
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80040cc:	4b07      	ldr	r3, [pc, #28]	; (80040ec <FLASH_Program_Byte+0x40>)
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <FLASH_Program_Byte+0x40>)
 80040d2:	f043 0301 	orr.w	r3, r3, #1
 80040d6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	78fa      	ldrb	r2, [r7, #3]
 80040dc:	701a      	strb	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	40023c00 	.word	0x40023c00

080040f0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80040f4:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004100:	4b2d      	ldr	r3, [pc, #180]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	f043 0310 	orr.w	r3, r3, #16
 8004108:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 800410a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800410c:	4b29      	ldr	r3, [pc, #164]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 800410e:	2210      	movs	r2, #16
 8004110:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004112:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f043 0308 	orr.w	r3, r3, #8
 8004126:	4a24      	ldr	r2, [pc, #144]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 8004128:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 800412c:	2220      	movs	r2, #32
 800412e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004130:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 8004146:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 800414a:	2240      	movs	r2, #64	; 0x40
 800414c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800414e:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 8004164:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004166:	4b13      	ldr	r3, [pc, #76]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 8004168:	2280      	movs	r2, #128	; 0x80
 800416a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d009      	beq.n	800418c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f043 0301 	orr.w	r3, r3, #1
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 8004182:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 8004186:	f44f 7280 	mov.w	r2, #256	; 0x100
 800418a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800418c:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004198:	4b07      	ldr	r3, [pc, #28]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 800419a:	69db      	ldr	r3, [r3, #28]
 800419c:	f043 0320 	orr.w	r3, r3, #32
 80041a0:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <FLASH_SetErrorCode+0xc8>)
 80041a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80041a4:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <FLASH_SetErrorCode+0xc4>)
 80041a6:	2202      	movs	r2, #2
 80041a8:	60da      	str	r2, [r3, #12]
  }
}
 80041aa:	bf00      	nop
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	40023c00 	.word	0x40023c00
 80041b8:	20000acc 	.word	0x20000acc

080041bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <HAL_FLASHEx_Erase+0xd8>)
 80041d0:	7e1b      	ldrb	r3, [r3, #24]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d101      	bne.n	80041da <HAL_FLASHEx_Erase+0x1e>
 80041d6:	2302      	movs	r3, #2
 80041d8:	e058      	b.n	800428c <HAL_FLASHEx_Erase+0xd0>
 80041da:	4b2e      	ldr	r3, [pc, #184]	; (8004294 <HAL_FLASHEx_Erase+0xd8>)
 80041dc:	2201      	movs	r2, #1
 80041de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80041e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80041e4:	f7ff feaa 	bl	8003f3c <FLASH_WaitForLastOperation>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d148      	bne.n	8004284 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295
 80041f8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d115      	bne.n	800422e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	b2da      	uxtb	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f000 f844 	bl	800429c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004218:	f7ff fe90 	bl	8003f3c <FLASH_WaitForLastOperation>
 800421c:	4603      	mov	r3, r0
 800421e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004220:	4b1d      	ldr	r3, [pc, #116]	; (8004298 <HAL_FLASHEx_Erase+0xdc>)
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <HAL_FLASHEx_Erase+0xdc>)
 8004226:	f023 0304 	bic.w	r3, r3, #4
 800422a:	6113      	str	r3, [r2, #16]
 800422c:	e028      	b.n	8004280 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	e01c      	b.n	8004270 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4619      	mov	r1, r3
 800423e:	68b8      	ldr	r0, [r7, #8]
 8004240:	f000 f850 	bl	80042e4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004248:	f7ff fe78 	bl	8003f3c <FLASH_WaitForLastOperation>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_FLASHEx_Erase+0xdc>)
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	4a10      	ldr	r2, [pc, #64]	; (8004298 <HAL_FLASHEx_Erase+0xdc>)
 8004256:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800425a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800425c:	7bfb      	ldrb	r3, [r7, #15]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	601a      	str	r2, [r3, #0]
          break;
 8004268:	e00a      	b.n	8004280 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3301      	adds	r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	4413      	add	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3da      	bcc.n	8004236 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004280:	f000 f878 	bl	8004374 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_FLASHEx_Erase+0xd8>)
 8004286:	2200      	movs	r2, #0
 8004288:	761a      	strb	r2, [r3, #24]

  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000acc 	.word	0x20000acc
 8004298:	40023c00 	.word	0x40023c00

0800429c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	4603      	mov	r3, r0
 80042a4:	6039      	str	r1, [r7, #0]
 80042a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <FLASH_MassErase+0x44>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <FLASH_MassErase+0x44>)
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <FLASH_MassErase+0x44>)
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <FLASH_MassErase+0x44>)
 80042ba:	f043 0304 	orr.w	r3, r3, #4
 80042be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <FLASH_MassErase+0x44>)
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4313      	orrs	r3, r2
 80042ca:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <FLASH_MassErase+0x44>)
 80042cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d0:	6113      	str	r3, [r2, #16]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40023c00 	.word	0x40023c00

080042e4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d102      	bne.n	8004300 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e010      	b.n	8004322 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d103      	bne.n	800430e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	e009      	b.n	8004322 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800430e:	78fb      	ldrb	r3, [r7, #3]
 8004310:	2b02      	cmp	r3, #2
 8004312:	d103      	bne.n	800431c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e002      	b.n	8004322 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800431c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004320:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 8004328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 8004330:	691a      	ldr	r2, [r3, #16]
 8004332:	490f      	ldr	r1, [pc, #60]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	4a0c      	ldr	r2, [pc, #48]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 8004340:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004344:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4313      	orrs	r3, r2
 8004350:	4a07      	ldr	r2, [pc, #28]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 8004352:	f043 0302 	orr.w	r3, r3, #2
 8004356:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	4a04      	ldr	r2, [pc, #16]	; (8004370 <FLASH_Erase_Sector+0x8c>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	6113      	str	r3, [r2, #16]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40023c00 	.word	0x40023c00

08004374 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004378:	4b20      	ldr	r3, [pc, #128]	; (80043fc <FLASH_FlushCaches+0x88>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004380:	2b00      	cmp	r3, #0
 8004382:	d017      	beq.n	80043b4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004384:	4b1d      	ldr	r3, [pc, #116]	; (80043fc <FLASH_FlushCaches+0x88>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <FLASH_FlushCaches+0x88>)
 800438a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800438e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004390:	4b1a      	ldr	r3, [pc, #104]	; (80043fc <FLASH_FlushCaches+0x88>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a19      	ldr	r2, [pc, #100]	; (80043fc <FLASH_FlushCaches+0x88>)
 8004396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800439a:	6013      	str	r3, [r2, #0]
 800439c:	4b17      	ldr	r3, [pc, #92]	; (80043fc <FLASH_FlushCaches+0x88>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a16      	ldr	r2, [pc, #88]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043a6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a13      	ldr	r2, [pc, #76]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043b2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d017      	beq.n	80043f0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80043c0:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a0d      	ldr	r2, [pc, #52]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a0a      	ldr	r2, [pc, #40]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a07      	ldr	r2, [pc, #28]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a04      	ldr	r2, [pc, #16]	; (80043fc <FLASH_FlushCaches+0x88>)
 80043ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043ee:	6013      	str	r3, [r2, #0]
  }
}
 80043f0:	bf00      	nop
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40023c00 	.word	0x40023c00

08004400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004412:	2300      	movs	r3, #0
 8004414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004416:	2300      	movs	r3, #0
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	e159      	b.n	80046d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800441c:	2201      	movs	r2, #1
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4013      	ands	r3, r2
 800442e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	429a      	cmp	r2, r3
 8004436:	f040 8148 	bne.w	80046ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b01      	cmp	r3, #1
 8004444:	d005      	beq.n	8004452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800444e:	2b02      	cmp	r3, #2
 8004450:	d130      	bne.n	80044b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	2203      	movs	r2, #3
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	4013      	ands	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004488:	2201      	movs	r2, #1
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	091b      	lsrs	r3, r3, #4
 800449e:	f003 0201 	and.w	r2, r3, #1
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	2b03      	cmp	r3, #3
 80044be:	d017      	beq.n	80044f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	2203      	movs	r2, #3
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	43db      	mvns	r3, r3
 80044d2:	69ba      	ldr	r2, [r7, #24]
 80044d4:	4013      	ands	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 0303 	and.w	r3, r3, #3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d123      	bne.n	8004544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	08da      	lsrs	r2, r3, #3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3208      	adds	r2, #8
 8004504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	220f      	movs	r2, #15
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	43db      	mvns	r3, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4013      	ands	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	08da      	lsrs	r2, r3, #3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3208      	adds	r2, #8
 800453e:	69b9      	ldr	r1, [r7, #24]
 8004540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	2203      	movs	r2, #3
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	43db      	mvns	r3, r3
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	4013      	ands	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f003 0203 	and.w	r2, r3, #3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80a2 	beq.w	80046ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	4b57      	ldr	r3, [pc, #348]	; (80046e8 <HAL_GPIO_Init+0x2e8>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	4a56      	ldr	r2, [pc, #344]	; (80046e8 <HAL_GPIO_Init+0x2e8>)
 8004590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004594:	6453      	str	r3, [r2, #68]	; 0x44
 8004596:	4b54      	ldr	r3, [pc, #336]	; (80046e8 <HAL_GPIO_Init+0x2e8>)
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045a2:	4a52      	ldr	r2, [pc, #328]	; (80046ec <HAL_GPIO_Init+0x2ec>)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	089b      	lsrs	r3, r3, #2
 80045a8:	3302      	adds	r3, #2
 80045aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	220f      	movs	r2, #15
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a49      	ldr	r2, [pc, #292]	; (80046f0 <HAL_GPIO_Init+0x2f0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d019      	beq.n	8004602 <HAL_GPIO_Init+0x202>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a48      	ldr	r2, [pc, #288]	; (80046f4 <HAL_GPIO_Init+0x2f4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_GPIO_Init+0x1fe>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a47      	ldr	r2, [pc, #284]	; (80046f8 <HAL_GPIO_Init+0x2f8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00d      	beq.n	80045fa <HAL_GPIO_Init+0x1fa>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a46      	ldr	r2, [pc, #280]	; (80046fc <HAL_GPIO_Init+0x2fc>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <HAL_GPIO_Init+0x1f6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a45      	ldr	r2, [pc, #276]	; (8004700 <HAL_GPIO_Init+0x300>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_GPIO_Init+0x1f2>
 80045ee:	2304      	movs	r3, #4
 80045f0:	e008      	b.n	8004604 <HAL_GPIO_Init+0x204>
 80045f2:	2307      	movs	r3, #7
 80045f4:	e006      	b.n	8004604 <HAL_GPIO_Init+0x204>
 80045f6:	2303      	movs	r3, #3
 80045f8:	e004      	b.n	8004604 <HAL_GPIO_Init+0x204>
 80045fa:	2302      	movs	r3, #2
 80045fc:	e002      	b.n	8004604 <HAL_GPIO_Init+0x204>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_GPIO_Init+0x204>
 8004602:	2300      	movs	r3, #0
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	f002 0203 	and.w	r2, r2, #3
 800460a:	0092      	lsls	r2, r2, #2
 800460c:	4093      	lsls	r3, r2
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004614:	4935      	ldr	r1, [pc, #212]	; (80046ec <HAL_GPIO_Init+0x2ec>)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	3302      	adds	r3, #2
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004622:	4b38      	ldr	r3, [pc, #224]	; (8004704 <HAL_GPIO_Init+0x304>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	43db      	mvns	r3, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4013      	ands	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004646:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <HAL_GPIO_Init+0x304>)
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800464c:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_GPIO_Init+0x304>)
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	43db      	mvns	r3, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4013      	ands	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4313      	orrs	r3, r2
 800466e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004670:	4a24      	ldr	r2, [pc, #144]	; (8004704 <HAL_GPIO_Init+0x304>)
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004676:	4b23      	ldr	r3, [pc, #140]	; (8004704 <HAL_GPIO_Init+0x304>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	43db      	mvns	r3, r3
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	4013      	ands	r3, r2
 8004684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800469a:	4a1a      	ldr	r2, [pc, #104]	; (8004704 <HAL_GPIO_Init+0x304>)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046a0:	4b18      	ldr	r3, [pc, #96]	; (8004704 <HAL_GPIO_Init+0x304>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046c4:	4a0f      	ldr	r2, [pc, #60]	; (8004704 <HAL_GPIO_Init+0x304>)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	3301      	adds	r3, #1
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b0f      	cmp	r3, #15
 80046d4:	f67f aea2 	bls.w	800441c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	3724      	adds	r7, #36	; 0x24
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40013800 	.word	0x40013800
 80046f0:	40020000 	.word	0x40020000
 80046f4:	40020400 	.word	0x40020400
 80046f8:	40020800 	.word	0x40020800
 80046fc:	40020c00 	.word	0x40020c00
 8004700:	40021000 	.word	0x40021000
 8004704:	40013c00 	.word	0x40013c00

08004708 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470a:	b08f      	sub	sp, #60	; 0x3c
 800470c:	af0a      	add	r7, sp, #40	; 0x28
 800470e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e10f      	b.n	800493a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d106      	bne.n	800473a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f006 fa19 	bl	800ab6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2203      	movs	r2, #3
 800473e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f002 fcc0 	bl	80070de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	603b      	str	r3, [r7, #0]
 8004764:	687e      	ldr	r6, [r7, #4]
 8004766:	466d      	mov	r5, sp
 8004768:	f106 0410 	add.w	r4, r6, #16
 800476c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004774:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004778:	e885 0003 	stmia.w	r5, {r0, r1}
 800477c:	1d33      	adds	r3, r6, #4
 800477e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f002 fb97 	bl	8006eb4 <USB_CoreInit>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2202      	movs	r2, #2
 8004790:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0d0      	b.n	800493a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f002 fcae 	bl	8007100 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e04a      	b.n	8004840 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	333d      	adds	r3, #61	; 0x3d
 80047ba:	2201      	movs	r2, #1
 80047bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	333c      	adds	r3, #60	; 0x3c
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	b298      	uxth	r0, r3
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	3344      	adds	r3, #68	; 0x44
 80047e6:	4602      	mov	r2, r0
 80047e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	3340      	adds	r3, #64	; 0x40
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80047fe:	7bfa      	ldrb	r2, [r7, #15]
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	4613      	mov	r3, r2
 8004804:	00db      	lsls	r3, r3, #3
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	440b      	add	r3, r1
 800480c:	3348      	adds	r3, #72	; 0x48
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	334c      	adds	r3, #76	; 0x4c
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004826:	7bfa      	ldrb	r2, [r7, #15]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3354      	adds	r3, #84	; 0x54
 8004836:	2200      	movs	r2, #0
 8004838:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	3301      	adds	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	7bfa      	ldrb	r2, [r7, #15]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d3af      	bcc.n	80047aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]
 800484e:	e044      	b.n	80048da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004850:	7bfa      	ldrb	r2, [r7, #15]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004866:	7bfa      	ldrb	r2, [r7, #15]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	4413      	add	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004878:	7bfa      	ldrb	r2, [r7, #15]
 800487a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800487c:	7bfa      	ldrb	r2, [r7, #15]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	4413      	add	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	4613      	mov	r3, r2
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048a8:	7bfa      	ldrb	r2, [r7, #15]
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	440b      	add	r3, r1
 80048b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	3301      	adds	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d3b5      	bcc.n	8004850 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	687e      	ldr	r6, [r7, #4]
 80048ec:	466d      	mov	r5, sp
 80048ee:	f106 0410 	add.w	r4, r6, #16
 80048f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004902:	1d33      	adds	r3, r6, #4
 8004904:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004906:	6838      	ldr	r0, [r7, #0]
 8004908:	f002 fc46 	bl	8007198 <USB_DevInit>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d005      	beq.n	800491e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e00d      	b.n	800493a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f003 fd95 	bl	8008462 <USB_DevDisconnect>

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004942 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_PCD_Start+0x1c>
 800495a:	2302      	movs	r3, #2
 800495c:	e020      	b.n	80049a0 <HAL_PCD_Start+0x5e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	2b01      	cmp	r3, #1
 800496c:	d109      	bne.n	8004982 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004972:	2b01      	cmp	r3, #1
 8004974:	d005      	beq.n	8004982 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4618      	mov	r0, r3
 8004988:	f002 fb98 	bl	80070bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4618      	mov	r0, r3
 8004992:	f003 fd45 	bl	8008420 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b08d      	sub	sp, #52	; 0x34
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f003 fe03 	bl	80085ca <USB_GetMode>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f040 848a 	bne.w	80052e0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f003 fd67 	bl	80084a4 <USB_ReadInterrupts>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 8480 	beq.w	80052de <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	0a1b      	lsrs	r3, r3, #8
 80049e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f003 fd54 	bl	80084a4 <USB_ReadInterrupts>
 80049fc:	4603      	mov	r3, r0
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d107      	bne.n	8004a16 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f002 0202 	and.w	r2, r2, #2
 8004a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f003 fd42 	bl	80084a4 <USB_ReadInterrupts>
 8004a20:	4603      	mov	r3, r0
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d161      	bne.n	8004aee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	699a      	ldr	r2, [r3, #24]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0210 	bic.w	r2, r2, #16
 8004a38:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	f003 020f 	and.w	r2, r3, #15
 8004a46:	4613      	mov	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	3304      	adds	r3, #4
 8004a58:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	0c5b      	lsrs	r3, r3, #17
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d124      	bne.n	8004ab0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d035      	beq.n	8004ade <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	6a38      	ldr	r0, [r7, #32]
 8004a86:	f003 fb79 	bl	800817c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	091b      	lsrs	r3, r3, #4
 8004a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a96:	441a      	add	r2, r3
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	6a1a      	ldr	r2, [r3, #32]
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004aa8:	441a      	add	r2, r3
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	621a      	str	r2, [r3, #32]
 8004aae:	e016      	b.n	8004ade <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	0c5b      	lsrs	r3, r3, #17
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	2b06      	cmp	r3, #6
 8004aba:	d110      	bne.n	8004ade <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ac2:	2208      	movs	r2, #8
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	6a38      	ldr	r0, [r7, #32]
 8004ac8:	f003 fb58 	bl	800817c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	091b      	lsrs	r3, r3, #4
 8004ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ad8:	441a      	add	r2, r3
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699a      	ldr	r2, [r3, #24]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0210 	orr.w	r2, r2, #16
 8004aec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f003 fcd6 	bl	80084a4 <USB_ReadInterrupts>
 8004af8:	4603      	mov	r3, r0
 8004afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004afe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b02:	f040 80a7 	bne.w	8004c54 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f003 fcdb 	bl	80084ca <USB_ReadDevAllOutEpInterrupt>
 8004b14:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004b16:	e099      	b.n	8004c4c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 808e 	beq.w	8004c40 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fcff 	bl	8008532 <USB_ReadDevOutEPInterrupt>
 8004b34:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00c      	beq.n	8004b5a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2301      	movs	r3, #1
 8004b50:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fec3 	bl	80058e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00c      	beq.n	8004b7e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	461a      	mov	r2, r3
 8004b72:	2308      	movs	r3, #8
 8004b74:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004b76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 ff99 	bl	8005ab0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d008      	beq.n	8004b9a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	015a      	lsls	r2, r3, #5
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	4413      	add	r3, r2
 8004b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b94:	461a      	mov	r2, r3
 8004b96:	2310      	movs	r3, #16
 8004b98:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d030      	beq.n	8004c06 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d109      	bne.n	8004bc4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	69fa      	ldr	r2, [r7, #28]
 8004bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bc2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3304      	adds	r3, #4
 8004bd8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	78db      	ldrb	r3, [r3, #3]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d108      	bne.n	8004bf4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f006 f8c2 	bl	800ad78 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	461a      	mov	r2, r3
 8004c02:	2302      	movs	r3, #2
 8004c04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d008      	beq.n	8004c22 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	015a      	lsls	r2, r3, #5
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	4413      	add	r3, r2
 8004c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2320      	movs	r3, #32
 8004c20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d009      	beq.n	8004c40 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	461a      	mov	r2, r3
 8004c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	3301      	adds	r3, #1
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f47f af62 	bne.w	8004b18 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f003 fc23 	bl	80084a4 <USB_ReadInterrupts>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c68:	f040 80db 	bne.w	8004e22 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f003 fc44 	bl	80084fe <USB_ReadDevAllInEpInterrupt>
 8004c76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004c7c:	e0cd      	b.n	8004e1a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80c2 	beq.w	8004e0e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f003 fc6a 	bl	800856e <USB_ReadDevInEPInterrupt>
 8004c9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d057      	beq.n	8004d56 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	2201      	movs	r2, #1
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69f9      	ldr	r1, [r7, #28]
 8004cc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	2301      	movs	r3, #1
 8004cda:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d132      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce8:	4613      	mov	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4413      	add	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	334c      	adds	r3, #76	; 0x4c
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4403      	add	r3, r0
 8004d04:	3348      	adds	r3, #72	; 0x48
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4419      	add	r1, r3
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d0e:	4613      	mov	r3, r2
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4403      	add	r3, r0
 8004d18:	334c      	adds	r3, #76	; 0x4c
 8004d1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d113      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x3a2>
 8004d22:	6879      	ldr	r1, [r7, #4]
 8004d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d26:	4613      	mov	r3, r2
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	440b      	add	r3, r1
 8004d30:	3354      	adds	r3, #84	; 0x54
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d108      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6818      	ldr	r0, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d42:	461a      	mov	r2, r3
 8004d44:	2101      	movs	r1, #1
 8004d46:	f003 fc71 	bl	800862c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f005 ff8c 	bl	800ac6e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	015a      	lsls	r2, r3, #5
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	4413      	add	r3, r2
 8004d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2308      	movs	r3, #8
 8004d70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f003 0310 	and.w	r3, r3, #16
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	461a      	mov	r2, r3
 8004da6:	2340      	movs	r3, #64	; 0x40
 8004da8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d023      	beq.n	8004dfc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004db4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004db6:	6a38      	ldr	r0, [r7, #32]
 8004db8:	f002 fb52 	bl	8007460 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	3338      	adds	r3, #56	; 0x38
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4413      	add	r3, r2
 8004dcc:	3304      	adds	r3, #4
 8004dce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	78db      	ldrb	r3, [r3, #3]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	4619      	mov	r1, r3
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f005 ffd9 	bl	800ad9c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df6:	461a      	mov	r2, r3
 8004df8:	2302      	movs	r3, #2
 8004dfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fcdb 	bl	80057c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	3301      	adds	r3, #1
 8004e12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f47f af2e 	bne.w	8004c7e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f003 fb3c 	bl	80084a4 <USB_ReadInterrupts>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e36:	d122      	bne.n	8004e7e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d108      	bne.n	8004e68 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fec3 	bl	8005bec <HAL_PCDEx_LPM_Callback>
 8004e66:	e002      	b.n	8004e6e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f005 ff77 	bl	800ad5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695a      	ldr	r2, [r3, #20]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004e7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f003 fb0e 	bl	80084a4 <USB_ReadInterrupts>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e92:	d112      	bne.n	8004eba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d102      	bne.n	8004eaa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f005 ff33 	bl	800ad10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004eb8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f003 faf0 	bl	80084a4 <USB_ReadInterrupts>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ece:	f040 80b7 	bne.w	8005040 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	69fa      	ldr	r2, [r7, #28]
 8004edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2110      	movs	r1, #16
 8004eec:	4618      	mov	r0, r3
 8004eee:	f002 fab7 	bl	8007460 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ef6:	e046      	b.n	8004f86 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f04:	461a      	mov	r2, r3
 8004f06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f0a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2e:	015a      	lsls	r2, r3, #5
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	4413      	add	r3, r2
 8004f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f38:	461a      	mov	r2, r3
 8004f3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f70:	0151      	lsls	r1, r2, #5
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	440a      	add	r2, r1
 8004f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f82:	3301      	adds	r3, #1
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d3b3      	bcc.n	8004ef8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f9e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004fa2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d016      	beq.n	8004fda <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fbc:	f043 030b 	orr.w	r3, r3, #11
 8004fc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fd2:	f043 030b 	orr.w	r3, r3, #11
 8004fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8004fd8:	e015      	b.n	8005006 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004ff0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	69fa      	ldr	r2, [r7, #28]
 8004ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005000:	f043 030b 	orr.w	r3, r3, #11
 8005004:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005014:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005018:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800502a:	461a      	mov	r2, r3
 800502c:	f003 fafe 	bl	800862c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800503e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f003 fa2d 	bl	80084a4 <USB_ReadInterrupts>
 800504a:	4603      	mov	r3, r0
 800504c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005054:	d124      	bne.n	80050a0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f003 fac3 	bl	80085e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4618      	mov	r0, r3
 8005066:	f002 fa78 	bl	800755a <USB_GetDevSpeed>
 800506a:	4603      	mov	r3, r0
 800506c:	461a      	mov	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681c      	ldr	r4, [r3, #0]
 8005076:	f000 fdc5 	bl	8005c04 <HAL_RCC_GetHCLKFreq>
 800507a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	4620      	mov	r0, r4
 8005086:	f001 ff77 	bl	8006f78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f005 fe17 	bl	800acbe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800509e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f003 f9fd 	bl	80084a4 <USB_ReadInterrupts>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d10a      	bne.n	80050ca <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f005 fdf4 	bl	800aca2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f002 0208 	and.w	r2, r2, #8
 80050c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f003 f9e8 	bl	80084a4 <USB_ReadInterrupts>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b80      	cmp	r3, #128	; 0x80
 80050dc:	d122      	bne.n	8005124 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80050ea:	2301      	movs	r3, #1
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	e014      	b.n	800511a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f4:	4613      	mov	r3, r2
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	b2db      	uxtb	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fb27 	bl	8005762 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3301      	adds	r3, #1
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005120:	429a      	cmp	r2, r3
 8005122:	d3e5      	bcc.n	80050f0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f003 f9bb 	bl	80084a4 <USB_ReadInterrupts>
 800512e:	4603      	mov	r3, r0
 8005130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005138:	d13b      	bne.n	80051b2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800513a:	2301      	movs	r3, #1
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
 800513e:	e02b      	b.n	8005198 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	4613      	mov	r3, r2
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	440b      	add	r3, r1
 800515e:	3340      	adds	r3, #64	; 0x40
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d115      	bne.n	8005192 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005166:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005168:	2b00      	cmp	r3, #0
 800516a:	da12      	bge.n	8005192 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	333f      	adds	r3, #63	; 0x3f
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	b2db      	uxtb	r3, r3
 8005184:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005188:	b2db      	uxtb	r3, r3
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fae8 	bl	8005762 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005194:	3301      	adds	r3, #1
 8005196:	627b      	str	r3, [r7, #36]	; 0x24
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519e:	429a      	cmp	r2, r3
 80051a0:	d3ce      	bcc.n	8005140 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80051b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f003 f974 	bl	80084a4 <USB_ReadInterrupts>
 80051bc:	4603      	mov	r3, r0
 80051be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051c6:	d155      	bne.n	8005274 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051c8:	2301      	movs	r3, #1
 80051ca:	627b      	str	r3, [r7, #36]	; 0x24
 80051cc:	e045      	b.n	800525a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e2:	4613      	mov	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4413      	add	r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d12e      	bne.n	8005254 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80051f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	da2b      	bge.n	8005254 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005208:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800520c:	429a      	cmp	r2, r3
 800520e:	d121      	bne.n	8005254 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800524c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005250:	6053      	str	r3, [r2, #4]
            break;
 8005252:	e007      	b.n	8005264 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	3301      	adds	r3, #1
 8005258:	627b      	str	r3, [r7, #36]	; 0x24
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005260:	429a      	cmp	r2, r3
 8005262:	d3b4      	bcc.n	80051ce <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695a      	ldr	r2, [r3, #20]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4618      	mov	r0, r3
 800527a:	f003 f913 	bl	80084a4 <USB_ReadInterrupts>
 800527e:	4603      	mov	r3, r0
 8005280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d10a      	bne.n	80052a0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f005 fd98 	bl	800adc0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800529e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f003 f8fd 	bl	80084a4 <USB_ReadInterrupts>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d115      	bne.n	80052e0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	f003 0304 	and.w	r3, r3, #4
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f005 fd88 	bl	800addc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69ba      	ldr	r2, [r7, #24]
 80052d8:	430a      	orrs	r2, r1
 80052da:	605a      	str	r2, [r3, #4]
 80052dc:	e000      	b.n	80052e0 <HAL_PCD_IRQHandler+0x938>
      return;
 80052de:	bf00      	nop
    }
  }
}
 80052e0:	3734      	adds	r7, #52	; 0x34
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}

080052e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
 80052ee:	460b      	mov	r3, r1
 80052f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d101      	bne.n	8005300 <HAL_PCD_SetAddress+0x1a>
 80052fc:	2302      	movs	r3, #2
 80052fe:	e013      	b.n	8005328 <HAL_PCD_SetAddress+0x42>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	78fa      	ldrb	r2, [r7, #3]
 800530c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	4611      	mov	r1, r2
 8005318:	4618      	mov	r0, r3
 800531a:	f003 f85b 	bl	80083d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	4608      	mov	r0, r1
 800533a:	4611      	mov	r1, r2
 800533c:	461a      	mov	r2, r3
 800533e:	4603      	mov	r3, r0
 8005340:	70fb      	strb	r3, [r7, #3]
 8005342:	460b      	mov	r3, r1
 8005344:	803b      	strh	r3, [r7, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800534e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005352:	2b00      	cmp	r3, #0
 8005354:	da0f      	bge.n	8005376 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 020f 	and.w	r2, r3, #15
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	3338      	adds	r3, #56	; 0x38
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	4413      	add	r3, r2
 800536a:	3304      	adds	r3, #4
 800536c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	705a      	strb	r2, [r3, #1]
 8005374:	e00f      	b.n	8005396 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005376:	78fb      	ldrb	r3, [r7, #3]
 8005378:	f003 020f 	and.w	r2, r3, #15
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	4413      	add	r3, r2
 800538c:	3304      	adds	r3, #4
 800538e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	b2da      	uxtb	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053a2:	883a      	ldrh	r2, [r7, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	78ba      	ldrb	r2, [r7, #2]
 80053ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d004      	beq.n	80053c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053c0:	78bb      	ldrb	r3, [r7, #2]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d102      	bne.n	80053cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_PCD_EP_Open+0xaa>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e00e      	b.n	80053f8 <HAL_PCD_EP_Open+0xc8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68f9      	ldr	r1, [r7, #12]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 f8db 	bl	80075a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80053f6:	7afb      	ldrb	r3, [r7, #11]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	460b      	mov	r3, r1
 800540a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800540c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005410:	2b00      	cmp	r3, #0
 8005412:	da0f      	bge.n	8005434 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	f003 020f 	and.w	r2, r3, #15
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	3338      	adds	r3, #56	; 0x38
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	4413      	add	r3, r2
 8005428:	3304      	adds	r3, #4
 800542a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2201      	movs	r2, #1
 8005430:	705a      	strb	r2, [r3, #1]
 8005432:	e00f      	b.n	8005454 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	f003 020f 	and.w	r2, r3, #15
 800543a:	4613      	mov	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4413      	add	r3, r2
 800544a:	3304      	adds	r3, #4
 800544c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_PCD_EP_Close+0x6e>
 800546a:	2302      	movs	r3, #2
 800546c:	e00e      	b.n	800548c <HAL_PCD_EP_Close+0x8c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68f9      	ldr	r1, [r7, #12]
 800547c:	4618      	mov	r0, r3
 800547e:	f002 f919 	bl	80076b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	460b      	mov	r3, r1
 80054a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054a4:	7afb      	ldrb	r3, [r7, #11]
 80054a6:	f003 020f 	and.w	r2, r3, #15
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	3304      	adds	r3, #4
 80054bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2200      	movs	r2, #0
 80054ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2200      	movs	r2, #0
 80054d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d102      	bne.n	80054f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054f0:	7afb      	ldrb	r3, [r7, #11]
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d109      	bne.n	800550e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	6979      	ldr	r1, [r7, #20]
 8005508:	f002 fbf8 	bl	8007cfc <USB_EP0StartXfer>
 800550c:	e008      	b.n	8005520 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	6979      	ldr	r1, [r7, #20]
 800551c:	f002 f9a6 	bl	800786c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005536:	78fb      	ldrb	r3, [r7, #3]
 8005538:	f003 020f 	and.w	r2, r3, #15
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800554c:	681b      	ldr	r3, [r3, #0]
}
 800554e:	4618      	mov	r0, r3
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	603b      	str	r3, [r7, #0]
 8005566:	460b      	mov	r3, r1
 8005568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556a:	7afb      	ldrb	r3, [r7, #11]
 800556c:	f003 020f 	and.w	r2, r3, #15
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	3338      	adds	r3, #56	; 0x38
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2201      	movs	r2, #1
 8005598:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d102      	bne.n	80055b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055b4:	7afb      	ldrb	r3, [r7, #11]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6979      	ldr	r1, [r7, #20]
 80055cc:	f002 fb96 	bl	8007cfc <USB_EP0StartXfer>
 80055d0:	e008      	b.n	80055e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	6979      	ldr	r1, [r7, #20]
 80055e0:	f002 f944 	bl	800786c <USB_EPStartXfer>
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	460b      	mov	r3, r1
 80055f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80055fa:	78fb      	ldrb	r3, [r7, #3]
 80055fc:	f003 020f 	and.w	r2, r3, #15
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d901      	bls.n	800560c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e050      	b.n	80056ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800560c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005610:	2b00      	cmp	r3, #0
 8005612:	da0f      	bge.n	8005634 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005614:	78fb      	ldrb	r3, [r7, #3]
 8005616:	f003 020f 	and.w	r2, r3, #15
 800561a:	4613      	mov	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	3338      	adds	r3, #56	; 0x38
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	4413      	add	r3, r2
 8005628:	3304      	adds	r3, #4
 800562a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	705a      	strb	r2, [r3, #1]
 8005632:	e00d      	b.n	8005650 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	4613      	mov	r3, r2
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4413      	add	r3, r2
 8005646:	3304      	adds	r3, #4
 8005648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	b2da      	uxtb	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005668:	2b01      	cmp	r3, #1
 800566a:	d101      	bne.n	8005670 <HAL_PCD_EP_SetStall+0x82>
 800566c:	2302      	movs	r3, #2
 800566e:	e01e      	b.n	80056ae <HAL_PCD_EP_SetStall+0xc0>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68f9      	ldr	r1, [r7, #12]
 800567e:	4618      	mov	r0, r3
 8005680:	f002 fdd4 	bl	800822c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6818      	ldr	r0, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	b2d9      	uxtb	r1, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800569e:	461a      	mov	r2, r3
 80056a0:	f002 ffc4 	bl	800862c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056c2:	78fb      	ldrb	r3, [r7, #3]
 80056c4:	f003 020f 	and.w	r2, r3, #15
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d901      	bls.n	80056d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e042      	b.n	800575a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	da0f      	bge.n	80056fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	f003 020f 	and.w	r2, r3, #15
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	4413      	add	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	3338      	adds	r3, #56	; 0x38
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	4413      	add	r3, r2
 80056f0:	3304      	adds	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2201      	movs	r2, #1
 80056f8:	705a      	strb	r2, [r3, #1]
 80056fa:	e00f      	b.n	800571c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056fc:	78fb      	ldrb	r3, [r7, #3]
 80056fe:	f003 020f 	and.w	r2, r3, #15
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4413      	add	r3, r2
 8005712:	3304      	adds	r3, #4
 8005714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005722:	78fb      	ldrb	r3, [r7, #3]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	b2da      	uxtb	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_PCD_EP_ClrStall+0x86>
 8005738:	2302      	movs	r3, #2
 800573a:	e00e      	b.n	800575a <HAL_PCD_EP_ClrStall+0xa4>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68f9      	ldr	r1, [r7, #12]
 800574a:	4618      	mov	r0, r3
 800574c:	f002 fddc 	bl	8008308 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005762:	b580      	push	{r7, lr}
 8005764:	b084      	sub	sp, #16
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	460b      	mov	r3, r1
 800576c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800576e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005772:	2b00      	cmp	r3, #0
 8005774:	da0c      	bge.n	8005790 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005776:	78fb      	ldrb	r3, [r7, #3]
 8005778:	f003 020f 	and.w	r2, r3, #15
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	009b      	lsls	r3, r3, #2
 8005784:	3338      	adds	r3, #56	; 0x38
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	4413      	add	r3, r2
 800578a:	3304      	adds	r3, #4
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	e00c      	b.n	80057aa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	f003 020f 	and.w	r2, r3, #15
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68f9      	ldr	r1, [r7, #12]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f002 fbfb 	bl	8007fac <USB_EPStopXfer>
 80057b6:	4603      	mov	r3, r0
 80057b8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80057ba:	7afb      	ldrb	r3, [r7, #11]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	; 0x28
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80057d8:	683a      	ldr	r2, [r7, #0]
 80057da:	4613      	mov	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	3338      	adds	r3, #56	; 0x38
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6a1a      	ldr	r2, [r3, #32]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d901      	bls.n	80057fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e06c      	b.n	80058d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699a      	ldr	r2, [r3, #24]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	69fa      	ldr	r2, [r7, #28]
 800580e:	429a      	cmp	r2, r3
 8005810:	d902      	bls.n	8005818 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	3303      	adds	r3, #3
 800581c:	089b      	lsrs	r3, r3, #2
 800581e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005820:	e02b      	b.n	800587a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	429a      	cmp	r2, r3
 8005836:	d902      	bls.n	800583e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	3303      	adds	r3, #3
 8005842:	089b      	lsrs	r3, r3, #2
 8005844:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6919      	ldr	r1, [r3, #16]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	b2da      	uxtb	r2, r3
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005856:	b2db      	uxtb	r3, r3
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4603      	mov	r3, r0
 800585c:	6978      	ldr	r0, [r7, #20]
 800585e:	f002 fc4f 	bl	8008100 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	691a      	ldr	r2, [r3, #16]
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	441a      	add	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6a1a      	ldr	r2, [r3, #32]
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	b29b      	uxth	r3, r3
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	429a      	cmp	r2, r3
 800588e:	d809      	bhi.n	80058a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a1a      	ldr	r2, [r3, #32]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005898:	429a      	cmp	r2, r3
 800589a:	d203      	bcs.n	80058a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1be      	bne.n	8005822 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d811      	bhi.n	80058d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	2201      	movs	r2, #1
 80058b8:	fa02 f303 	lsl.w	r3, r2, r3
 80058bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	43db      	mvns	r3, r3
 80058ca:	6939      	ldr	r1, [r7, #16]
 80058cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058d0:	4013      	ands	r3, r2
 80058d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
	...

080058e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	333c      	adds	r3, #60	; 0x3c
 80058f8:	3304      	adds	r3, #4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d17b      	bne.n	8005a0e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b00      	cmp	r3, #0
 800591e:	d015      	beq.n	800594c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4a61      	ldr	r2, [pc, #388]	; (8005aa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	f240 80b9 	bls.w	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 80b3 	beq.w	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	461a      	mov	r2, r3
 8005944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005948:	6093      	str	r3, [r2, #8]
 800594a:	e0a7      	b.n	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	f003 0320 	and.w	r3, r3, #32
 8005952:	2b00      	cmp	r3, #0
 8005954:	d009      	beq.n	800596a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	461a      	mov	r2, r3
 8005964:	2320      	movs	r3, #32
 8005966:	6093      	str	r3, [r2, #8]
 8005968:	e098      	b.n	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005970:	2b00      	cmp	r3, #0
 8005972:	f040 8093 	bne.w	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	4a4b      	ldr	r2, [pc, #300]	; (8005aa8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d90f      	bls.n	800599e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005994:	461a      	mov	r2, r3
 8005996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800599a:	6093      	str	r3, [r2, #8]
 800599c:	e07e      	b.n	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	4613      	mov	r3, r2
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	4413      	add	r3, r2
 80059b0:	3304      	adds	r3, #4
 80059b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	0159      	lsls	r1, r3, #5
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	440b      	add	r3, r1
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ca:	1ad2      	subs	r2, r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d114      	bne.n	8005a00 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6818      	ldr	r0, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80059e8:	461a      	mov	r2, r3
 80059ea:	2101      	movs	r1, #1
 80059ec:	f002 fe1e 	bl	800862c <USB_EP0_OutStart>
 80059f0:	e006      	b.n	8005a00 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	691a      	ldr	r2, [r3, #16]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	441a      	add	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f005 f916 	bl	800ac38 <HAL_PCD_DataOutStageCallback>
 8005a0c:	e046      	b.n	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d124      	bne.n	8005a60 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a32:	6093      	str	r3, [r2, #8]
 8005a34:	e032      	b.n	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f003 0320 	and.w	r3, r3, #32
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d008      	beq.n	8005a52 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	2320      	movs	r3, #32
 8005a50:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f005 f8ed 	bl	800ac38 <HAL_PCD_DataOutStageCallback>
 8005a5e:	e01d      	b.n	8005a9c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d114      	bne.n	8005a90 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d108      	bne.n	8005a90 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a88:	461a      	mov	r2, r3
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	f002 fdce 	bl	800862c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f005 f8ce 	bl	800ac38 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	4f54300a 	.word	0x4f54300a
 8005aac:	4f54310a 	.word	0x4f54310a

08005ab0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	333c      	adds	r3, #60	; 0x3c
 8005ac8:	3304      	adds	r3, #4
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d90e      	bls.n	8005b04 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d009      	beq.n	8005b04 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005afc:	461a      	mov	r2, r3
 8005afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b02:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f005 f885 	bl	800ac14 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	; (8005b38 <PCD_EP_OutSetupPacket_int+0x88>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d90c      	bls.n	8005b2c <PCD_EP_OutSetupPacket_int+0x7c>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d108      	bne.n	8005b2c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b24:	461a      	mov	r2, r3
 8005b26:	2101      	movs	r1, #1
 8005b28:	f002 fd80 	bl	800862c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	4f54300a 	.word	0x4f54300a

08005b3c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	70fb      	strb	r3, [r7, #3]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b54:	78fb      	ldrb	r3, [r7, #3]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b5a:	883b      	ldrh	r3, [r7, #0]
 8005b5c:	0419      	lsls	r1, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	629a      	str	r2, [r3, #40]	; 0x28
 8005b68:	e028      	b.n	8005bbc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	0c1b      	lsrs	r3, r3, #16
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	4413      	add	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	e00d      	b.n	8005b9a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	3340      	adds	r3, #64	; 0x40
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4413      	add	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	3301      	adds	r3, #1
 8005b98:	73fb      	strb	r3, [r7, #15]
 8005b9a:	7bfa      	ldrb	r2, [r7, #15]
 8005b9c:	78fb      	ldrb	r3, [r7, #3]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d3ec      	bcc.n	8005b7e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ba4:	883b      	ldrh	r3, [r7, #0]
 8005ba6:	0418      	lsls	r0, r3, #16
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6819      	ldr	r1, [r3, #0]
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	4302      	orrs	r2, r0
 8005bb4:	3340      	adds	r3, #64	; 0x40
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005bca:	b480      	push	{r7}
 8005bcc:	b083      	sub	sp, #12
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	887a      	ldrh	r2, [r7, #2]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005bf8:	bf00      	nop
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c08:	4b03      	ldr	r3, [pc, #12]	; (8005c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20000004 	.word	0x20000004

08005c1c <LL_EXTI_EnableIT_0_31>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <LL_EXTI_EnableIT_0_31+0x20>)
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	4904      	ldr	r1, [pc, #16]	; (8005c3c <LL_EXTI_EnableIT_0_31+0x20>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	600b      	str	r3, [r1, #0]
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	40013c00 	.word	0x40013c00

08005c40 <LL_EXTI_DisableIT_0_31>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <LL_EXTI_DisableIT_0_31+0x24>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	4904      	ldr	r1, [pc, #16]	; (8005c64 <LL_EXTI_DisableIT_0_31+0x24>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40013c00 	.word	0x40013c00

08005c68 <LL_EXTI_EnableEvent_0_31>:
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8005c70:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005c72:	685a      	ldr	r2, [r3, #4]
 8005c74:	4904      	ldr	r1, [pc, #16]	; (8005c88 <LL_EXTI_EnableEvent_0_31+0x20>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	604b      	str	r3, [r1, #4]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	40013c00 	.word	0x40013c00

08005c8c <LL_EXTI_DisableEvent_0_31>:
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8005c94:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	4904      	ldr	r1, [pc, #16]	; (8005cb0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	604b      	str	r3, [r1, #4]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40013c00 	.word	0x40013c00

08005cb4 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8005cbc:	4b05      	ldr	r3, [pc, #20]	; (8005cd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	4904      	ldr	r1, [pc, #16]	; (8005cd4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	608b      	str	r3, [r1, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	40013c00 	.word	0x40013c00

08005cd8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	43db      	mvns	r3, r3
 8005ce8:	4904      	ldr	r1, [pc, #16]	; (8005cfc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	608b      	str	r3, [r1, #8]
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40013c00 	.word	0x40013c00

08005d00 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	4904      	ldr	r1, [pc, #16]	; (8005d20 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60cb      	str	r3, [r1, #12]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40013c00 	.word	0x40013c00

08005d24 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	43db      	mvns	r3, r3
 8005d34:	4904      	ldr	r1, [pc, #16]	; (8005d48 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8005d36:	4013      	ands	r3, r2
 8005d38:	60cb      	str	r3, [r1, #12]
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	40013c00 	.word	0x40013c00

08005d4c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	791b      	ldrb	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d065      	beq.n	8005e2c <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d06c      	beq.n	8005e42 <LL_EXTI_Init+0xf6>
    {
      switch (EXTI_InitStruct->Mode)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	795b      	ldrb	r3, [r3, #5]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d01c      	beq.n	8005daa <LL_EXTI_Init+0x5e>
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	dc25      	bgt.n	8005dc0 <LL_EXTI_Init+0x74>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <LL_EXTI_Init+0x32>
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d00b      	beq.n	8005d94 <LL_EXTI_Init+0x48>
 8005d7c:	e020      	b.n	8005dc0 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff ff82 	bl	8005c8c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ff45 	bl	8005c1c <LL_EXTI_EnableIT_0_31>
          break;
 8005d92:	e018      	b.n	8005dc6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff ff51 	bl	8005c40 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff ff60 	bl	8005c68 <LL_EXTI_EnableEvent_0_31>
          break;
 8005da8:	e00d      	b.n	8005dc6 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff ff34 	bl	8005c1c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ff55 	bl	8005c68 <LL_EXTI_EnableEvent_0_31>
          break;
 8005dbe:	e002      	b.n	8005dc6 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
          break;
 8005dc4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	799b      	ldrb	r3, [r3, #6]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d039      	beq.n	8005e42 <LL_EXTI_Init+0xf6>
      {
        switch (EXTI_InitStruct->Trigger)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	799b      	ldrb	r3, [r3, #6]
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d01c      	beq.n	8005e10 <LL_EXTI_Init+0xc4>
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	dc25      	bgt.n	8005e26 <LL_EXTI_Init+0xda>
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d002      	beq.n	8005de4 <LL_EXTI_Init+0x98>
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d00b      	beq.n	8005dfa <LL_EXTI_Init+0xae>
 8005de2:	e020      	b.n	8005e26 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7ff ff9b 	bl	8005d24 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ff5e 	bl	8005cb4 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8005df8:	e024      	b.n	8005e44 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff ff6a 	bl	8005cd8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff ff79 	bl	8005d00 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005e0e:	e019      	b.n	8005e44 <LL_EXTI_Init+0xf8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff ff4d 	bl	8005cb4 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff ff6e 	bl	8005d00 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8005e24:	e00e      	b.n	8005e44 <LL_EXTI_Init+0xf8>
          default:
            status = ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	73fb      	strb	r3, [r7, #15]
            break;
 8005e2a:	e00b      	b.n	8005e44 <LL_EXTI_Init+0xf8>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f7ff ff05 	bl	8005c40 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7ff ff26 	bl	8005c8c <LL_EXTI_DisableEvent_0_31>
 8005e40:	e000      	b.n	8005e44 <LL_EXTI_Init+0xf8>
      }
 8005e42:	bf00      	nop
  }
  return status;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <LL_GPIO_SetPinMode>:
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b089      	sub	sp, #36	; 0x24
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	60f8      	str	r0, [r7, #12]
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	fa93 f3a3 	rbit	r3, r3
 8005e68:	613b      	str	r3, [r7, #16]
  return result;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	fab3 f383 	clz	r3, r3
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	2103      	movs	r1, #3
 8005e76:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7a:	43db      	mvns	r3, r3
 8005e7c:	401a      	ands	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	fa93 f3a3 	rbit	r3, r3
 8005e88:	61bb      	str	r3, [r7, #24]
  return result;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	fab3 f383 	clz	r3, r3
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	005b      	lsls	r3, r3, #1
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	601a      	str	r2, [r3, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	3724      	adds	r7, #36	; 0x24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_GPIO_SetPinOutputType>:
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	401a      	ands	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6879      	ldr	r1, [r7, #4]
 8005ec6:	fb01 f303 	mul.w	r3, r1, r3
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <LL_GPIO_SetPinSpeed>:
{
 8005edc:	b480      	push	{r7}
 8005ede:	b089      	sub	sp, #36	; 0x24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	60f8      	str	r0, [r7, #12]
 8005ee4:	60b9      	str	r1, [r7, #8]
 8005ee6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	fa93 f3a3 	rbit	r3, r3
 8005ef6:	613b      	str	r3, [r7, #16]
  return result;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	fab3 f383 	clz	r3, r3
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	2103      	movs	r1, #3
 8005f04:	fa01 f303 	lsl.w	r3, r1, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	401a      	ands	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	fa93 f3a3 	rbit	r3, r3
 8005f16:	61bb      	str	r3, [r7, #24]
  return result;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	fab3 f383 	clz	r3, r3
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	005b      	lsls	r3, r3, #1
 8005f22:	6879      	ldr	r1, [r7, #4]
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	431a      	orrs	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	609a      	str	r2, [r3, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	3724      	adds	r7, #36	; 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <LL_GPIO_SetPinPull>:
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b089      	sub	sp, #36	; 0x24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	fa93 f3a3 	rbit	r3, r3
 8005f54:	613b      	str	r3, [r7, #16]
  return result;
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	fab3 f383 	clz	r3, r3
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	2103      	movs	r1, #3
 8005f62:	fa01 f303 	lsl.w	r3, r1, r3
 8005f66:	43db      	mvns	r3, r3
 8005f68:	401a      	ands	r2, r3
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	fa93 f3a3 	rbit	r3, r3
 8005f74:	61bb      	str	r3, [r7, #24]
  return result;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	fab3 f383 	clz	r3, r3
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	005b      	lsls	r3, r3, #1
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	fa01 f303 	lsl.w	r3, r1, r3
 8005f86:	431a      	orrs	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	60da      	str	r2, [r3, #12]
}
 8005f8c:	bf00      	nop
 8005f8e:	3724      	adds	r7, #36	; 0x24
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_GPIO_SetAFPin_0_7>:
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b089      	sub	sp, #36	; 0x24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6a1a      	ldr	r2, [r3, #32]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	fa93 f3a3 	rbit	r3, r3
 8005fb2:	613b      	str	r3, [r7, #16]
  return result;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	fab3 f383 	clz	r3, r3
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	210f      	movs	r1, #15
 8005fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	fa93 f3a3 	rbit	r3, r3
 8005fd2:	61bb      	str	r3, [r7, #24]
  return result;
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	fab3 f383 	clz	r3, r3
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	621a      	str	r2, [r3, #32]
}
 8005fea:	bf00      	nop
 8005fec:	3724      	adds	r7, #36	; 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr

08005ff6 <LL_GPIO_SetAFPin_8_15>:
{
 8005ff6:	b480      	push	{r7}
 8005ff8:	b089      	sub	sp, #36	; 0x24
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	60f8      	str	r0, [r7, #12]
 8005ffe:	60b9      	str	r1, [r7, #8]
 8006000:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	0a1b      	lsrs	r3, r3, #8
 800600a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	613b      	str	r3, [r7, #16]
  return result;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	fab3 f383 	clz	r3, r3
 800601a:	b2db      	uxtb	r3, r3
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	210f      	movs	r1, #15
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	43db      	mvns	r3, r3
 8006026:	401a      	ands	r2, r3
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	0a1b      	lsrs	r3, r3, #8
 800602c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	fa93 f3a3 	rbit	r3, r3
 8006034:	61bb      	str	r3, [r7, #24]
  return result;
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	fab3 f383 	clz	r3, r3
 800603c:	b2db      	uxtb	r3, r3
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	6879      	ldr	r1, [r7, #4]
 8006042:	fa01 f303 	lsl.w	r3, r1, r3
 8006046:	431a      	orrs	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800604c:	bf00      	nop
 800604e:	3724      	adds	r7, #36	; 0x24
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	fa93 f3a3 	rbit	r3, r3
 8006076:	613b      	str	r3, [r7, #16]
  return result;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	fab3 f383 	clz	r3, r3
 800607e:	b2db      	uxtb	r3, r3
 8006080:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006082:	e050      	b.n	8006126 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	2101      	movs	r1, #1
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	fa01 f303 	lsl.w	r3, r1, r3
 8006090:	4013      	ands	r3, r2
 8006092:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d042      	beq.n	8006120 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d003      	beq.n	80060aa <LL_GPIO_Init+0x52>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d10d      	bne.n	80060c6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	461a      	mov	r2, r3
 80060b0:	69b9      	ldr	r1, [r7, #24]
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7ff ff12 	bl	8005edc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	461a      	mov	r2, r3
 80060be:	69b9      	ldr	r1, [r7, #24]
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f7ff fef3 	bl	8005eac <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	461a      	mov	r2, r3
 80060cc:	69b9      	ldr	r1, [r7, #24]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff ff33 	bl	8005f3a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d11a      	bne.n	8006112 <LL_GPIO_Init+0xba>
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	fa93 f3a3 	rbit	r3, r3
 80060e6:	60bb      	str	r3, [r7, #8]
  return result;
 80060e8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b07      	cmp	r3, #7
 80060f2:	d807      	bhi.n	8006104 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	461a      	mov	r2, r3
 80060fa:	69b9      	ldr	r1, [r7, #24]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f7ff ff4b 	bl	8005f98 <LL_GPIO_SetAFPin_0_7>
 8006102:	e006      	b.n	8006112 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	461a      	mov	r2, r3
 800610a:	69b9      	ldr	r1, [r7, #24]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff72 	bl	8005ff6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	461a      	mov	r2, r3
 8006118:	69b9      	ldr	r1, [r7, #24]
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff fe97 	bl	8005e4e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	3301      	adds	r3, #1
 8006124:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1a7      	bne.n	8006084 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <LL_RCC_GetSysClkSource>:
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006144:	4b04      	ldr	r3, [pc, #16]	; (8006158 <LL_RCC_GetSysClkSource+0x18>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 030c 	and.w	r3, r3, #12
}
 800614c:	4618      	mov	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40023800 	.word	0x40023800

0800615c <LL_RCC_GetAHBPrescaler>:
{
 800615c:	b480      	push	{r7}
 800615e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006160:	4b04      	ldr	r3, [pc, #16]	; (8006174 <LL_RCC_GetAHBPrescaler+0x18>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8006168:	4618      	mov	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40023800 	.word	0x40023800

08006178 <LL_RCC_GetAPB1Prescaler>:
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800617c:	4b04      	ldr	r3, [pc, #16]	; (8006190 <LL_RCC_GetAPB1Prescaler+0x18>)
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8006184:	4618      	mov	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40023800 	.word	0x40023800

08006194 <LL_RCC_GetAPB2Prescaler>:
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <LL_RCC_GetAPB2Prescaler+0x18>)
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40023800 	.word	0x40023800

080061b0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <LL_RCC_PLL_GetMainSource+0x18>)
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80061bc:	4618      	mov	r0, r3
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40023800 	.word	0x40023800

080061cc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80061cc:	b480      	push	{r7}
 80061ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80061d0:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <LL_RCC_PLL_GetN+0x18>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	099b      	lsrs	r3, r3, #6
 80061d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80061da:	4618      	mov	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	40023800 	.word	0x40023800

080061e8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80061ec:	4b04      	ldr	r3, [pc, #16]	; (8006200 <LL_RCC_PLL_GetP+0x18>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800

08006204 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006204:	b480      	push	{r7}
 8006206:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006208:	4b04      	ldr	r3, [pc, #16]	; (800621c <LL_RCC_PLL_GetDivider+0x18>)
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8006210:	4618      	mov	r0, r3
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40023800 	.word	0x40023800

08006220 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006228:	f000 f820 	bl	800626c <RCC_GetSystemClockFreq>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f83e 	bl	80062b8 <RCC_GetHCLKClockFreq>
 800623c:	4602      	mov	r2, r0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f84c 	bl	80062e4 <RCC_GetPCLK1ClockFreq>
 800624c:	4602      	mov	r2, r0
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f858 	bl	800630c <RCC_GetPCLK2ClockFreq>
 800625c:	4602      	mov	r2, r0
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60da      	str	r2, [r3, #12]
}
 8006262:	bf00      	nop
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006276:	f7ff ff63 	bl	8006140 <LL_RCC_GetSysClkSource>
 800627a:	4603      	mov	r3, r0
 800627c:	2b08      	cmp	r3, #8
 800627e:	d00c      	beq.n	800629a <RCC_GetSystemClockFreq+0x2e>
 8006280:	2b08      	cmp	r3, #8
 8006282:	d80f      	bhi.n	80062a4 <RCC_GetSystemClockFreq+0x38>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <RCC_GetSystemClockFreq+0x22>
 8006288:	2b04      	cmp	r3, #4
 800628a:	d003      	beq.n	8006294 <RCC_GetSystemClockFreq+0x28>
 800628c:	e00a      	b.n	80062a4 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800628e:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <RCC_GetSystemClockFreq+0x48>)
 8006290:	607b      	str	r3, [r7, #4]
      break;
 8006292:	e00a      	b.n	80062aa <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <RCC_GetSystemClockFreq+0x48>)
 8006296:	607b      	str	r3, [r7, #4]
      break;
 8006298:	e007      	b.n	80062aa <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 800629a:	2008      	movs	r0, #8
 800629c:	f000 f84a 	bl	8006334 <RCC_PLL_GetFreqDomain_SYS>
 80062a0:	6078      	str	r0, [r7, #4]
      break;
 80062a2:	e002      	b.n	80062aa <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80062a4:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <RCC_GetSystemClockFreq+0x48>)
 80062a6:	607b      	str	r3, [r7, #4]
      break;
 80062a8:	bf00      	nop
  }

  return frequency;
 80062aa:	687b      	ldr	r3, [r7, #4]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	00f42400 	.word	0x00f42400

080062b8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80062c0:	f7ff ff4c 	bl	800615c <LL_RCC_GetAHBPrescaler>
 80062c4:	4603      	mov	r3, r0
 80062c6:	091b      	lsrs	r3, r3, #4
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	4a04      	ldr	r2, [pc, #16]	; (80062e0 <RCC_GetHCLKClockFreq+0x28>)
 80062ce:	5cd3      	ldrb	r3, [r2, r3]
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	40d3      	lsrs	r3, r2
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	0800b2a4 	.word	0x0800b2a4

080062e4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80062ec:	f7ff ff44 	bl	8006178 <LL_RCC_GetAPB1Prescaler>
 80062f0:	4603      	mov	r3, r0
 80062f2:	0a9b      	lsrs	r3, r3, #10
 80062f4:	4a04      	ldr	r2, [pc, #16]	; (8006308 <RCC_GetPCLK1ClockFreq+0x24>)
 80062f6:	5cd3      	ldrb	r3, [r2, r3]
 80062f8:	461a      	mov	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	40d3      	lsrs	r3, r2
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	0800b2b4 	.word	0x0800b2b4

0800630c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006314:	f7ff ff3e 	bl	8006194 <LL_RCC_GetAPB2Prescaler>
 8006318:	4603      	mov	r3, r0
 800631a:	0b5b      	lsrs	r3, r3, #13
 800631c:	4a04      	ldr	r2, [pc, #16]	; (8006330 <RCC_GetPCLK2ClockFreq+0x24>)
 800631e:	5cd3      	ldrb	r3, [r2, r3]
 8006320:	461a      	mov	r2, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	40d3      	lsrs	r3, r2
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	0800b2b4 	.word	0x0800b2b4

08006334 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
 8006344:	2300      	movs	r3, #0
 8006346:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006348:	f7ff ff32 	bl	80061b0 <LL_RCC_PLL_GetMainSource>
 800634c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d004      	beq.n	800635e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800635a:	d003      	beq.n	8006364 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800635c:	e005      	b.n	800636a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006360:	617b      	str	r3, [r7, #20]
      break;
 8006362:	e005      	b.n	8006370 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006366:	617b      	str	r3, [r7, #20]
      break;
 8006368:	e002      	b.n	8006370 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800636c:	617b      	str	r3, [r7, #20]
      break;
 800636e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b08      	cmp	r3, #8
 8006374:	d113      	bne.n	800639e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006376:	f7ff ff45 	bl	8006204 <LL_RCC_PLL_GetDivider>
 800637a:	4602      	mov	r2, r0
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	fbb3 f4f2 	udiv	r4, r3, r2
 8006382:	f7ff ff23 	bl	80061cc <LL_RCC_PLL_GetN>
 8006386:	4603      	mov	r3, r0
 8006388:	fb03 f404 	mul.w	r4, r3, r4
 800638c:	f7ff ff2c 	bl	80061e8 <LL_RCC_PLL_GetP>
 8006390:	4603      	mov	r3, r0
 8006392:	0c1b      	lsrs	r3, r3, #16
 8006394:	3301      	adds	r3, #1
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	fbb4 f3f3 	udiv	r3, r4, r3
 800639c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800639e:	693b      	ldr	r3, [r7, #16]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd90      	pop	{r4, r7, pc}
 80063a8:	00f42400 	.word	0x00f42400

080063ac <LL_TIM_SetPrescaler>:
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <LL_TIM_SetAutoReload>:
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_TIM_SetRepetitionCounter>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_TIM_OC_SetCompareCH1>:
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_TIM_OC_SetCompareCH2>:
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_TIM_OC_SetCompareCH3>:
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <LL_TIM_OC_SetCompareCH4>:
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	683a      	ldr	r2, [r7, #0]
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f043 0201 	orr.w	r2, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	615a      	str	r2, [r3, #20]
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a31      	ldr	r2, [pc, #196]	; (8006568 <LL_TIM_Init+0xd8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00f      	beq.n	80064c8 <LL_TIM_Init+0x38>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ae:	d00b      	beq.n	80064c8 <LL_TIM_Init+0x38>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a2e      	ldr	r2, [pc, #184]	; (800656c <LL_TIM_Init+0xdc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <LL_TIM_Init+0x38>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a2d      	ldr	r2, [pc, #180]	; (8006570 <LL_TIM_Init+0xe0>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <LL_TIM_Init+0x38>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a2c      	ldr	r2, [pc, #176]	; (8006574 <LL_TIM_Init+0xe4>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d106      	bne.n	80064d6 <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a23      	ldr	r2, [pc, #140]	; (8006568 <LL_TIM_Init+0xd8>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01b      	beq.n	8006516 <LL_TIM_Init+0x86>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e4:	d017      	beq.n	8006516 <LL_TIM_Init+0x86>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a20      	ldr	r2, [pc, #128]	; (800656c <LL_TIM_Init+0xdc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <LL_TIM_Init+0x86>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <LL_TIM_Init+0xe0>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d00f      	beq.n	8006516 <LL_TIM_Init+0x86>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <LL_TIM_Init+0xe4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00b      	beq.n	8006516 <LL_TIM_Init+0x86>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <LL_TIM_Init+0xe8>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d007      	beq.n	8006516 <LL_TIM_Init+0x86>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a1c      	ldr	r2, [pc, #112]	; (800657c <LL_TIM_Init+0xec>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d003      	beq.n	8006516 <LL_TIM_Init+0x86>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <LL_TIM_Init+0xf0>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d106      	bne.n	8006524 <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	4313      	orrs	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7ff ff49 	bl	80063c8 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	881b      	ldrh	r3, [r3, #0]
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7ff ff35 	bl	80063ac <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a08      	ldr	r2, [pc, #32]	; (8006568 <LL_TIM_Init+0xd8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d105      	bne.n	8006556 <LL_TIM_Init+0xc6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7ff ff47 	bl	80063e4 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ff8a 	bl	8006470 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40010000 	.word	0x40010000
 800656c:	40000400 	.word	0x40000400
 8006570:	40000800 	.word	0x40000800
 8006574:	40000c00 	.word	0x40000c00
 8006578:	40014000 	.word	0x40014000
 800657c:	40014400 	.word	0x40014400
 8006580:	40014800 	.word	0x40014800

08006584 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659a:	d027      	beq.n	80065ec <LL_TIM_OC_Init+0x68>
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065a2:	d82a      	bhi.n	80065fa <LL_TIM_OC_Init+0x76>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065aa:	d018      	beq.n	80065de <LL_TIM_OC_Init+0x5a>
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d822      	bhi.n	80065fa <LL_TIM_OC_Init+0x76>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d003      	beq.n	80065c2 <LL_TIM_OC_Init+0x3e>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b10      	cmp	r3, #16
 80065be:	d007      	beq.n	80065d0 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 80065c0:	e01b      	b.n	80065fa <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80065c2:	6879      	ldr	r1, [r7, #4]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f81f 	bl	8006608 <OC1Config>
 80065ca:	4603      	mov	r3, r0
 80065cc:	75fb      	strb	r3, [r7, #23]
      break;
 80065ce:	e015      	b.n	80065fc <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 f87e 	bl	80066d4 <OC2Config>
 80065d8:	4603      	mov	r3, r0
 80065da:	75fb      	strb	r3, [r7, #23]
      break;
 80065dc:	e00e      	b.n	80065fc <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f8e1 	bl	80067a8 <OC3Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ea:	e007      	b.n	80065fc <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80065ec:	6879      	ldr	r1, [r7, #4]
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f944 	bl	800687c <OC4Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	75fb      	strb	r3, [r7, #23]
      break;
 80065f8:	e000      	b.n	80065fc <LL_TIM_OC_Init+0x78>
      break;
 80065fa:	bf00      	nop
  }

  return result;
 80065fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0202 	bic.w	r2, r3, #2
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f023 0201 	bic.w	r2, r3, #1
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1a      	ldr	r2, [pc, #104]	; (80066d0 <OC1Config+0xc8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d11e      	bne.n	80066a8 <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f023 0208 	bic.w	r2, r3, #8
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 0204 	bic.w	r2, r3, #4
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fea0 	bl	8006400 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3718      	adds	r7, #24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40010000 	.word	0x40010000

080066d4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	f023 0210 	bic.w	r2, r3, #16
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	021b      	lsls	r3, r3, #8
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0220 	bic.w	r2, r3, #32
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	4313      	orrs	r3, r2
 8006722:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f023 0210 	bic.w	r2, r3, #16
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4313      	orrs	r3, r2
 8006732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a1b      	ldr	r2, [pc, #108]	; (80067a4 <OC2Config+0xd0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d11f      	bne.n	800677c <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	019b      	lsls	r3, r3, #6
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	019b      	lsls	r3, r3, #6
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fe44 	bl	800641c <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	3718      	adds	r7, #24
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}
 80067a4:	40010000 	.word	0x40010000

080067a8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0303 	bic.w	r3, r3, #3
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	4313      	orrs	r3, r2
 8006804:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a1b      	ldr	r2, [pc, #108]	; (8006878 <OC3Config+0xd0>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d11f      	bne.n	800684e <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	029b      	lsls	r3, r3, #10
 800682a:	4313      	orrs	r3, r2
 800682c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	4313      	orrs	r3, r2
 800683c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	69db      	ldr	r3, [r3, #28]
 8006848:	015b      	lsls	r3, r3, #5
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff fde9 	bl	8006438 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40010000 	.word	0x40010000

0800687c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a1b      	ldr	r3, [r3, #32]
 800688a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	4313      	orrs	r3, r2
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	031b      	lsls	r3, r3, #12
 80068c8:	4313      	orrs	r3, r2
 80068ca:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	031b      	lsls	r3, r3, #12
 80068d8:	4313      	orrs	r3, r2
 80068da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a0f      	ldr	r2, [pc, #60]	; (800691c <OC4Config+0xa0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d107      	bne.n	80068f4 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	019b      	lsls	r3, r3, #6
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff fda4 	bl	8006454 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40010000 	.word	0x40010000

08006920 <LL_USART_IsEnabled>:
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006934:	bf0c      	ite	eq
 8006936:	2301      	moveq	r3, #1
 8006938:	2300      	movne	r3, #0
 800693a:	b2db      	uxtb	r3, r3
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <LL_USART_SetStopBitsLength>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	431a      	orrs	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	611a      	str	r2, [r3, #16]
}
 8006962:	bf00      	nop
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <LL_USART_SetHWFlowCtrl>:
{
 800696e:	b480      	push	{r7}
 8006970:	b083      	sub	sp, #12
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	615a      	str	r2, [r3, #20]
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <LL_USART_SetBaudRate>:
{
 8006994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006998:	b0c0      	sub	sp, #256	; 0x100
 800699a:	af00      	add	r7, sp, #0
 800699c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80069a0:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 80069a4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80069a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b4:	f040 810c 	bne.w	8006bd0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80069b8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069bc:	2200      	movs	r2, #0
 80069be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80069c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80069c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80069ca:	4622      	mov	r2, r4
 80069cc:	462b      	mov	r3, r5
 80069ce:	1891      	adds	r1, r2, r2
 80069d0:	6639      	str	r1, [r7, #96]	; 0x60
 80069d2:	415b      	adcs	r3, r3
 80069d4:	667b      	str	r3, [r7, #100]	; 0x64
 80069d6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80069da:	4621      	mov	r1, r4
 80069dc:	eb12 0801 	adds.w	r8, r2, r1
 80069e0:	4629      	mov	r1, r5
 80069e2:	eb43 0901 	adc.w	r9, r3, r1
 80069e6:	f04f 0200 	mov.w	r2, #0
 80069ea:	f04f 0300 	mov.w	r3, #0
 80069ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069fa:	4690      	mov	r8, r2
 80069fc:	4699      	mov	r9, r3
 80069fe:	4623      	mov	r3, r4
 8006a00:	eb18 0303 	adds.w	r3, r8, r3
 8006a04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a08:	462b      	mov	r3, r5
 8006a0a:	eb49 0303 	adc.w	r3, r9, r3
 8006a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a12:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a16:	2200      	movs	r2, #0
 8006a18:	469a      	mov	sl, r3
 8006a1a:	4693      	mov	fp, r2
 8006a1c:	eb1a 030a 	adds.w	r3, sl, sl
 8006a20:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a22:	eb4b 030b 	adc.w	r3, fp, fp
 8006a26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a28:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a30:	f7f9 fbd0 	bl	80001d4 <__aeabi_uldivmod>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4b64      	ldr	r3, [pc, #400]	; (8006bcc <LL_USART_SetBaudRate+0x238>)
 8006a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	011b      	lsls	r3, r3, #4
 8006a44:	b29c      	uxth	r4, r3
 8006a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a50:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006a54:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	1891      	adds	r1, r2, r2
 8006a5e:	6539      	str	r1, [r7, #80]	; 0x50
 8006a60:	415b      	adcs	r3, r3
 8006a62:	657b      	str	r3, [r7, #84]	; 0x54
 8006a64:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a68:	4641      	mov	r1, r8
 8006a6a:	1851      	adds	r1, r2, r1
 8006a6c:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a6e:	4649      	mov	r1, r9
 8006a70:	414b      	adcs	r3, r1
 8006a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 8006a80:	4659      	mov	r1, fp
 8006a82:	00cb      	lsls	r3, r1, #3
 8006a84:	4651      	mov	r1, sl
 8006a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	00ca      	lsls	r2, r1, #3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	4642      	mov	r2, r8
 8006a96:	189b      	adds	r3, r3, r2
 8006a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006aa8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ab2:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8006ab6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006aba:	460b      	mov	r3, r1
 8006abc:	18db      	adds	r3, r3, r3
 8006abe:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	eb42 0303 	adc.w	r3, r2, r3
 8006ac6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006acc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8006ad0:	f7f9 fb80 	bl	80001d4 <__aeabi_uldivmod>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4b3c      	ldr	r3, [pc, #240]	; (8006bcc <LL_USART_SetBaudRate+0x238>)
 8006adc:	fba3 2301 	umull	r2, r3, r3, r1
 8006ae0:	095b      	lsrs	r3, r3, #5
 8006ae2:	2264      	movs	r2, #100	; 0x64
 8006ae4:	fb02 f303 	mul.w	r3, r2, r3
 8006ae8:	1acb      	subs	r3, r1, r3
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006af0:	4b36      	ldr	r3, [pc, #216]	; (8006bcc <LL_USART_SetBaudRate+0x238>)
 8006af2:	fba3 2302 	umull	r2, r3, r3, r2
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	4423      	add	r3, r4
 8006b06:	b29c      	uxth	r4, r3
 8006b08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b12:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b16:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 8006b1a:	4642      	mov	r2, r8
 8006b1c:	464b      	mov	r3, r9
 8006b1e:	1891      	adds	r1, r2, r2
 8006b20:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b22:	415b      	adcs	r3, r3
 8006b24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b26:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	1851      	adds	r1, r2, r1
 8006b2e:	6339      	str	r1, [r7, #48]	; 0x30
 8006b30:	4649      	mov	r1, r9
 8006b32:	414b      	adcs	r3, r1
 8006b34:	637b      	str	r3, [r7, #52]	; 0x34
 8006b36:	f04f 0200 	mov.w	r2, #0
 8006b3a:	f04f 0300 	mov.w	r3, #0
 8006b3e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b42:	4659      	mov	r1, fp
 8006b44:	00cb      	lsls	r3, r1, #3
 8006b46:	4651      	mov	r1, sl
 8006b48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b4c:	4651      	mov	r1, sl
 8006b4e:	00ca      	lsls	r2, r1, #3
 8006b50:	4610      	mov	r0, r2
 8006b52:	4619      	mov	r1, r3
 8006b54:	4603      	mov	r3, r0
 8006b56:	4642      	mov	r2, r8
 8006b58:	189b      	adds	r3, r3, r2
 8006b5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	460a      	mov	r2, r1
 8006b62:	eb42 0303 	adc.w	r3, r2, r3
 8006b66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b74:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8006b78:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	18db      	adds	r3, r3, r3
 8006b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b82:	4613      	mov	r3, r2
 8006b84:	eb42 0303 	adc.w	r3, r2, r3
 8006b88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b8e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006b92:	f7f9 fb1f 	bl	80001d4 <__aeabi_uldivmod>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <LL_USART_SetBaudRate+0x238>)
 8006b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	2164      	movs	r1, #100	; 0x64
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	3332      	adds	r3, #50	; 0x32
 8006bae:	4a07      	ldr	r2, [pc, #28]	; (8006bcc <LL_USART_SetBaudRate+0x238>)
 8006bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	4423      	add	r3, r4
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bc8:	609a      	str	r2, [r3, #8]
}
 8006bca:	e107      	b.n	8006ddc <LL_USART_SetBaudRate+0x448>
 8006bcc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006bd0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bda:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006bde:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8006be2:	4642      	mov	r2, r8
 8006be4:	464b      	mov	r3, r9
 8006be6:	1891      	adds	r1, r2, r2
 8006be8:	6239      	str	r1, [r7, #32]
 8006bea:	415b      	adcs	r3, r3
 8006bec:	627b      	str	r3, [r7, #36]	; 0x24
 8006bee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bf2:	4641      	mov	r1, r8
 8006bf4:	1854      	adds	r4, r2, r1
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	eb43 0501 	adc.w	r5, r3, r1
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	f04f 0300 	mov.w	r3, #0
 8006c04:	00eb      	lsls	r3, r5, #3
 8006c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c0a:	00e2      	lsls	r2, r4, #3
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	4643      	mov	r3, r8
 8006c12:	18e3      	adds	r3, r4, r3
 8006c14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c18:	464b      	mov	r3, r9
 8006c1a:	eb45 0303 	adc.w	r3, r5, r3
 8006c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006c22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c2c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	f04f 0300 	mov.w	r3, #0
 8006c38:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	008b      	lsls	r3, r1, #2
 8006c40:	4621      	mov	r1, r4
 8006c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c46:	4621      	mov	r1, r4
 8006c48:	008a      	lsls	r2, r1, #2
 8006c4a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006c4e:	f7f9 fac1 	bl	80001d4 <__aeabi_uldivmod>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	4b64      	ldr	r3, [pc, #400]	; (8006de8 <LL_USART_SetBaudRate+0x454>)
 8006c58:	fba3 2302 	umull	r2, r3, r3, r2
 8006c5c:	095b      	lsrs	r3, r3, #5
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	b29c      	uxth	r4, r3
 8006c64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006c72:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8006c76:	4642      	mov	r2, r8
 8006c78:	464b      	mov	r3, r9
 8006c7a:	1891      	adds	r1, r2, r2
 8006c7c:	61b9      	str	r1, [r7, #24]
 8006c7e:	415b      	adcs	r3, r3
 8006c80:	61fb      	str	r3, [r7, #28]
 8006c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c86:	4641      	mov	r1, r8
 8006c88:	1851      	adds	r1, r2, r1
 8006c8a:	6139      	str	r1, [r7, #16]
 8006c8c:	4649      	mov	r1, r9
 8006c8e:	414b      	adcs	r3, r1
 8006c90:	617b      	str	r3, [r7, #20]
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	f04f 0300 	mov.w	r3, #0
 8006c9a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	00cb      	lsls	r3, r1, #3
 8006ca2:	4651      	mov	r1, sl
 8006ca4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ca8:	4651      	mov	r1, sl
 8006caa:	00ca      	lsls	r2, r1, #3
 8006cac:	4610      	mov	r0, r2
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	4642      	mov	r2, r8
 8006cb4:	189b      	adds	r3, r3, r2
 8006cb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cba:	464b      	mov	r3, r9
 8006cbc:	460a      	mov	r2, r1
 8006cbe:	eb42 0303 	adc.w	r3, r2, r3
 8006cc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006cc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006cd0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8006ce0:	4649      	mov	r1, r9
 8006ce2:	008b      	lsls	r3, r1, #2
 8006ce4:	4641      	mov	r1, r8
 8006ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cea:	4641      	mov	r1, r8
 8006cec:	008a      	lsls	r2, r1, #2
 8006cee:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8006cf2:	f7f9 fa6f 	bl	80001d4 <__aeabi_uldivmod>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4b3b      	ldr	r3, [pc, #236]	; (8006de8 <LL_USART_SetBaudRate+0x454>)
 8006cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8006d00:	095b      	lsrs	r3, r3, #5
 8006d02:	2164      	movs	r1, #100	; 0x64
 8006d04:	fb01 f303 	mul.w	r3, r1, r3
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	3332      	adds	r3, #50	; 0x32
 8006d0e:	4a36      	ldr	r2, [pc, #216]	; (8006de8 <LL_USART_SetBaudRate+0x454>)
 8006d10:	fba2 2303 	umull	r2, r3, r2, r3
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4423      	add	r3, r4
 8006d20:	b29c      	uxth	r4, r3
 8006d22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d26:	2200      	movs	r2, #0
 8006d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d30:	4642      	mov	r2, r8
 8006d32:	464b      	mov	r3, r9
 8006d34:	1891      	adds	r1, r2, r2
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	415b      	adcs	r3, r3
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d40:	4641      	mov	r1, r8
 8006d42:	1851      	adds	r1, r2, r1
 8006d44:	6039      	str	r1, [r7, #0]
 8006d46:	4649      	mov	r1, r9
 8006d48:	414b      	adcs	r3, r1
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d58:	4659      	mov	r1, fp
 8006d5a:	00cb      	lsls	r3, r1, #3
 8006d5c:	4651      	mov	r1, sl
 8006d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d62:	4651      	mov	r1, sl
 8006d64:	00ca      	lsls	r2, r1, #3
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	4642      	mov	r2, r8
 8006d6e:	189b      	adds	r3, r3, r2
 8006d70:	673b      	str	r3, [r7, #112]	; 0x70
 8006d72:	464b      	mov	r3, r9
 8006d74:	460a      	mov	r2, r1
 8006d76:	eb42 0303 	adc.w	r3, r2, r3
 8006d7a:	677b      	str	r3, [r7, #116]	; 0x74
 8006d7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d80:	2200      	movs	r2, #0
 8006d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d84:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8006d92:	4649      	mov	r1, r9
 8006d94:	008b      	lsls	r3, r1, #2
 8006d96:	4641      	mov	r1, r8
 8006d98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9c:	4641      	mov	r1, r8
 8006d9e:	008a      	lsls	r2, r1, #2
 8006da0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8006da4:	f7f9 fa16 	bl	80001d4 <__aeabi_uldivmod>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4b0e      	ldr	r3, [pc, #56]	; (8006de8 <LL_USART_SetBaudRate+0x454>)
 8006dae:	fba3 1302 	umull	r1, r3, r3, r2
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	2164      	movs	r1, #100	; 0x64
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	3332      	adds	r3, #50	; 0x32
 8006dc0:	4a09      	ldr	r2, [pc, #36]	; (8006de8 <LL_USART_SetBaudRate+0x454>)
 8006dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	4423      	add	r3, r4
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dda:	609a      	str	r2, [r3, #8]
}
 8006ddc:	bf00      	nop
 8006dde:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006de2:	46bd      	mov	sp, r7
 8006de4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006de8:	51eb851f 	.word	0x51eb851f

08006dec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff fd8e 	bl	8006920 <LL_USART_IsEnabled>
 8006e04:	4603      	mov	r3, r0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d149      	bne.n	8006e9e <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e12:	f023 030c 	bic.w	r3, r3, #12
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	6851      	ldr	r1, [r2, #4]
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	68d2      	ldr	r2, [r2, #12]
 8006e1e:	4311      	orrs	r1, r2
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	6912      	ldr	r2, [r2, #16]
 8006e24:	4311      	orrs	r1, r2
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	6992      	ldr	r2, [r2, #24]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff fd85 	bl	8006948 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff fd92 	bl	800696e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7ff f9e6 	bl	8006220 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a14      	ldr	r2, [pc, #80]	; (8006ea8 <LL_USART_Init+0xbc>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d102      	bne.n	8006e62 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e00c      	b.n	8006e7c <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a11      	ldr	r2, [pc, #68]	; (8006eac <LL_USART_Init+0xc0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d102      	bne.n	8006e70 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e005      	b.n	8006e7c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a0f      	ldr	r2, [pc, #60]	; (8006eb0 <LL_USART_Init+0xc4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d101      	bne.n	8006e7c <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00d      	beq.n	8006e9e <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	699a      	ldr	r2, [r3, #24]
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7ff fd7b 	bl	8006994 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006e9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40011000 	.word	0x40011000
 8006eac:	40004400 	.word	0x40004400
 8006eb0:	40011400 	.word	0x40011400

08006eb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	f107 001c 	add.w	r0, r7, #28
 8006ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d122      	bne.n	8006f12 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d105      	bne.n	8006f06 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f001 fbee 	bl	80086e8 <USB_CoreReset>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e01a      	b.n	8006f48 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f001 fbe2 	bl	80086e8 <USB_CoreReset>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d106      	bne.n	8006f3c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	639a      	str	r2, [r3, #56]	; 0x38
 8006f3a:	e005      	b.n	8006f48 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f40:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d10b      	bne.n	8006f66 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f043 0206 	orr.w	r2, r3, #6
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f72:	b004      	add	sp, #16
 8006f74:	4770      	bx	lr
	...

08006f78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d165      	bne.n	8007058 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	4a41      	ldr	r2, [pc, #260]	; (8007094 <USB_SetTurnaroundTime+0x11c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d906      	bls.n	8006fa2 <USB_SetTurnaroundTime+0x2a>
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a40      	ldr	r2, [pc, #256]	; (8007098 <USB_SetTurnaroundTime+0x120>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d202      	bcs.n	8006fa2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f9c:	230f      	movs	r3, #15
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	e062      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	4a3c      	ldr	r2, [pc, #240]	; (8007098 <USB_SetTurnaroundTime+0x120>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d306      	bcc.n	8006fb8 <USB_SetTurnaroundTime+0x40>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	4a3b      	ldr	r2, [pc, #236]	; (800709c <USB_SetTurnaroundTime+0x124>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d202      	bcs.n	8006fb8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006fb2:	230e      	movs	r3, #14
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	e057      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	4a38      	ldr	r2, [pc, #224]	; (800709c <USB_SetTurnaroundTime+0x124>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d306      	bcc.n	8006fce <USB_SetTurnaroundTime+0x56>
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4a37      	ldr	r2, [pc, #220]	; (80070a0 <USB_SetTurnaroundTime+0x128>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d202      	bcs.n	8006fce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006fc8:	230d      	movs	r3, #13
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	e04c      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	4a33      	ldr	r2, [pc, #204]	; (80070a0 <USB_SetTurnaroundTime+0x128>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d306      	bcc.n	8006fe4 <USB_SetTurnaroundTime+0x6c>
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	4a32      	ldr	r2, [pc, #200]	; (80070a4 <USB_SetTurnaroundTime+0x12c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d802      	bhi.n	8006fe4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006fde:	230c      	movs	r3, #12
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	e041      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4a2f      	ldr	r2, [pc, #188]	; (80070a4 <USB_SetTurnaroundTime+0x12c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d906      	bls.n	8006ffa <USB_SetTurnaroundTime+0x82>
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	4a2e      	ldr	r2, [pc, #184]	; (80070a8 <USB_SetTurnaroundTime+0x130>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d802      	bhi.n	8006ffa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ff4:	230b      	movs	r3, #11
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	e036      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	4a2a      	ldr	r2, [pc, #168]	; (80070a8 <USB_SetTurnaroundTime+0x130>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d906      	bls.n	8007010 <USB_SetTurnaroundTime+0x98>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	4a29      	ldr	r2, [pc, #164]	; (80070ac <USB_SetTurnaroundTime+0x134>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d802      	bhi.n	8007010 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800700a:	230a      	movs	r3, #10
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e02b      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4a26      	ldr	r2, [pc, #152]	; (80070ac <USB_SetTurnaroundTime+0x134>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d906      	bls.n	8007026 <USB_SetTurnaroundTime+0xae>
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	4a25      	ldr	r2, [pc, #148]	; (80070b0 <USB_SetTurnaroundTime+0x138>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d202      	bcs.n	8007026 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007020:	2309      	movs	r3, #9
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	e020      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4a21      	ldr	r2, [pc, #132]	; (80070b0 <USB_SetTurnaroundTime+0x138>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d306      	bcc.n	800703c <USB_SetTurnaroundTime+0xc4>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	4a20      	ldr	r2, [pc, #128]	; (80070b4 <USB_SetTurnaroundTime+0x13c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d802      	bhi.n	800703c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007036:	2308      	movs	r3, #8
 8007038:	617b      	str	r3, [r7, #20]
 800703a:	e015      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <USB_SetTurnaroundTime+0x13c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d906      	bls.n	8007052 <USB_SetTurnaroundTime+0xda>
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	4a1c      	ldr	r2, [pc, #112]	; (80070b8 <USB_SetTurnaroundTime+0x140>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d202      	bcs.n	8007052 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800704c:	2307      	movs	r3, #7
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e00a      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007052:	2306      	movs	r3, #6
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e007      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007058:	79fb      	ldrb	r3, [r7, #7]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d102      	bne.n	8007064 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800705e:	2309      	movs	r3, #9
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e001      	b.n	8007068 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007064:	2309      	movs	r3, #9
 8007066:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	029b      	lsls	r3, r3, #10
 800707c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007080:	431a      	orrs	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	371c      	adds	r7, #28
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	00d8acbf 	.word	0x00d8acbf
 8007098:	00e4e1c0 	.word	0x00e4e1c0
 800709c:	00f42400 	.word	0x00f42400
 80070a0:	01067380 	.word	0x01067380
 80070a4:	011a499f 	.word	0x011a499f
 80070a8:	01312cff 	.word	0x01312cff
 80070ac:	014ca43f 	.word	0x014ca43f
 80070b0:	016e3600 	.word	0x016e3600
 80070b4:	01a6ab1f 	.word	0x01a6ab1f
 80070b8:	01e84800 	.word	0x01e84800

080070bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f043 0201 	orr.w	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	370c      	adds	r7, #12
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070de:	b480      	push	{r7}
 80070e0:	b083      	sub	sp, #12
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f023 0201 	bic.w	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d115      	bne.n	800714e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800712e:	2001      	movs	r0, #1
 8007130:	f7fc f90c 	bl	800334c <HAL_Delay>
      ms++;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	3301      	adds	r3, #1
 8007138:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f001 fa45 	bl	80085ca <USB_GetMode>
 8007140:	4603      	mov	r3, r0
 8007142:	2b01      	cmp	r3, #1
 8007144:	d01e      	beq.n	8007184 <USB_SetCurrentMode+0x84>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2b31      	cmp	r3, #49	; 0x31
 800714a:	d9f0      	bls.n	800712e <USB_SetCurrentMode+0x2e>
 800714c:	e01a      	b.n	8007184 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d115      	bne.n	8007180 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007160:	2001      	movs	r0, #1
 8007162:	f7fc f8f3 	bl	800334c <HAL_Delay>
      ms++;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	3301      	adds	r3, #1
 800716a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 fa2c 	bl	80085ca <USB_GetMode>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <USB_SetCurrentMode+0x84>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b31      	cmp	r3, #49	; 0x31
 800717c:	d9f0      	bls.n	8007160 <USB_SetCurrentMode+0x60>
 800717e:	e001      	b.n	8007184 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e005      	b.n	8007190 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2b32      	cmp	r3, #50	; 0x32
 8007188:	d101      	bne.n	800718e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007198:	b084      	sub	sp, #16
 800719a:	b580      	push	{r7, lr}
 800719c:	b086      	sub	sp, #24
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
 80071a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80071a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	e009      	b.n	80071cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3340      	adds	r3, #64	; 0x40
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	3301      	adds	r3, #1
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b0e      	cmp	r3, #14
 80071d0:	d9f2      	bls.n	80071b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11c      	bne.n	8007212 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071e6:	f043 0302 	orr.w	r3, r3, #2
 80071ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
 8007210:	e00b      	b.n	800722a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007216:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007230:	461a      	mov	r2, r3
 8007232:	2300      	movs	r3, #0
 8007234:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723c:	4619      	mov	r1, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	461a      	mov	r2, r3
 8007246:	680b      	ldr	r3, [r1, #0]
 8007248:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	2b01      	cmp	r3, #1
 800724e:	d10c      	bne.n	800726a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007256:	2100      	movs	r1, #0
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f965 	bl	8007528 <USB_SetDevSpeed>
 800725e:	e008      	b.n	8007272 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007260:	2101      	movs	r1, #1
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f960 	bl	8007528 <USB_SetDevSpeed>
 8007268:	e003      	b.n	8007272 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800726a:	2103      	movs	r1, #3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f95b 	bl	8007528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007272:	2110      	movs	r1, #16
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 f8f3 	bl	8007460 <USB_FlushTxFifo>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f91f 	bl	80074c8 <USB_FlushRxFifo>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800729a:	461a      	mov	r2, r3
 800729c:	2300      	movs	r3, #0
 800729e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	461a      	mov	r2, r3
 80072a8:	2300      	movs	r3, #0
 80072aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b2:	461a      	mov	r2, r3
 80072b4:	2300      	movs	r3, #0
 80072b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072b8:	2300      	movs	r3, #0
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	e043      	b.n	8007346 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072d4:	d118      	bne.n	8007308 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e8:	461a      	mov	r2, r3
 80072ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072ee:	6013      	str	r3, [r2, #0]
 80072f0:	e013      	b.n	800731a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fe:	461a      	mov	r2, r3
 8007300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007304:	6013      	str	r3, [r2, #0]
 8007306:	e008      	b.n	800731a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	461a      	mov	r2, r3
 8007316:	2300      	movs	r3, #0
 8007318:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	461a      	mov	r2, r3
 8007328:	2300      	movs	r3, #0
 800732a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	461a      	mov	r2, r3
 800733a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800733e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	3301      	adds	r3, #1
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d3b7      	bcc.n	80072be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
 8007352:	e043      	b.n	80073dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800736a:	d118      	bne.n	800739e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e013      	b.n	80073b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007394:	461a      	mov	r2, r3
 8007396:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e008      	b.n	80073b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073aa:	461a      	mov	r2, r3
 80073ac:	2300      	movs	r3, #0
 80073ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	461a      	mov	r2, r3
 80073be:	2300      	movs	r3, #0
 80073c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ce:	461a      	mov	r2, r3
 80073d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80073d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	3301      	adds	r3, #1
 80073da:	613b      	str	r3, [r7, #16]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d3b7      	bcc.n	8007354 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007404:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	2b00      	cmp	r3, #0
 800740a:	d105      	bne.n	8007418 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f043 0210 	orr.w	r2, r3, #16
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	4b0f      	ldr	r3, [pc, #60]	; (800745c <USB_DevInit+0x2c4>)
 800741e:	4313      	orrs	r3, r2
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d005      	beq.n	8007436 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f043 0208 	orr.w	r2, r3, #8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d107      	bne.n	800744c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007444:	f043 0304 	orr.w	r3, r3, #4
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007458:	b004      	add	sp, #16
 800745a:	4770      	bx	lr
 800745c:	803c3800 	.word	0x803c3800

08007460 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	4a13      	ldr	r2, [pc, #76]	; (80074c4 <USB_FlushTxFifo+0x64>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d901      	bls.n	8007480 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e01b      	b.n	80074b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	daf2      	bge.n	800746e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	019b      	lsls	r3, r3, #6
 8007490:	f043 0220 	orr.w	r2, r3, #32
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4a08      	ldr	r2, [pc, #32]	; (80074c4 <USB_FlushTxFifo+0x64>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d901      	bls.n	80074aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e006      	b.n	80074b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	f003 0320 	and.w	r3, r3, #32
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d0f0      	beq.n	8007498 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	00030d40 	.word	0x00030d40

080074c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4a11      	ldr	r2, [pc, #68]	; (8007524 <USB_FlushRxFifo+0x5c>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d901      	bls.n	80074e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e018      	b.n	8007518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	daf2      	bge.n	80074d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2210      	movs	r2, #16
 80074f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4a08      	ldr	r2, [pc, #32]	; (8007524 <USB_FlushRxFifo+0x5c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d901      	bls.n	800750a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007506:	2303      	movs	r3, #3
 8007508:	e006      	b.n	8007518 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0310 	and.w	r3, r3, #16
 8007512:	2b10      	cmp	r3, #16
 8007514:	d0f0      	beq.n	80074f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	00030d40 	.word	0x00030d40

08007528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	460b      	mov	r3, r1
 8007532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007548:	4313      	orrs	r3, r2
 800754a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b087      	sub	sp, #28
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 0306 	and.w	r3, r3, #6
 8007572:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]
 800757e:	e00a      	b.n	8007596 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d002      	beq.n	800758c <USB_GetDevSpeed+0x32>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b06      	cmp	r3, #6
 800758a:	d102      	bne.n	8007592 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800758c:	2302      	movs	r3, #2
 800758e:	75fb      	strb	r3, [r7, #23]
 8007590:	e001      	b.n	8007596 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007592:	230f      	movs	r3, #15
 8007594:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
}
 8007598:	4618      	mov	r0, r3
 800759a:	371c      	adds	r7, #28
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d13a      	bne.n	8007636 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c6:	69da      	ldr	r2, [r3, #28]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	2101      	movs	r1, #1
 80075d2:	fa01 f303 	lsl.w	r3, r1, r3
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075de:	4313      	orrs	r3, r2
 80075e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d155      	bne.n	80076a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007614:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	059b      	lsls	r3, r3, #22
 800761a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800761c:	4313      	orrs	r3, r2
 800761e:	68ba      	ldr	r2, [r7, #8]
 8007620:	0151      	lsls	r1, r2, #5
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	440a      	add	r2, r1
 8007626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800762a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800762e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	e036      	b.n	80076a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800763c:	69da      	ldr	r2, [r3, #28]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	2101      	movs	r1, #1
 8007648:	fa01 f303 	lsl.w	r3, r1, r3
 800764c:	041b      	lsls	r3, r3, #16
 800764e:	68f9      	ldr	r1, [r7, #12]
 8007650:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007654:	4313      	orrs	r3, r2
 8007656:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	015a      	lsls	r2, r3, #5
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4413      	add	r3, r2
 8007660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d11a      	bne.n	80076a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	015a      	lsls	r2, r3, #5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	791b      	ldrb	r3, [r3, #4]
 8007688:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800768a:	430b      	orrs	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800769a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d161      	bne.n	8007794 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076e6:	d11f      	bne.n	8007728 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	0151      	lsls	r1, r2, #5
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	440a      	add	r2, r1
 80076fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007702:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007706:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	f003 030f 	and.w	r3, r3, #15
 8007738:	2101      	movs	r1, #1
 800773a:	fa01 f303 	lsl.w	r3, r1, r3
 800773e:	b29b      	uxth	r3, r3
 8007740:	43db      	mvns	r3, r3
 8007742:	68f9      	ldr	r1, [r7, #12]
 8007744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007748:	4013      	ands	r3, r2
 800774a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007752:	69da      	ldr	r2, [r3, #28]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	2101      	movs	r1, #1
 800775e:	fa01 f303 	lsl.w	r3, r1, r3
 8007762:	b29b      	uxth	r3, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	68f9      	ldr	r1, [r7, #12]
 8007768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800776c:	4013      	ands	r3, r2
 800776e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800777c:	681a      	ldr	r2, [r3, #0]
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	0159      	lsls	r1, r3, #5
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	440b      	add	r3, r1
 8007786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800778a:	4619      	mov	r1, r3
 800778c:	4b35      	ldr	r3, [pc, #212]	; (8007864 <USB_DeactivateEndpoint+0x1b0>)
 800778e:	4013      	ands	r3, r2
 8007790:	600b      	str	r3, [r1, #0]
 8007792:	e060      	b.n	8007856 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077aa:	d11f      	bne.n	80077ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	0151      	lsls	r1, r2, #5
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	440a      	add	r2, r1
 80077c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	2101      	movs	r1, #1
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	041b      	lsls	r3, r3, #16
 8007804:	43db      	mvns	r3, r3
 8007806:	68f9      	ldr	r1, [r7, #12]
 8007808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800780c:	4013      	ands	r3, r2
 800780e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	f003 030f 	and.w	r3, r3, #15
 8007820:	2101      	movs	r1, #1
 8007822:	fa01 f303 	lsl.w	r3, r1, r3
 8007826:	041b      	lsls	r3, r3, #16
 8007828:	43db      	mvns	r3, r3
 800782a:	68f9      	ldr	r1, [r7, #12]
 800782c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007830:	4013      	ands	r3, r2
 8007832:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	0159      	lsls	r1, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	440b      	add	r3, r1
 800784a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784e:	4619      	mov	r1, r3
 8007850:	4b05      	ldr	r3, [pc, #20]	; (8007868 <USB_DeactivateEndpoint+0x1b4>)
 8007852:	4013      	ands	r3, r2
 8007854:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	ec337800 	.word	0xec337800
 8007868:	eff37800 	.word	0xeff37800

0800786c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b08a      	sub	sp, #40	; 0x28
 8007870:	af02      	add	r7, sp, #8
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	4613      	mov	r3, r2
 8007878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	f040 815c 	bne.w	8007b46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d132      	bne.n	80078fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	69ba      	ldr	r2, [r7, #24]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078da:	69bb      	ldr	r3, [r7, #24]
 80078dc:	015a      	lsls	r2, r3, #5
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	4413      	add	r3, r2
 80078e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	0151      	lsls	r1, r2, #5
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	440a      	add	r2, r1
 80078f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f4:	0cdb      	lsrs	r3, r3, #19
 80078f6:	04db      	lsls	r3, r3, #19
 80078f8:	6113      	str	r3, [r2, #16]
 80078fa:	e074      	b.n	80079e6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	69ba      	ldr	r2, [r7, #24]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	440a      	add	r2, r1
 8007912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007916:	0cdb      	lsrs	r3, r3, #19
 8007918:	04db      	lsls	r3, r3, #19
 800791a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	4413      	add	r3, r2
 8007924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	440a      	add	r2, r1
 8007932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007936:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800793a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800793e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	6999      	ldr	r1, [r3, #24]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	68db      	ldr	r3, [r3, #12]
 8007956:	440b      	add	r3, r1
 8007958:	1e59      	subs	r1, r3, #1
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007962:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007964:	4b9d      	ldr	r3, [pc, #628]	; (8007bdc <USB_EPStartXfer+0x370>)
 8007966:	400b      	ands	r3, r1
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	0148      	lsls	r0, r1, #5
 800796c:	69f9      	ldr	r1, [r7, #28]
 800796e:	4401      	add	r1, r0
 8007970:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007974:	4313      	orrs	r3, r2
 8007976:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007984:	691a      	ldr	r2, [r3, #16]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800798e:	69b9      	ldr	r1, [r7, #24]
 8007990:	0148      	lsls	r0, r1, #5
 8007992:	69f9      	ldr	r1, [r7, #28]
 8007994:	4401      	add	r1, r0
 8007996:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800799a:	4313      	orrs	r3, r2
 800799c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	791b      	ldrb	r3, [r3, #4]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d11f      	bne.n	80079e6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	015a      	lsls	r2, r3, #5
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	0151      	lsls	r1, r2, #5
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	440a      	add	r2, r1
 80079bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079c0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80079c4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d2:	691b      	ldr	r3, [r3, #16]
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	0151      	lsls	r1, r2, #5
 80079d8:	69fa      	ldr	r2, [r7, #28]
 80079da:	440a      	add	r2, r1
 80079dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079e4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80079e6:	79fb      	ldrb	r3, [r7, #7]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d14b      	bne.n	8007a84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d009      	beq.n	8007a08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a00:	461a      	mov	r2, r3
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	791b      	ldrb	r3, [r3, #4]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d128      	bne.n	8007a62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d110      	bne.n	8007a42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	0151      	lsls	r1, r2, #5
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	440a      	add	r2, r1
 8007a36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a3e:	6013      	str	r3, [r2, #0]
 8007a40:	e00f      	b.n	8007a62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	015a      	lsls	r2, r3, #5
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	0151      	lsls	r1, r2, #5
 8007a74:	69fa      	ldr	r2, [r7, #28]
 8007a76:	440a      	add	r2, r1
 8007a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	e133      	b.n	8007cec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	015a      	lsls	r2, r3, #5
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	0151      	lsls	r1, r2, #5
 8007a96:	69fa      	ldr	r2, [r7, #28]
 8007a98:	440a      	add	r2, r1
 8007a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007aa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	791b      	ldrb	r3, [r3, #4]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d015      	beq.n	8007ad8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 811b 	beq.w	8007cec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	2101      	movs	r1, #1
 8007ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8007acc:	69f9      	ldr	r1, [r7, #28]
 8007ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	634b      	str	r3, [r1, #52]	; 0x34
 8007ad6:	e109      	b.n	8007cec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d110      	bne.n	8007b0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	69fa      	ldr	r2, [r7, #28]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b06:	6013      	str	r3, [r2, #0]
 8007b08:	e00f      	b.n	8007b2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	0151      	lsls	r1, r2, #5
 8007b1c:	69fa      	ldr	r2, [r7, #28]
 8007b1e:	440a      	add	r2, r1
 8007b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6919      	ldr	r1, [r3, #16]
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	781a      	ldrb	r2, [r3, #0]
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	699b      	ldr	r3, [r3, #24]
 8007b36:	b298      	uxth	r0, r3
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	9300      	str	r3, [sp, #0]
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fade 	bl	8008100 <USB_WritePacket>
 8007b44:	e0d2      	b.n	8007cec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	0151      	lsls	r1, r2, #5
 8007b58:	69fa      	ldr	r2, [r7, #28]
 8007b5a:	440a      	add	r2, r1
 8007b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b60:	0cdb      	lsrs	r3, r3, #19
 8007b62:	04db      	lsls	r3, r3, #19
 8007b64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d126      	bne.n	8007be0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	691a      	ldr	r2, [r3, #16]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ba8:	69b9      	ldr	r1, [r7, #24]
 8007baa:	0148      	lsls	r0, r1, #5
 8007bac:	69f9      	ldr	r1, [r7, #28]
 8007bae:	4401      	add	r1, r0
 8007bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bd6:	6113      	str	r3, [r2, #16]
 8007bd8:	e03a      	b.n	8007c50 <USB_EPStartXfer+0x3e4>
 8007bda:	bf00      	nop
 8007bdc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	699a      	ldr	r2, [r3, #24]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	4413      	add	r3, r2
 8007bea:	1e5a      	subs	r2, r3, #1
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	8afa      	ldrh	r2, [r7, #22]
 8007bfc:	fb03 f202 	mul.w	r2, r3, r2
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c10:	691a      	ldr	r2, [r3, #16]
 8007c12:	8afb      	ldrh	r3, [r7, #22]
 8007c14:	04d9      	lsls	r1, r3, #19
 8007c16:	4b38      	ldr	r3, [pc, #224]	; (8007cf8 <USB_EPStartXfer+0x48c>)
 8007c18:	400b      	ands	r3, r1
 8007c1a:	69b9      	ldr	r1, [r7, #24]
 8007c1c:	0148      	lsls	r0, r1, #5
 8007c1e:	69f9      	ldr	r1, [r7, #28]
 8007c20:	4401      	add	r1, r0
 8007c22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c26:	4313      	orrs	r3, r2
 8007c28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c36:	691a      	ldr	r2, [r3, #16]
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c40:	69b9      	ldr	r1, [r7, #24]
 8007c42:	0148      	lsls	r0, r1, #5
 8007c44:	69f9      	ldr	r1, [r7, #28]
 8007c46:	4401      	add	r1, r0
 8007c48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d10d      	bne.n	8007c72 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6919      	ldr	r1, [r3, #16]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	460a      	mov	r2, r1
 8007c70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	791b      	ldrb	r3, [r3, #4]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d128      	bne.n	8007ccc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d110      	bne.n	8007cac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	69fa      	ldr	r2, [r7, #28]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ca8:	6013      	str	r3, [r2, #0]
 8007caa:	e00f      	b.n	8007ccc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	0151      	lsls	r1, r2, #5
 8007cde:	69fa      	ldr	r2, [r7, #28]
 8007ce0:	440a      	add	r2, r1
 8007ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ce6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3720      	adds	r7, #32
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	1ff80000 	.word	0x1ff80000

08007cfc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	4613      	mov	r3, r2
 8007d08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	f040 80ce 	bne.w	8007eba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d132      	bne.n	8007d8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	0151      	lsls	r1, r2, #5
 8007d38:	697a      	ldr	r2, [r7, #20]
 8007d3a:	440a      	add	r2, r1
 8007d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007d44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007d48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	693a      	ldr	r2, [r7, #16]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d84:	0cdb      	lsrs	r3, r3, #19
 8007d86:	04db      	lsls	r3, r3, #19
 8007d88:	6113      	str	r3, [r2, #16]
 8007d8a:	e04e      	b.n	8007e2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da6:	0cdb      	lsrs	r3, r3, #19
 8007da8:	04db      	lsls	r3, r3, #19
 8007daa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	015a      	lsls	r2, r3, #5
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	4413      	add	r3, r2
 8007db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	0151      	lsls	r1, r2, #5
 8007dbe:	697a      	ldr	r2, [r7, #20]
 8007dc0:	440a      	add	r2, r1
 8007dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007dce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	699a      	ldr	r2, [r3, #24]
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d903      	bls.n	8007de4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007df0:	691b      	ldr	r3, [r3, #16]
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	0151      	lsls	r1, r2, #5
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	440a      	add	r2, r1
 8007dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e10:	691a      	ldr	r2, [r3, #16]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e1a:	6939      	ldr	r1, [r7, #16]
 8007e1c:	0148      	lsls	r0, r1, #5
 8007e1e:	6979      	ldr	r1, [r7, #20]
 8007e20:	4401      	add	r1, r0
 8007e22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e26:	4313      	orrs	r3, r2
 8007e28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e2a:	79fb      	ldrb	r3, [r7, #7]
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d11e      	bne.n	8007e6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	695b      	ldr	r3, [r3, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d009      	beq.n	8007e4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e44:	461a      	mov	r2, r3
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	015a      	lsls	r2, r3, #5
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	4413      	add	r3, r2
 8007e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	0151      	lsls	r1, r2, #5
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	440a      	add	r2, r1
 8007e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e6a:	6013      	str	r3, [r2, #0]
 8007e6c:	e097      	b.n	8007f9e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	0151      	lsls	r1, r2, #5
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	440a      	add	r2, r1
 8007e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8083 	beq.w	8007f9e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8007eae:	6979      	ldr	r1, [r7, #20]
 8007eb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	634b      	str	r3, [r1, #52]	; 0x34
 8007eb8:	e071      	b.n	8007f9e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	693a      	ldr	r2, [r7, #16]
 8007eca:	0151      	lsls	r1, r2, #5
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	440a      	add	r2, r1
 8007ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ed4:	0cdb      	lsrs	r3, r3, #19
 8007ed6:	04db      	lsls	r3, r3, #19
 8007ed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ef8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007efc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d003      	beq.n	8007f0e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	68da      	ldr	r2, [r3, #12]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	68da      	ldr	r2, [r3, #12]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	0151      	lsls	r1, r2, #5
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	440a      	add	r2, r1
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	015a      	lsls	r2, r3, #5
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f42:	691a      	ldr	r2, [r3, #16]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	69db      	ldr	r3, [r3, #28]
 8007f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f4c:	6939      	ldr	r1, [r7, #16]
 8007f4e:	0148      	lsls	r0, r1, #5
 8007f50:	6979      	ldr	r1, [r7, #20]
 8007f52:	4401      	add	r1, r0
 8007f54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d10d      	bne.n	8007f7e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d009      	beq.n	8007f7e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	6919      	ldr	r1, [r3, #16]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	371c      	adds	r7, #28
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b087      	sub	sp, #28
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	785b      	ldrb	r3, [r3, #1]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d14a      	bne.n	8008060 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe2:	f040 8086 	bne.w	80080f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	683a      	ldr	r2, [r7, #0]
 8007ff8:	7812      	ldrb	r2, [r2, #0]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008004:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008008:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	015a      	lsls	r2, r3, #5
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	4413      	add	r3, r2
 8008014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	0151      	lsls	r1, r2, #5
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	440a      	add	r2, r1
 8008024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800802c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3301      	adds	r3, #1
 8008032:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f242 7210 	movw	r2, #10000	; 0x2710
 800803a:	4293      	cmp	r3, r2
 800803c:	d902      	bls.n	8008044 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	75fb      	strb	r3, [r7, #23]
          break;
 8008042:	e056      	b.n	80080f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008058:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800805c:	d0e7      	beq.n	800802e <USB_EPStopXfer+0x82>
 800805e:	e048      	b.n	80080f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008074:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008078:	d13b      	bne.n	80080f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	0151      	lsls	r1, r2, #5
 8008090:	693a      	ldr	r2, [r7, #16]
 8008092:	440a      	add	r2, r1
 8008094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008098:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800809c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	0151      	lsls	r1, r2, #5
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	440a      	add	r2, r1
 80080b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d902      	bls.n	80080d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	75fb      	strb	r3, [r7, #23]
          break;
 80080d6:	e00c      	b.n	80080f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	015a      	lsls	r2, r3, #5
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	4413      	add	r3, r2
 80080e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080f0:	d0e7      	beq.n	80080c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008100:	b480      	push	{r7}
 8008102:	b089      	sub	sp, #36	; 0x24
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	4611      	mov	r1, r2
 800810c:	461a      	mov	r2, r3
 800810e:	460b      	mov	r3, r1
 8008110:	71fb      	strb	r3, [r7, #7]
 8008112:	4613      	mov	r3, r2
 8008114:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800811e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008122:	2b00      	cmp	r3, #0
 8008124:	d123      	bne.n	800816e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008126:	88bb      	ldrh	r3, [r7, #4]
 8008128:	3303      	adds	r3, #3
 800812a:	089b      	lsrs	r3, r3, #2
 800812c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800812e:	2300      	movs	r3, #0
 8008130:	61bb      	str	r3, [r7, #24]
 8008132:	e018      	b.n	8008166 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008134:	79fb      	ldrb	r3, [r7, #7]
 8008136:	031a      	lsls	r2, r3, #12
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	4413      	add	r3, r2
 800813c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008140:	461a      	mov	r2, r3
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	3301      	adds	r3, #1
 800814c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	3301      	adds	r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	3301      	adds	r3, #1
 8008158:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800815a:	69fb      	ldr	r3, [r7, #28]
 800815c:	3301      	adds	r3, #1
 800815e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	3301      	adds	r3, #1
 8008164:	61bb      	str	r3, [r7, #24]
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	429a      	cmp	r2, r3
 800816c:	d3e2      	bcc.n	8008134 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3724      	adds	r7, #36	; 0x24
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800817c:	b480      	push	{r7}
 800817e:	b08b      	sub	sp, #44	; 0x2c
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	089b      	lsrs	r3, r3, #2
 8008196:	b29b      	uxth	r3, r3
 8008198:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800819a:	88fb      	ldrh	r3, [r7, #6]
 800819c:	f003 0303 	and.w	r3, r3, #3
 80081a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	623b      	str	r3, [r7, #32]
 80081a6:	e014      	b.n	80081d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	3301      	adds	r3, #1
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	3301      	adds	r3, #1
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	3301      	adds	r3, #1
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	3301      	adds	r3, #1
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	3301      	adds	r3, #1
 80081d0:	623b      	str	r3, [r7, #32]
 80081d2:	6a3a      	ldr	r2, [r7, #32]
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d3e6      	bcc.n	80081a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081da:	8bfb      	ldrh	r3, [r7, #30]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01e      	beq.n	800821e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ea:	461a      	mov	r2, r3
 80081ec:	f107 0310 	add.w	r3, r7, #16
 80081f0:	6812      	ldr	r2, [r2, #0]
 80081f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008200:	b2da      	uxtb	r2, r3
 8008202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008204:	701a      	strb	r2, [r3, #0]
      i++;
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	3301      	adds	r3, #1
 800820a:	623b      	str	r3, [r7, #32]
      pDest++;
 800820c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820e:	3301      	adds	r3, #1
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008212:	8bfb      	ldrh	r3, [r7, #30]
 8008214:	3b01      	subs	r3, #1
 8008216:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008218:	8bfb      	ldrh	r3, [r7, #30]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1ea      	bne.n	80081f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008220:	4618      	mov	r0, r3
 8008222:	372c      	adds	r7, #44	; 0x2c
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d12c      	bne.n	80082a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	db12      	blt.n	8008280 <USB_EPSetStall+0x54>
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00f      	beq.n	8008280 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	440a      	add	r2, r1
 8008276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800827a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800827e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	015a      	lsls	r2, r3, #5
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4413      	add	r3, r2
 8008288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	0151      	lsls	r1, r2, #5
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	440a      	add	r2, r1
 8008296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800829a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	e02b      	b.n	80082fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	db12      	blt.n	80082da <USB_EPSetStall+0xae>
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00f      	beq.n	80082da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	0151      	lsls	r1, r2, #5
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	440a      	add	r2, r1
 80082d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68ba      	ldr	r2, [r7, #8]
 80082ea:	0151      	lsls	r1, r2, #5
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	440a      	add	r2, r1
 80082f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3714      	adds	r7, #20
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d128      	bne.n	8008376 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	015a      	lsls	r2, r3, #5
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	4413      	add	r3, r2
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	0151      	lsls	r1, r2, #5
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	440a      	add	r2, r1
 800833a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008342:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	791b      	ldrb	r3, [r3, #4]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d003      	beq.n	8008354 <USB_EPClearStall+0x4c>
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	791b      	ldrb	r3, [r3, #4]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d138      	bne.n	80083c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	0151      	lsls	r1, r2, #5
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	440a      	add	r2, r1
 800836a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800836e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	e027      	b.n	80083c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008390:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008394:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	791b      	ldrb	r3, [r3, #4]
 800839a:	2b03      	cmp	r3, #3
 800839c:	d003      	beq.n	80083a6 <USB_EPClearStall+0x9e>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	791b      	ldrb	r3, [r3, #4]
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d10f      	bne.n	80083c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	0151      	lsls	r1, r2, #5
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	440a      	add	r2, r1
 80083bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	78fb      	ldrb	r3, [r7, #3]
 8008402:	011b      	lsls	r3, r3, #4
 8008404:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008408:	68f9      	ldr	r1, [r7, #12]
 800840a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800840e:	4313      	orrs	r3, r2
 8008410:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800843a:	f023 0303 	bic.w	r3, r3, #3
 800843e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800844e:	f023 0302 	bic.w	r3, r3, #2
 8008452:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008462:	b480      	push	{r7}
 8008464:	b085      	sub	sp, #20
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800847c:	f023 0303 	bic.w	r3, r3, #3
 8008480:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008490:	f043 0302 	orr.w	r3, r3, #2
 8008494:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3714      	adds	r7, #20
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b085      	sub	sp, #20
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	4013      	ands	r3, r2
 80084ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084bc:	68fb      	ldr	r3, [r7, #12]
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	4013      	ands	r3, r2
 80084ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	0c1b      	lsrs	r3, r3, #16
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008510:	699b      	ldr	r3, [r3, #24]
 8008512:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	68ba      	ldr	r2, [r7, #8]
 800851e:	4013      	ands	r3, r2
 8008520:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	b29b      	uxth	r3, r3
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008532:	b480      	push	{r7}
 8008534:	b085      	sub	sp, #20
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	460b      	mov	r3, r1
 800853c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008542:	78fb      	ldrb	r3, [r7, #3]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	4013      	ands	r3, r2
 800855e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008560:	68bb      	ldr	r3, [r7, #8]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800856e:	b480      	push	{r7}
 8008570:	b087      	sub	sp, #28
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	460b      	mov	r3, r1
 8008578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008592:	78fb      	ldrb	r3, [r7, #3]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	fa22 f303 	lsr.w	r3, r2, r3
 800859e:	01db      	lsls	r3, r3, #7
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80085a8:	78fb      	ldrb	r3, [r7, #3]
 80085aa:	015a      	lsls	r2, r3, #5
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	4013      	ands	r3, r2
 80085ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085bc:	68bb      	ldr	r3, [r7, #8]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	371c      	adds	r7, #28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr

080085ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	f003 0301 	and.w	r3, r3, #1
}
 80085da:	4618      	mov	r0, r3
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b085      	sub	sp, #20
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008600:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008604:	f023 0307 	bic.w	r3, r3, #7
 8008608:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800861c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	460b      	mov	r3, r1
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	333c      	adds	r3, #60	; 0x3c
 8008642:	3304      	adds	r3, #4
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	4a26      	ldr	r2, [pc, #152]	; (80086e4 <USB_EP0_OutStart+0xb8>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d90a      	bls.n	8008666 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800865c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008660:	d101      	bne.n	8008666 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	e037      	b.n	80086d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800866c:	461a      	mov	r2, r3
 800866e:	2300      	movs	r3, #0
 8008670:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008678:	691b      	ldr	r3, [r3, #16]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008684:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	697a      	ldr	r2, [r7, #20]
 8008690:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008694:	f043 0318 	orr.w	r3, r3, #24
 8008698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	697a      	ldr	r2, [r7, #20]
 80086a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80086ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80086ae:	7afb      	ldrb	r3, [r7, #11]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d10f      	bne.n	80086d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ba:	461a      	mov	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80086d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	4f54300a 	.word	0x4f54300a

080086e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086f0:	2300      	movs	r3, #0
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3301      	adds	r3, #1
 80086f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	4a13      	ldr	r2, [pc, #76]	; (800874c <USB_CoreReset+0x64>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d901      	bls.n	8008706 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	e01b      	b.n	800873e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	daf2      	bge.n	80086f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f043 0201 	orr.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3301      	adds	r3, #1
 8008722:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4a09      	ldr	r2, [pc, #36]	; (800874c <USB_CoreReset+0x64>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d901      	bls.n	8008730 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e006      	b.n	800873e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b01      	cmp	r3, #1
 800873a:	d0f0      	beq.n	800871e <USB_CoreReset+0x36>

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3714      	adds	r7, #20
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	00030d40 	.word	0x00030d40

08008750 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8008750:	b480      	push	{r7}
 8008752:	b085      	sub	sp, #20
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8008758:	4b0f      	ldr	r3, [pc, #60]	; (8008798 <LL_mDelay+0x48>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800875e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008766:	d00c      	beq.n	8008782 <LL_mDelay+0x32>
  {
    Delay++;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	3301      	adds	r3, #1
 800876c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800876e:	e008      	b.n	8008782 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8008770:	4b09      	ldr	r3, [pc, #36]	; (8008798 <LL_mDelay+0x48>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d002      	beq.n	8008782 <LL_mDelay+0x32>
    {
      Delay--;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3b01      	subs	r3, #1
 8008780:	607b      	str	r3, [r7, #4]
  while (Delay)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1f3      	bne.n	8008770 <LL_mDelay+0x20>
    }
  }
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	e000e010 	.word	0xe000e010

0800879c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80087a4:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <LL_SetSystemCoreClock+0x1c>)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6013      	str	r3, [r2, #0]
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	20000004 	.word	0x20000004

080087bc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80087cc:	f002 fc9e 	bl	800b10c <USBD_static_malloc>
 80087d0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d109      	bne.n	80087ec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	32b0      	adds	r2, #176	; 0xb0
 80087e2:	2100      	movs	r1, #0
 80087e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087e8:	2302      	movs	r3, #2
 80087ea:	e0d4      	b.n	8008996 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80087ec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80087f0:	2100      	movs	r1, #0
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f002 fd00 	bl	800b1f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	32b0      	adds	r2, #176	; 0xb0
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	32b0      	adds	r2, #176	; 0xb0
 8008812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	7c1b      	ldrb	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d138      	bne.n	8008896 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008824:	4b5e      	ldr	r3, [pc, #376]	; (80089a0 <USBD_CDC_Init+0x1e4>)
 8008826:	7819      	ldrb	r1, [r3, #0]
 8008828:	f44f 7300 	mov.w	r3, #512	; 0x200
 800882c:	2202      	movs	r2, #2
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f002 fb49 	bl	800aec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008834:	4b5a      	ldr	r3, [pc, #360]	; (80089a0 <USBD_CDC_Init+0x1e4>)
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 020f 	and.w	r2, r3, #15
 800883c:	6879      	ldr	r1, [r7, #4]
 800883e:	4613      	mov	r3, r2
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	4413      	add	r3, r2
 8008844:	009b      	lsls	r3, r3, #2
 8008846:	440b      	add	r3, r1
 8008848:	3324      	adds	r3, #36	; 0x24
 800884a:	2201      	movs	r2, #1
 800884c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800884e:	4b55      	ldr	r3, [pc, #340]	; (80089a4 <USBD_CDC_Init+0x1e8>)
 8008850:	7819      	ldrb	r1, [r3, #0]
 8008852:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008856:	2202      	movs	r2, #2
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f002 fb34 	bl	800aec6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800885e:	4b51      	ldr	r3, [pc, #324]	; (80089a4 <USBD_CDC_Init+0x1e8>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 020f 	and.w	r2, r3, #15
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	4613      	mov	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	4413      	add	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	440b      	add	r3, r1
 8008872:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008876:	2201      	movs	r2, #1
 8008878:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800887a:	4b4b      	ldr	r3, [pc, #300]	; (80089a8 <USBD_CDC_Init+0x1ec>)
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	f003 020f 	and.w	r2, r3, #15
 8008882:	6879      	ldr	r1, [r7, #4]
 8008884:	4613      	mov	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	440b      	add	r3, r1
 800888e:	3326      	adds	r3, #38	; 0x26
 8008890:	2210      	movs	r2, #16
 8008892:	801a      	strh	r2, [r3, #0]
 8008894:	e035      	b.n	8008902 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008896:	4b42      	ldr	r3, [pc, #264]	; (80089a0 <USBD_CDC_Init+0x1e4>)
 8008898:	7819      	ldrb	r1, [r3, #0]
 800889a:	2340      	movs	r3, #64	; 0x40
 800889c:	2202      	movs	r2, #2
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f002 fb11 	bl	800aec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088a4:	4b3e      	ldr	r3, [pc, #248]	; (80089a0 <USBD_CDC_Init+0x1e4>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	f003 020f 	and.w	r2, r3, #15
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	3324      	adds	r3, #36	; 0x24
 80088ba:	2201      	movs	r2, #1
 80088bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088be:	4b39      	ldr	r3, [pc, #228]	; (80089a4 <USBD_CDC_Init+0x1e8>)
 80088c0:	7819      	ldrb	r1, [r3, #0]
 80088c2:	2340      	movs	r3, #64	; 0x40
 80088c4:	2202      	movs	r2, #2
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 fafd 	bl	800aec6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088cc:	4b35      	ldr	r3, [pc, #212]	; (80089a4 <USBD_CDC_Init+0x1e8>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f003 020f 	and.w	r2, r3, #15
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088e4:	2201      	movs	r2, #1
 80088e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088e8:	4b2f      	ldr	r3, [pc, #188]	; (80089a8 <USBD_CDC_Init+0x1ec>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 020f 	and.w	r2, r3, #15
 80088f0:	6879      	ldr	r1, [r7, #4]
 80088f2:	4613      	mov	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	4413      	add	r3, r2
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	440b      	add	r3, r1
 80088fc:	3326      	adds	r3, #38	; 0x26
 80088fe:	2210      	movs	r2, #16
 8008900:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008902:	4b29      	ldr	r3, [pc, #164]	; (80089a8 <USBD_CDC_Init+0x1ec>)
 8008904:	7819      	ldrb	r1, [r3, #0]
 8008906:	2308      	movs	r3, #8
 8008908:	2203      	movs	r2, #3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f002 fadb 	bl	800aec6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008910:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <USBD_CDC_Init+0x1ec>)
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	f003 020f 	and.w	r2, r3, #15
 8008918:	6879      	ldr	r1, [r7, #4]
 800891a:	4613      	mov	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	440b      	add	r3, r1
 8008924:	3324      	adds	r3, #36	; 0x24
 8008926:	2201      	movs	r2, #1
 8008928:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	33b0      	adds	r3, #176	; 0xb0
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	4413      	add	r3, r2
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2200      	movs	r2, #0
 800894a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008960:	2302      	movs	r3, #2
 8008962:	e018      	b.n	8008996 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	7c1b      	ldrb	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d10a      	bne.n	8008982 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800896c:	4b0d      	ldr	r3, [pc, #52]	; (80089a4 <USBD_CDC_Init+0x1e8>)
 800896e:	7819      	ldrb	r1, [r3, #0]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f002 fb92 	bl	800b0a4 <USBD_LL_PrepareReceive>
 8008980:	e008      	b.n	8008994 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008982:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <USBD_CDC_Init+0x1e8>)
 8008984:	7819      	ldrb	r1, [r3, #0]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800898c:	2340      	movs	r3, #64	; 0x40
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f002 fb88 	bl	800b0a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	3710      	adds	r7, #16
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20000097 	.word	0x20000097
 80089a4:	20000098 	.word	0x20000098
 80089a8:	20000099 	.word	0x20000099

080089ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80089b8:	4b3a      	ldr	r3, [pc, #232]	; (8008aa4 <USBD_CDC_DeInit+0xf8>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	4619      	mov	r1, r3
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f002 faa7 	bl	800af12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80089c4:	4b37      	ldr	r3, [pc, #220]	; (8008aa4 <USBD_CDC_DeInit+0xf8>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	f003 020f 	and.w	r2, r3, #15
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	3324      	adds	r3, #36	; 0x24
 80089da:	2200      	movs	r2, #0
 80089dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80089de:	4b32      	ldr	r3, [pc, #200]	; (8008aa8 <USBD_CDC_DeInit+0xfc>)
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	4619      	mov	r1, r3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f002 fa94 	bl	800af12 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80089ea:	4b2f      	ldr	r3, [pc, #188]	; (8008aa8 <USBD_CDC_DeInit+0xfc>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	f003 020f 	and.w	r2, r3, #15
 80089f2:	6879      	ldr	r1, [r7, #4]
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	440b      	add	r3, r1
 80089fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a02:	2200      	movs	r2, #0
 8008a04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a06:	4b29      	ldr	r3, [pc, #164]	; (8008aac <USBD_CDC_DeInit+0x100>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f002 fa80 	bl	800af12 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a12:	4b26      	ldr	r3, [pc, #152]	; (8008aac <USBD_CDC_DeInit+0x100>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	f003 020f 	and.w	r2, r3, #15
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	3324      	adds	r3, #36	; 0x24
 8008a28:	2200      	movs	r2, #0
 8008a2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a2c:	4b1f      	ldr	r3, [pc, #124]	; (8008aac <USBD_CDC_DeInit+0x100>)
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	3326      	adds	r3, #38	; 0x26
 8008a42:	2200      	movs	r2, #0
 8008a44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	32b0      	adds	r2, #176	; 0xb0
 8008a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01f      	beq.n	8008a98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	33b0      	adds	r3, #176	; 0xb0
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	4413      	add	r3, r2
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	32b0      	adds	r2, #176	; 0xb0
 8008a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 fb54 	bl	800b128 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	32b0      	adds	r2, #176	; 0xb0
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000097 	.word	0x20000097
 8008aa8:	20000098 	.word	0x20000098
 8008aac:	20000099 	.word	0x20000099

08008ab0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	32b0      	adds	r2, #176	; 0xb0
 8008ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008aca:	2300      	movs	r3, #0
 8008acc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d101      	bne.n	8008ae0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e0bf      	b.n	8008c60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d050      	beq.n	8008b8e <USBD_CDC_Setup+0xde>
 8008aec:	2b20      	cmp	r3, #32
 8008aee:	f040 80af 	bne.w	8008c50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	88db      	ldrh	r3, [r3, #6]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d03a      	beq.n	8008b70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	781b      	ldrb	r3, [r3, #0]
 8008afe:	b25b      	sxtb	r3, r3
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	da1b      	bge.n	8008b3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	33b0      	adds	r3, #176	; 0xb0
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	683a      	ldr	r2, [r7, #0]
 8008b18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b1c:	683a      	ldr	r2, [r7, #0]
 8008b1e:	88d2      	ldrh	r2, [r2, #6]
 8008b20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	2b07      	cmp	r3, #7
 8008b28:	bf28      	it	cs
 8008b2a:	2307      	movcs	r3, #7
 8008b2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	89fa      	ldrh	r2, [r7, #14]
 8008b32:	4619      	mov	r1, r3
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f001 fd89 	bl	800a64c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b3a:	e090      	b.n	8008c5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	785a      	ldrb	r2, [r3, #1]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	88db      	ldrh	r3, [r3, #6]
 8008b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8008b4c:	d803      	bhi.n	8008b56 <USBD_CDC_Setup+0xa6>
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	88db      	ldrh	r3, [r3, #6]
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	e000      	b.n	8008b58 <USBD_CDC_Setup+0xa8>
 8008b56:	2240      	movs	r2, #64	; 0x40
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b5e:	6939      	ldr	r1, [r7, #16]
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008b66:	461a      	mov	r2, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f001 fd9b 	bl	800a6a4 <USBD_CtlPrepareRx>
      break;
 8008b6e:	e076      	b.n	8008c5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	33b0      	adds	r3, #176	; 0xb0
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	683a      	ldr	r2, [r7, #0]
 8008b84:	7850      	ldrb	r0, [r2, #1]
 8008b86:	2200      	movs	r2, #0
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	4798      	blx	r3
      break;
 8008b8c:	e067      	b.n	8008c5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	785b      	ldrb	r3, [r3, #1]
 8008b92:	2b0b      	cmp	r3, #11
 8008b94:	d851      	bhi.n	8008c3a <USBD_CDC_Setup+0x18a>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <USBD_CDC_Setup+0xec>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bcd 	.word	0x08008bcd
 8008ba0:	08008c49 	.word	0x08008c49
 8008ba4:	08008c3b 	.word	0x08008c3b
 8008ba8:	08008c3b 	.word	0x08008c3b
 8008bac:	08008c3b 	.word	0x08008c3b
 8008bb0:	08008c3b 	.word	0x08008c3b
 8008bb4:	08008c3b 	.word	0x08008c3b
 8008bb8:	08008c3b 	.word	0x08008c3b
 8008bbc:	08008c3b 	.word	0x08008c3b
 8008bc0:	08008c3b 	.word	0x08008c3b
 8008bc4:	08008bf7 	.word	0x08008bf7
 8008bc8:	08008c21 	.word	0x08008c21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b03      	cmp	r3, #3
 8008bd6:	d107      	bne.n	8008be8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008bd8:	f107 030a 	add.w	r3, r7, #10
 8008bdc:	2202      	movs	r2, #2
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f001 fd33 	bl	800a64c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008be6:	e032      	b.n	8008c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f001 fcbd 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf4:	e02b      	b.n	8008c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	d107      	bne.n	8008c12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c02:	f107 030d 	add.w	r3, r7, #13
 8008c06:	2201      	movs	r2, #1
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 fd1e 	bl	800a64c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c10:	e01d      	b.n	8008c4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f001 fca8 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c1e:	e016      	b.n	8008c4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d00f      	beq.n	8008c4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 fc9b 	bl	800a56a <USBD_CtlError>
            ret = USBD_FAIL;
 8008c34:	2303      	movs	r3, #3
 8008c36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c38:	e008      	b.n	8008c4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f001 fc94 	bl	800a56a <USBD_CtlError>
          ret = USBD_FAIL;
 8008c42:	2303      	movs	r3, #3
 8008c44:	75fb      	strb	r3, [r7, #23]
          break;
 8008c46:	e002      	b.n	8008c4e <USBD_CDC_Setup+0x19e>
          break;
 8008c48:	bf00      	nop
 8008c4a:	e008      	b.n	8008c5e <USBD_CDC_Setup+0x1ae>
          break;
 8008c4c:	bf00      	nop
      }
      break;
 8008c4e:	e006      	b.n	8008c5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f001 fc89 	bl	800a56a <USBD_CtlError>
      ret = USBD_FAIL;
 8008c58:	2303      	movs	r3, #3
 8008c5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008c5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3718      	adds	r7, #24
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	32b0      	adds	r2, #176	; 0xb0
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e065      	b.n	8008d5e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	32b0      	adds	r2, #176	; 0xb0
 8008c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	f003 020f 	and.w	r2, r3, #15
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	3318      	adds	r3, #24
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d02f      	beq.n	8008d1c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	f003 020f 	and.w	r2, r3, #15
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	3318      	adds	r3, #24
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	78fb      	ldrb	r3, [r7, #3]
 8008cd4:	f003 010f 	and.w	r1, r3, #15
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	440b      	add	r3, r1
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4403      	add	r3, r0
 8008ce4:	3348      	adds	r3, #72	; 0x48
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cec:	fb01 f303 	mul.w	r3, r1, r3
 8008cf0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d112      	bne.n	8008d1c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008cf6:	78fb      	ldrb	r3, [r7, #3]
 8008cf8:	f003 020f 	and.w	r2, r3, #15
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	3318      	adds	r3, #24
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d0e:	78f9      	ldrb	r1, [r7, #3]
 8008d10:	2300      	movs	r3, #0
 8008d12:	2200      	movs	r2, #0
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f002 f9a4 	bl	800b062 <USBD_LL_Transmit>
 8008d1a:	e01f      	b.n	8008d5c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	33b0      	adds	r3, #176	; 0xb0
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d010      	beq.n	8008d5c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	33b0      	adds	r3, #176	; 0xb0
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	68ba      	ldr	r2, [r7, #8]
 8008d4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d58:	78fa      	ldrb	r2, [r7, #3]
 8008d5a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d66:	b580      	push	{r7, lr}
 8008d68:	b084      	sub	sp, #16
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	460b      	mov	r3, r1
 8008d70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	32b0      	adds	r2, #176	; 0xb0
 8008d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d80:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	32b0      	adds	r2, #176	; 0xb0
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e01a      	b.n	8008dce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f002 f9a2 	bl	800b0e6 <USBD_LL_GetRxDataSize>
 8008da2:	4602      	mov	r2, r0
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	33b0      	adds	r3, #176	; 0xb0
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	32b0      	adds	r2, #176	; 0xb0
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e025      	b.n	8008e44 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	33b0      	adds	r3, #176	; 0xb0
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d01a      	beq.n	8008e42 <USBD_CDC_EP0_RxReady+0x6c>
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e12:	2bff      	cmp	r3, #255	; 0xff
 8008e14:	d015      	beq.n	8008e42 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	33b0      	adds	r3, #176	; 0xb0
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e2e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e36:	b292      	uxth	r2, r2
 8008e38:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	22ff      	movs	r2, #255	; 0xff
 8008e3e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e54:	2182      	movs	r1, #130	; 0x82
 8008e56:	4818      	ldr	r0, [pc, #96]	; (8008eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e58:	f000 fd4f 	bl	80098fa <USBD_GetEpDesc>
 8008e5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e5e:	2101      	movs	r1, #1
 8008e60:	4815      	ldr	r0, [pc, #84]	; (8008eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e62:	f000 fd4a 	bl	80098fa <USBD_GetEpDesc>
 8008e66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e68:	2181      	movs	r1, #129	; 0x81
 8008e6a:	4813      	ldr	r0, [pc, #76]	; (8008eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e6c:	f000 fd45 	bl	80098fa <USBD_GetEpDesc>
 8008e70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2210      	movs	r2, #16
 8008e7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d006      	beq.n	8008e92 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e8c:	711a      	strb	r2, [r3, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d006      	beq.n	8008ea6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ea0:	711a      	strb	r2, [r3, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2243      	movs	r2, #67	; 0x43
 8008eaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008eac:	4b02      	ldr	r3, [pc, #8]	; (8008eb8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20000054 	.word	0x20000054

08008ebc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ec4:	2182      	movs	r1, #130	; 0x82
 8008ec6:	4818      	ldr	r0, [pc, #96]	; (8008f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ec8:	f000 fd17 	bl	80098fa <USBD_GetEpDesc>
 8008ecc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ece:	2101      	movs	r1, #1
 8008ed0:	4815      	ldr	r0, [pc, #84]	; (8008f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ed2:	f000 fd12 	bl	80098fa <USBD_GetEpDesc>
 8008ed6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ed8:	2181      	movs	r1, #129	; 0x81
 8008eda:	4813      	ldr	r0, [pc, #76]	; (8008f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008edc:	f000 fd0d 	bl	80098fa <USBD_GetEpDesc>
 8008ee0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d002      	beq.n	8008eee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	2210      	movs	r2, #16
 8008eec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d006      	beq.n	8008f02 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	711a      	strb	r2, [r3, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f042 0202 	orr.w	r2, r2, #2
 8008f00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d006      	beq.n	8008f16 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	711a      	strb	r2, [r3, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f042 0202 	orr.w	r2, r2, #2
 8008f14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2243      	movs	r2, #67	; 0x43
 8008f1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f1c:	4b02      	ldr	r3, [pc, #8]	; (8008f28 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000054 	.word	0x20000054

08008f2c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f34:	2182      	movs	r1, #130	; 0x82
 8008f36:	4818      	ldr	r0, [pc, #96]	; (8008f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f38:	f000 fcdf 	bl	80098fa <USBD_GetEpDesc>
 8008f3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4815      	ldr	r0, [pc, #84]	; (8008f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f42:	f000 fcda 	bl	80098fa <USBD_GetEpDesc>
 8008f46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f48:	2181      	movs	r1, #129	; 0x81
 8008f4a:	4813      	ldr	r0, [pc, #76]	; (8008f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f4c:	f000 fcd5 	bl	80098fa <USBD_GetEpDesc>
 8008f50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d002      	beq.n	8008f5e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	2210      	movs	r2, #16
 8008f5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d006      	beq.n	8008f72 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f6c:	711a      	strb	r2, [r3, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d006      	beq.n	8008f86 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f80:	711a      	strb	r2, [r3, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2243      	movs	r2, #67	; 0x43
 8008f8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f8c:	4b02      	ldr	r3, [pc, #8]	; (8008f98 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3718      	adds	r7, #24
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	20000054 	.word	0x20000054

08008f9c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	220a      	movs	r2, #10
 8008fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008faa:	4b03      	ldr	r3, [pc, #12]	; (8008fb8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	20000010 	.word	0x20000010

08008fbc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d101      	bne.n	8008fd0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008fcc:	2303      	movs	r3, #3
 8008fce:	e009      	b.n	8008fe4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	33b0      	adds	r3, #176	; 0xb0
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4413      	add	r3, r2
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008fe2:	2300      	movs	r3, #0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b087      	sub	sp, #28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	60f8      	str	r0, [r7, #12]
 8008ff8:	60b9      	str	r1, [r7, #8]
 8008ffa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	32b0      	adds	r2, #176	; 0xb0
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d101      	bne.n	8009016 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009012:	2303      	movs	r3, #3
 8009014:	e008      	b.n	8009028 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32b0      	adds	r2, #176	; 0xb0
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009054:	2303      	movs	r3, #3
 8009056:	e004      	b.n	8009062 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3714      	adds	r7, #20
 8009066:	46bd      	mov	sp, r7
 8009068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906c:	4770      	bx	lr
	...

08009070 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	32b0      	adds	r2, #176	; 0xb0
 8009082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009086:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009088:	2301      	movs	r3, #1
 800908a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	32b0      	adds	r2, #176	; 0xb0
 8009096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	e025      	b.n	80090ee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d11f      	bne.n	80090ec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80090b4:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <USBD_CDC_TransmitPacket+0x88>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4403      	add	r3, r0
 80090ce:	3318      	adds	r3, #24
 80090d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <USBD_CDC_TransmitPacket+0x88>)
 80090d4:	7819      	ldrb	r1, [r3, #0]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 ffbd 	bl	800b062 <USBD_LL_Transmit>

    ret = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000097 	.word	0x20000097

080090fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32b0      	adds	r2, #176	; 0xb0
 800910e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009112:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	32b0      	adds	r2, #176	; 0xb0
 800911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	e018      	b.n	800915c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7c1b      	ldrb	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009132:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <USBD_CDC_ReceivePacket+0x68>)
 8009134:	7819      	ldrb	r1, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800913c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f001 ffaf 	bl	800b0a4 <USBD_LL_PrepareReceive>
 8009146:	e008      	b.n	800915a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <USBD_CDC_ReceivePacket+0x68>)
 800914a:	7819      	ldrb	r1, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 ffa5 	bl	800b0a4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000098 	.word	0x20000098

08009168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	e01f      	b.n	80091c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	79fa      	ldrb	r2, [r7, #7]
 80091b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f001 fe1f 	bl	800adf8 <USBD_LL_Init>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	e025      	b.n	800922c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32ae      	adds	r2, #174	; 0xae
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00f      	beq.n	800921c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	; 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	f107 020e 	add.w	r2, r7, #14
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	4602      	mov	r2, r0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fe27 	bl	800ae90 <USBD_LL_Start>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f908 	bl	800a4f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	2b02      	cmp	r3, #2
 8009308:	d01a      	beq.n	8009340 <USBD_LL_SetupStage+0x72>
 800930a:	2b02      	cmp	r3, #2
 800930c:	d822      	bhi.n	8009354 <USBD_LL_SetupStage+0x86>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <USBD_LL_SetupStage+0x4a>
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00a      	beq.n	800932c <USBD_LL_SetupStage+0x5e>
 8009316:	e01d      	b.n	8009354 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fb5f 	bl	80099e4 <USBD_StdDevReq>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
      break;
 800932a:	e020      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fbc7 	bl	8009ac8 <USBD_StdItfReq>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
      break;
 800933e:	e016      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fc29 	bl	8009ba0 <USBD_StdEPReq>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
      break;
 8009352:	e00c      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800935a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fdf4 	bl	800af50 <USBD_LL_StallEP>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
      break;
 800936c:	bf00      	nop
  }

  return ret;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d16e      	bne.n	800946e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009396:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800939e:	2b03      	cmp	r3, #3
 80093a0:	f040 8098 	bne.w	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d913      	bls.n	80093d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bf28      	it	cs
 80093ca:	4613      	movcs	r3, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f001 f984 	bl	800a6de <USBD_CtlContinueRx>
 80093d6:	e07d      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d014      	beq.n	8009410 <USBD_LL_DataOutStage+0x98>
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d81d      	bhi.n	8009426 <USBD_LL_DataOutStage+0xae>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <USBD_LL_DataOutStage+0x7c>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d003      	beq.n	80093fa <USBD_LL_DataOutStage+0x82>
 80093f2:	e018      	b.n	8009426 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	75bb      	strb	r3, [r7, #22]
            break;
 80093f8:	e018      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009400:	b2db      	uxtb	r3, r3
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fa5e 	bl	80098c6 <USBD_CoreFindIF>
 800940a:	4603      	mov	r3, r0
 800940c:	75bb      	strb	r3, [r7, #22]
            break;
 800940e:	e00d      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009416:	b2db      	uxtb	r3, r3
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 fa60 	bl	80098e0 <USBD_CoreFindEP>
 8009420:	4603      	mov	r3, r0
 8009422:	75bb      	strb	r3, [r7, #22]
            break;
 8009424:	e002      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	75bb      	strb	r3, [r7, #22]
            break;
 800942a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800942c:	7dbb      	ldrb	r3, [r7, #22]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d119      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d113      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800943e:	7dba      	ldrb	r2, [r7, #22]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	32ae      	adds	r2, #174	; 0xae
 8009444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800944e:	7dba      	ldrb	r2, [r7, #22]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	32ae      	adds	r2, #174	; 0xae
 800945c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f001 f94a 	bl	800a700 <USBD_CtlSendStatus>
 800946c:	e032      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009474:	b2db      	uxtb	r3, r3
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fa31 	bl	80098e0 <USBD_CoreFindEP>
 800947e:	4603      	mov	r3, r0
 8009480:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009482:	7dbb      	ldrb	r3, [r7, #22]
 8009484:	2bff      	cmp	r3, #255	; 0xff
 8009486:	d025      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
 8009488:	7dbb      	ldrb	r3, [r7, #22]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d122      	bne.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b03      	cmp	r3, #3
 8009498:	d117      	bne.n	80094ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800949a:	7dba      	ldrb	r2, [r7, #22]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	32ae      	adds	r2, #174	; 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00f      	beq.n	80094ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094aa:	7dba      	ldrb	r2, [r7, #22]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094b2:	7dba      	ldrb	r2, [r7, #22]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	32ae      	adds	r2, #174	; 0xae
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	7afa      	ldrb	r2, [r7, #11]
 80094c0:	4611      	mov	r1, r2
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	e000      	b.n	80094d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	460b      	mov	r3, r1
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d16f      	bne.n	80095d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3314      	adds	r3, #20
 80094f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d15a      	bne.n	80095b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	429a      	cmp	r2, r3
 800950c:	d914      	bls.n	8009538 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	461a      	mov	r2, r3
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f001 f8ac 	bl	800a682 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952a:	2300      	movs	r3, #0
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f001 fdb7 	bl	800b0a4 <USBD_LL_PrepareReceive>
 8009536:	e03f      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	429a      	cmp	r2, r3
 8009542:	d11c      	bne.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800954c:	429a      	cmp	r2, r3
 800954e:	d316      	bcc.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800955a:	429a      	cmp	r2, r3
 800955c:	d20f      	bcs.n	800957e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800955e:	2200      	movs	r2, #0
 8009560:	2100      	movs	r1, #0
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f88d 	bl	800a682 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009570:	2300      	movs	r3, #0
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f001 fd94 	bl	800b0a4 <USBD_LL_PrepareReceive>
 800957c:	e01c      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d10f      	bne.n	80095aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095aa:	2180      	movs	r1, #128	; 0x80
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f001 fccf 	bl	800af50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f001 f8b7 	bl	800a726 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d03a      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff fe42 	bl	800924c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095d0:	e032      	b.n	8009638 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f97f 	bl	80098e0 <USBD_CoreFindEP>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	2bff      	cmp	r3, #255	; 0xff
 80095ea:	d025      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d122      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d11c      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095fe:	7dfa      	ldrb	r2, [r7, #23]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	32ae      	adds	r2, #174	; 0xae
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d014      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800960e:	7dfa      	ldrb	r2, [r7, #23]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009616:	7dfa      	ldrb	r2, [r7, #23]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	32ae      	adds	r2, #174	; 0xae
 800961c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	7afa      	ldrb	r2, [r7, #11]
 8009624:	4611      	mov	r1, r2
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800962e:	7dbb      	ldrb	r3, [r7, #22]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	e000      	b.n	800963a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d014      	beq.n	80096a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6852      	ldr	r2, [r2, #4]
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	4611      	mov	r1, r2
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096a4:	2303      	movs	r3, #3
 80096a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	2200      	movs	r2, #0
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fc09 	bl	800aec6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2240      	movs	r2, #64	; 0x40
 80096c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	2200      	movs	r2, #0
 80096c8:	2180      	movs	r1, #128	; 0x80
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 fbfb 	bl	800aec6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2240      	movs	r2, #64	; 0x40
 80096da:	621a      	str	r2, [r3, #32]

  return ret;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009714:	b2da      	uxtb	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2204      	movs	r2, #4
 8009720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b04      	cmp	r3, #4
 8009744:	d106      	bne.n	8009754 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800974c:	b2da      	uxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b03      	cmp	r3, #3
 8009774:	d110      	bne.n	8009798 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32ae      	adds	r2, #174	; 0xae
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e01c      	b.n	80097fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d115      	bne.n	80097fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	32ae      	adds	r2, #174	; 0xae
 80097da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	4611      	mov	r1, r2
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	32ae      	adds	r2, #174	; 0xae
 800981c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009824:	2303      	movs	r3, #3
 8009826:	e01c      	b.n	8009862 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b03      	cmp	r3, #3
 8009832:	d115      	bne.n	8009860 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	32ae      	adds	r2, #174	; 0xae
 800983e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32ae      	adds	r2, #174	; 0xae
 8009852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	4611      	mov	r1, r2
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00e      	beq.n	80098bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6852      	ldr	r2, [r2, #4]
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	4611      	mov	r1, r2
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098b8:	2303      	movs	r3, #3
 80098ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b086      	sub	sp, #24
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	885b      	ldrh	r3, [r3, #2]
 8009916:	b29a      	uxth	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	429a      	cmp	r2, r3
 8009920:	d920      	bls.n	8009964 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800992a:	e013      	b.n	8009954 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800992c:	f107 030a 	add.w	r3, r7, #10
 8009930:	4619      	mov	r1, r3
 8009932:	6978      	ldr	r0, [r7, #20]
 8009934:	f000 f81b 	bl	800996e <USBD_GetNextDesc>
 8009938:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b05      	cmp	r3, #5
 8009940:	d108      	bne.n	8009954 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	789b      	ldrb	r3, [r3, #2]
 800994a:	78fa      	ldrb	r2, [r7, #3]
 800994c:	429a      	cmp	r2, r3
 800994e:	d008      	beq.n	8009962 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	885b      	ldrh	r3, [r3, #2]
 8009958:	b29a      	uxth	r2, r3
 800995a:	897b      	ldrh	r3, [r7, #10]
 800995c:	429a      	cmp	r2, r3
 800995e:	d8e5      	bhi.n	800992c <USBD_GetEpDesc+0x32>
 8009960:	e000      	b.n	8009964 <USBD_GetEpDesc+0x6a>
          break;
 8009962:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009964:	693b      	ldr	r3, [r7, #16]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	881a      	ldrh	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	4413      	add	r3, r2
 8009988:	b29a      	uxth	r2, r3
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	3301      	adds	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099c6:	8a3b      	ldrh	r3, [r7, #16]
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	b21a      	sxth	r2, r3
 80099cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	b21b      	sxth	r3, r3
 80099d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099d6:	89fb      	ldrh	r3, [r7, #14]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d005      	beq.n	8009a0a <USBD_StdDevReq+0x26>
 80099fe:	2b40      	cmp	r3, #64	; 0x40
 8009a00:	d857      	bhi.n	8009ab2 <USBD_StdDevReq+0xce>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00f      	beq.n	8009a26 <USBD_StdDevReq+0x42>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d153      	bne.n	8009ab2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	32ae      	adds	r2, #174	; 0xae
 8009a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	4798      	blx	r3
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
      break;
 8009a24:	e04a      	b.n	8009abc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b09      	cmp	r3, #9
 8009a2c:	d83b      	bhi.n	8009aa6 <USBD_StdDevReq+0xc2>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <USBD_StdDevReq+0x50>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a89 	.word	0x08009a89
 8009a38:	08009a9d 	.word	0x08009a9d
 8009a3c:	08009aa7 	.word	0x08009aa7
 8009a40:	08009a93 	.word	0x08009a93
 8009a44:	08009aa7 	.word	0x08009aa7
 8009a48:	08009a67 	.word	0x08009a67
 8009a4c:	08009a5d 	.word	0x08009a5d
 8009a50:	08009aa7 	.word	0x08009aa7
 8009a54:	08009a7f 	.word	0x08009a7f
 8009a58:	08009a71 	.word	0x08009a71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa3c 	bl	8009edc <USBD_GetDescriptor>
          break;
 8009a64:	e024      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fba1 	bl	800a1b0 <USBD_SetAddress>
          break;
 8009a6e:	e01f      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fbe0 	bl	800a238 <USBD_SetConfig>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a7c:	e018      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc83 	bl	800a38c <USBD_GetConfig>
          break;
 8009a86:	e013      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fcb4 	bl	800a3f8 <USBD_GetStatus>
          break;
 8009a90:	e00e      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fce3 	bl	800a460 <USBD_SetFeature>
          break;
 8009a9a:	e009      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fd07 	bl	800a4b2 <USBD_ClrFeature>
          break;
 8009aa4:	e004      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fd5e 	bl	800a56a <USBD_CtlError>
          break;
 8009aae:	bf00      	nop
      }
      break;
 8009ab0:	e004      	b.n	8009abc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fd58 	bl	800a56a <USBD_CtlError>
      break;
 8009aba:	bf00      	nop
  }

  return ret;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop

08009ac8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ade:	2b40      	cmp	r3, #64	; 0x40
 8009ae0:	d005      	beq.n	8009aee <USBD_StdItfReq+0x26>
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	d852      	bhi.n	8009b8c <USBD_StdItfReq+0xc4>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <USBD_StdItfReq+0x26>
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d14e      	bne.n	8009b8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d840      	bhi.n	8009b7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	889b      	ldrh	r3, [r3, #4]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d836      	bhi.n	8009b74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	889b      	ldrh	r3, [r3, #4]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff fed9 	bl	80098c6 <USBD_CoreFindIF>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	2bff      	cmp	r3, #255	; 0xff
 8009b1c:	d01d      	beq.n	8009b5a <USBD_StdItfReq+0x92>
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11a      	bne.n	8009b5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b24:	7bba      	ldrb	r2, [r7, #14]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	32ae      	adds	r2, #174	; 0xae
 8009b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00f      	beq.n	8009b54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b34:	7bba      	ldrb	r2, [r7, #14]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b3c:	7bba      	ldrb	r2, [r7, #14]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	32ae      	adds	r2, #174	; 0xae
 8009b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b52:	e004      	b.n	8009b5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b54:	2303      	movs	r3, #3
 8009b56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b58:	e001      	b.n	8009b5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	88db      	ldrh	r3, [r3, #6]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d110      	bne.n	8009b88 <USBD_StdItfReq+0xc0>
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10d      	bne.n	8009b88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fdc7 	bl	800a700 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b72:	e009      	b.n	8009b88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fcf7 	bl	800a56a <USBD_CtlError>
          break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fcf2 	bl	800a56a <USBD_CtlError>
          break;
 8009b86:	e000      	b.n	8009b8a <USBD_StdItfReq+0xc2>
          break;
 8009b88:	bf00      	nop
      }
      break;
 8009b8a:	e004      	b.n	8009b96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fceb 	bl	800a56a <USBD_CtlError>
      break;
 8009b94:	bf00      	nop
  }

  return ret;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	889b      	ldrh	r3, [r3, #4]
 8009bb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bbc:	2b40      	cmp	r3, #64	; 0x40
 8009bbe:	d007      	beq.n	8009bd0 <USBD_StdEPReq+0x30>
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	f200 817f 	bhi.w	8009ec4 <USBD_StdEPReq+0x324>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d02a      	beq.n	8009c20 <USBD_StdEPReq+0x80>
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	f040 817a 	bne.w	8009ec4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff fe83 	bl	80098e0 <USBD_CoreFindEP>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bde:	7b7b      	ldrb	r3, [r7, #13]
 8009be0:	2bff      	cmp	r3, #255	; 0xff
 8009be2:	f000 8174 	beq.w	8009ece <USBD_StdEPReq+0x32e>
 8009be6:	7b7b      	ldrb	r3, [r7, #13]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8170 	bne.w	8009ece <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bee:	7b7a      	ldrb	r2, [r7, #13]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009bf6:	7b7a      	ldrb	r2, [r7, #13]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	32ae      	adds	r2, #174	; 0xae
 8009bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 8163 	beq.w	8009ece <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c08:	7b7a      	ldrb	r2, [r7, #13]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32ae      	adds	r2, #174	; 0xae
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	4798      	blx	r3
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c1e:	e156      	b.n	8009ece <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d008      	beq.n	8009c3a <USBD_StdEPReq+0x9a>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	f300 8145 	bgt.w	8009eb8 <USBD_StdEPReq+0x318>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 809b 	beq.w	8009d6a <USBD_StdEPReq+0x1ca>
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d03c      	beq.n	8009cb2 <USBD_StdEPReq+0x112>
 8009c38:	e13e      	b.n	8009eb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d002      	beq.n	8009c4c <USBD_StdEPReq+0xac>
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d016      	beq.n	8009c78 <USBD_StdEPReq+0xd8>
 8009c4a:	e02c      	b.n	8009ca6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <USBD_StdEPReq+0xce>
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b80      	cmp	r3, #128	; 0x80
 8009c56:	d00a      	beq.n	8009c6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 f977 	bl	800af50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c62:	2180      	movs	r1, #128	; 0x80
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 f973 	bl	800af50 <USBD_LL_StallEP>
 8009c6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c6c:	e020      	b.n	8009cb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fc7a 	bl	800a56a <USBD_CtlError>
              break;
 8009c76:	e01b      	b.n	8009cb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	885b      	ldrh	r3, [r3, #2]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10e      	bne.n	8009c9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <USBD_StdEPReq+0xfe>
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	2b80      	cmp	r3, #128	; 0x80
 8009c8a:	d008      	beq.n	8009c9e <USBD_StdEPReq+0xfe>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	88db      	ldrh	r3, [r3, #6]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 f959 	bl	800af50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fd2e 	bl	800a700 <USBD_CtlSendStatus>

              break;
 8009ca4:	e004      	b.n	8009cb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc5e 	bl	800a56a <USBD_CtlError>
              break;
 8009cae:	bf00      	nop
          }
          break;
 8009cb0:	e107      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d002      	beq.n	8009cc4 <USBD_StdEPReq+0x124>
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d016      	beq.n	8009cf0 <USBD_StdEPReq+0x150>
 8009cc2:	e04b      	b.n	8009d5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00d      	beq.n	8009ce6 <USBD_StdEPReq+0x146>
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b80      	cmp	r3, #128	; 0x80
 8009cce:	d00a      	beq.n	8009ce6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 f93b 	bl	800af50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 f937 	bl	800af50 <USBD_LL_StallEP>
 8009ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ce4:	e040      	b.n	8009d68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fc3e 	bl	800a56a <USBD_CtlError>
              break;
 8009cee:	e03b      	b.n	8009d68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	885b      	ldrh	r3, [r3, #2]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d136      	bne.n	8009d66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f001 f941 	bl	800af8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fcf7 	bl	800a700 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff fde2 	bl	80098e0 <USBD_CoreFindEP>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d20:	7b7b      	ldrb	r3, [r7, #13]
 8009d22:	2bff      	cmp	r3, #255	; 0xff
 8009d24:	d01f      	beq.n	8009d66 <USBD_StdEPReq+0x1c6>
 8009d26:	7b7b      	ldrb	r3, [r7, #13]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d11c      	bne.n	8009d66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d2c:	7b7a      	ldrb	r2, [r7, #13]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	32ae      	adds	r2, #174	; 0xae
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d010      	beq.n	8009d66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d44:	7b7a      	ldrb	r2, [r7, #13]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32ae      	adds	r2, #174	; 0xae
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d5a:	e004      	b.n	8009d66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fc03 	bl	800a56a <USBD_CtlError>
              break;
 8009d64:	e000      	b.n	8009d68 <USBD_StdEPReq+0x1c8>
              break;
 8009d66:	bf00      	nop
          }
          break;
 8009d68:	e0ab      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d002      	beq.n	8009d7c <USBD_StdEPReq+0x1dc>
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d032      	beq.n	8009de0 <USBD_StdEPReq+0x240>
 8009d7a:	e097      	b.n	8009eac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <USBD_StdEPReq+0x1f2>
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b80      	cmp	r3, #128	; 0x80
 8009d86:	d004      	beq.n	8009d92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fbed 	bl	800a56a <USBD_CtlError>
                break;
 8009d90:	e091      	b.n	8009eb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da0b      	bge.n	8009db2 <USBD_StdEPReq+0x212>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	3310      	adds	r3, #16
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	3304      	adds	r3, #4
 8009db0:	e00b      	b.n	8009dca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3304      	adds	r3, #4
 8009dca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fc37 	bl	800a64c <USBD_CtlSendData>
              break;
 8009dde:	e06a      	b.n	8009eb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da11      	bge.n	8009e0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	f003 020f 	and.w	r2, r3, #15
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	4613      	mov	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d117      	bne.n	8009e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fbb0 	bl	800a56a <USBD_CtlError>
                  break;
 8009e0a:	e054      	b.n	8009eb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 020f 	and.w	r2, r3, #15
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fb9d 	bl	800a56a <USBD_CtlError>
                  break;
 8009e30:	e041      	b.n	8009eb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da0b      	bge.n	8009e52 <USBD_StdEPReq+0x2b2>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	3310      	adds	r3, #16
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3304      	adds	r3, #4
 8009e50:	e00b      	b.n	8009e6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	4413      	add	r3, r2
 8009e68:	3304      	adds	r3, #4
 8009e6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <USBD_StdEPReq+0x2d8>
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b80      	cmp	r3, #128	; 0x80
 8009e76:	d103      	bne.n	8009e80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	e00e      	b.n	8009e9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f8a1 	bl	800afcc <USBD_LL_IsStallEP>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2201      	movs	r2, #1
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e002      	b.n	8009e9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fbd1 	bl	800a64c <USBD_CtlSendData>
              break;
 8009eaa:	e004      	b.n	8009eb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fb5b 	bl	800a56a <USBD_CtlError>
              break;
 8009eb4:	bf00      	nop
          }
          break;
 8009eb6:	e004      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fb55 	bl	800a56a <USBD_CtlError>
          break;
 8009ec0:	bf00      	nop
      }
      break;
 8009ec2:	e005      	b.n	8009ed0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fb4f 	bl	800a56a <USBD_CtlError>
      break;
 8009ecc:	e000      	b.n	8009ed0 <USBD_StdEPReq+0x330>
      break;
 8009ece:	bf00      	nop
  }

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	2b06      	cmp	r3, #6
 8009efe:	f200 8128 	bhi.w	800a152 <USBD_GetDescriptor+0x276>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USBD_GetDescriptor+0x2c>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f25 	.word	0x08009f25
 8009f0c:	08009f3d 	.word	0x08009f3d
 8009f10:	08009f7d 	.word	0x08009f7d
 8009f14:	0800a153 	.word	0x0800a153
 8009f18:	0800a153 	.word	0x0800a153
 8009f1c:	0800a0f3 	.word	0x0800a0f3
 8009f20:	0800a11f 	.word	0x0800a11f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	7c12      	ldrb	r2, [r2, #16]
 8009f30:	f107 0108 	add.w	r1, r7, #8
 8009f34:	4610      	mov	r0, r2
 8009f36:	4798      	blx	r3
 8009f38:	60f8      	str	r0, [r7, #12]
      break;
 8009f3a:	e112      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	7c1b      	ldrb	r3, [r3, #16]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d10d      	bne.n	8009f60 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f4c:	f107 0208 	add.w	r2, r7, #8
 8009f50:	4610      	mov	r0, r2
 8009f52:	4798      	blx	r3
 8009f54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009f5e:	e100      	b.n	800a162 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	f107 0208 	add.w	r2, r7, #8
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	3301      	adds	r3, #1
 8009f76:	2202      	movs	r2, #2
 8009f78:	701a      	strb	r2, [r3, #0]
      break;
 8009f7a:	e0f2      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	885b      	ldrh	r3, [r3, #2]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	f200 80ac 	bhi.w	800a0e0 <USBD_GetDescriptor+0x204>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <USBD_GetDescriptor+0xb4>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fa9 	.word	0x08009fa9
 8009f94:	08009fdd 	.word	0x08009fdd
 8009f98:	0800a011 	.word	0x0800a011
 8009f9c:	0800a045 	.word	0x0800a045
 8009fa0:	0800a079 	.word	0x0800a079
 8009fa4:	0800a0ad 	.word	0x0800a0ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7c12      	ldrb	r2, [r2, #16]
 8009fc0:	f107 0108 	add.w	r1, r7, #8
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fca:	e091      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 facb 	bl	800a56a <USBD_CtlError>
            err++;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fda:	e089      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffe:	e077      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fab1 	bl	800a56a <USBD_CtlError>
            err++;
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	3301      	adds	r3, #1
 800a00c:	72fb      	strb	r3, [r7, #11]
          break;
 800a00e:	e06f      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	7c12      	ldrb	r2, [r2, #16]
 800a028:	f107 0108 	add.w	r1, r7, #8
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a032:	e05d      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa97 	bl	800a56a <USBD_CtlError>
            err++;
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	3301      	adds	r3, #1
 800a040:	72fb      	strb	r3, [r7, #11]
          break;
 800a042:	e055      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00b      	beq.n	800a068 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	7c12      	ldrb	r2, [r2, #16]
 800a05c:	f107 0108 	add.w	r1, r7, #8
 800a060:	4610      	mov	r0, r2
 800a062:	4798      	blx	r3
 800a064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a066:	e043      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a068:	6839      	ldr	r1, [r7, #0]
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa7d 	bl	800a56a <USBD_CtlError>
            err++;
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	3301      	adds	r3, #1
 800a074:	72fb      	strb	r3, [r7, #11]
          break;
 800a076:	e03b      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a07e:	695b      	ldr	r3, [r3, #20]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00b      	beq.n	800a09c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	7c12      	ldrb	r2, [r2, #16]
 800a090:	f107 0108 	add.w	r1, r7, #8
 800a094:	4610      	mov	r0, r2
 800a096:	4798      	blx	r3
 800a098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a09a:	e029      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fa63 	bl	800a56a <USBD_CtlError>
            err++;
 800a0a4:	7afb      	ldrb	r3, [r7, #11]
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0aa:	e021      	b.n	800a0f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0b2:	699b      	ldr	r3, [r3, #24]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d00b      	beq.n	800a0d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	7c12      	ldrb	r2, [r2, #16]
 800a0c4:	f107 0108 	add.w	r1, r7, #8
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	4798      	blx	r3
 800a0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ce:	e00f      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a0d0:	6839      	ldr	r1, [r7, #0]
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fa49 	bl	800a56a <USBD_CtlError>
            err++;
 800a0d8:	7afb      	ldrb	r3, [r7, #11]
 800a0da:	3301      	adds	r3, #1
 800a0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0de:	e007      	b.n	800a0f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fa41 	bl	800a56a <USBD_CtlError>
          err++;
 800a0e8:	7afb      	ldrb	r3, [r7, #11]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a0ee:	bf00      	nop
      }
      break;
 800a0f0:	e037      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	7c1b      	ldrb	r3, [r3, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d109      	bne.n	800a10e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a102:	f107 0208 	add.w	r2, r7, #8
 800a106:	4610      	mov	r0, r2
 800a108:	4798      	blx	r3
 800a10a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a10c:	e029      	b.n	800a162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a10e:	6839      	ldr	r1, [r7, #0]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fa2a 	bl	800a56a <USBD_CtlError>
        err++;
 800a116:	7afb      	ldrb	r3, [r7, #11]
 800a118:	3301      	adds	r3, #1
 800a11a:	72fb      	strb	r3, [r7, #11]
      break;
 800a11c:	e021      	b.n	800a162 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7c1b      	ldrb	r3, [r3, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d10d      	bne.n	800a142 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a12e:	f107 0208 	add.w	r2, r7, #8
 800a132:	4610      	mov	r0, r2
 800a134:	4798      	blx	r3
 800a136:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3301      	adds	r3, #1
 800a13c:	2207      	movs	r2, #7
 800a13e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a140:	e00f      	b.n	800a162 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa10 	bl	800a56a <USBD_CtlError>
        err++;
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	3301      	adds	r3, #1
 800a14e:	72fb      	strb	r3, [r7, #11]
      break;
 800a150:	e007      	b.n	800a162 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fa08 	bl	800a56a <USBD_CtlError>
      err++;
 800a15a:	7afb      	ldrb	r3, [r7, #11]
 800a15c:	3301      	adds	r3, #1
 800a15e:	72fb      	strb	r3, [r7, #11]
      break;
 800a160:	bf00      	nop
  }

  if (err != 0U)
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d11e      	bne.n	800a1a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	88db      	ldrh	r3, [r3, #6]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d016      	beq.n	800a19e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a170:	893b      	ldrh	r3, [r7, #8]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00e      	beq.n	800a194 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	88da      	ldrh	r2, [r3, #6]
 800a17a:	893b      	ldrh	r3, [r7, #8]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	bf28      	it	cs
 800a180:	4613      	movcs	r3, r2
 800a182:	b29b      	uxth	r3, r3
 800a184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a186:	893b      	ldrh	r3, [r7, #8]
 800a188:	461a      	mov	r2, r3
 800a18a:	68f9      	ldr	r1, [r7, #12]
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 fa5d 	bl	800a64c <USBD_CtlSendData>
 800a192:	e009      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f9e7 	bl	800a56a <USBD_CtlError>
 800a19c:	e004      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 faae 	bl	800a700 <USBD_CtlSendStatus>
 800a1a4:	e000      	b.n	800a1a8 <USBD_GetDescriptor+0x2cc>
    return;
 800a1a6:	bf00      	nop
  }
}
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}
 800a1ae:	bf00      	nop

0800a1b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	889b      	ldrh	r3, [r3, #4]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d131      	bne.n	800a226 <USBD_SetAddress+0x76>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	88db      	ldrh	r3, [r3, #6]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d12d      	bne.n	800a226 <USBD_SetAddress+0x76>
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	885b      	ldrh	r3, [r3, #2]
 800a1ce:	2b7f      	cmp	r3, #127	; 0x7f
 800a1d0:	d829      	bhi.n	800a226 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	885b      	ldrh	r3, [r3, #2]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b03      	cmp	r3, #3
 800a1e8:	d104      	bne.n	800a1f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a1ea:	6839      	ldr	r1, [r7, #0]
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 f9bc 	bl	800a56a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f2:	e01d      	b.n	800a230 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	7bfa      	ldrb	r2, [r7, #15]
 800a1f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a1fc:	7bfb      	ldrb	r3, [r7, #15]
 800a1fe:	4619      	mov	r1, r3
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 ff0f 	bl	800b024 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f000 fa7a 	bl	800a700 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a20c:	7bfb      	ldrb	r3, [r7, #15]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d004      	beq.n	800a21c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2202      	movs	r2, #2
 800a216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a21a:	e009      	b.n	800a230 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a224:	e004      	b.n	800a230 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 f99e 	bl	800a56a <USBD_CtlError>
  }
}
 800a22e:	bf00      	nop
 800a230:	bf00      	nop
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	885b      	ldrh	r3, [r3, #2]
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	4b4e      	ldr	r3, [pc, #312]	; (800a388 <USBD_SetConfig+0x150>)
 800a24e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a250:	4b4d      	ldr	r3, [pc, #308]	; (800a388 <USBD_SetConfig+0x150>)
 800a252:	781b      	ldrb	r3, [r3, #0]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d905      	bls.n	800a264 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 f985 	bl	800a56a <USBD_CtlError>
    return USBD_FAIL;
 800a260:	2303      	movs	r3, #3
 800a262:	e08c      	b.n	800a37e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d002      	beq.n	800a276 <USBD_SetConfig+0x3e>
 800a270:	2b03      	cmp	r3, #3
 800a272:	d029      	beq.n	800a2c8 <USBD_SetConfig+0x90>
 800a274:	e075      	b.n	800a362 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a276:	4b44      	ldr	r3, [pc, #272]	; (800a388 <USBD_SetConfig+0x150>)
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d020      	beq.n	800a2c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a27e:	4b42      	ldr	r3, [pc, #264]	; (800a388 <USBD_SetConfig+0x150>)
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a288:	4b3f      	ldr	r3, [pc, #252]	; (800a388 <USBD_SetConfig+0x150>)
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7fe ffe7 	bl	8009262 <USBD_SetClassConfig>
 800a294:	4603      	mov	r3, r0
 800a296:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a298:	7bfb      	ldrb	r3, [r7, #15]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d008      	beq.n	800a2b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f962 	bl	800a56a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2202      	movs	r2, #2
 800a2aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2ae:	e065      	b.n	800a37c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fa25 	bl	800a700 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2203      	movs	r2, #3
 800a2ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a2be:	e05d      	b.n	800a37c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f000 fa1d 	bl	800a700 <USBD_CtlSendStatus>
      break;
 800a2c6:	e059      	b.n	800a37c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a2c8:	4b2f      	ldr	r3, [pc, #188]	; (800a388 <USBD_SetConfig+0x150>)
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d112      	bne.n	800a2f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2202      	movs	r2, #2
 800a2d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a2d8:	4b2b      	ldr	r3, [pc, #172]	; (800a388 <USBD_SetConfig+0x150>)
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2e2:	4b29      	ldr	r3, [pc, #164]	; (800a388 <USBD_SetConfig+0x150>)
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7fe ffd6 	bl	800929a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fa06 	bl	800a700 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a2f4:	e042      	b.n	800a37c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a2f6:	4b24      	ldr	r3, [pc, #144]	; (800a388 <USBD_SetConfig+0x150>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	429a      	cmp	r2, r3
 800a302:	d02a      	beq.n	800a35a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	b2db      	uxtb	r3, r3
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7fe ffc4 	bl	800929a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a312:	4b1d      	ldr	r3, [pc, #116]	; (800a388 <USBD_SetConfig+0x150>)
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a31c:	4b1a      	ldr	r3, [pc, #104]	; (800a388 <USBD_SetConfig+0x150>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7fe ff9d 	bl	8009262 <USBD_SetClassConfig>
 800a328:	4603      	mov	r3, r0
 800a32a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00f      	beq.n	800a352 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a332:	6839      	ldr	r1, [r7, #0]
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 f918 	bl	800a56a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	b2db      	uxtb	r3, r3
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f7fe ffa9 	bl	800929a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a350:	e014      	b.n	800a37c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f9d4 	bl	800a700 <USBD_CtlSendStatus>
      break;
 800a358:	e010      	b.n	800a37c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f9d0 	bl	800a700 <USBD_CtlSendStatus>
      break;
 800a360:	e00c      	b.n	800a37c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f900 	bl	800a56a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <USBD_SetConfig+0x150>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7fe ff92 	bl	800929a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a376:	2303      	movs	r3, #3
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	bf00      	nop
  }

  return ret;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000aec 	.word	0x20000aec

0800a38c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	88db      	ldrh	r3, [r3, #6]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d004      	beq.n	800a3a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f8e2 	bl	800a56a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3a6:	e023      	b.n	800a3f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	dc02      	bgt.n	800a3ba <USBD_GetConfig+0x2e>
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc03      	bgt.n	800a3c0 <USBD_GetConfig+0x34>
 800a3b8:	e015      	b.n	800a3e6 <USBD_GetConfig+0x5a>
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d00b      	beq.n	800a3d6 <USBD_GetConfig+0x4a>
 800a3be:	e012      	b.n	800a3e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f93c 	bl	800a64c <USBD_CtlSendData>
        break;
 800a3d4:	e00c      	b.n	800a3f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	3304      	adds	r3, #4
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f934 	bl	800a64c <USBD_CtlSendData>
        break;
 800a3e4:	e004      	b.n	800a3f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f8be 	bl	800a56a <USBD_CtlError>
        break;
 800a3ee:	bf00      	nop
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	3b01      	subs	r3, #1
 800a40c:	2b02      	cmp	r3, #2
 800a40e:	d81e      	bhi.n	800a44e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	88db      	ldrh	r3, [r3, #6]
 800a414:	2b02      	cmp	r3, #2
 800a416:	d004      	beq.n	800a422 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 f8a5 	bl	800a56a <USBD_CtlError>
        break;
 800a420:	e01a      	b.n	800a458 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2201      	movs	r2, #1
 800a426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f043 0202 	orr.w	r2, r3, #2
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	330c      	adds	r3, #12
 800a442:	2202      	movs	r2, #2
 800a444:	4619      	mov	r1, r3
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 f900 	bl	800a64c <USBD_CtlSendData>
      break;
 800a44c:	e004      	b.n	800a458 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a44e:	6839      	ldr	r1, [r7, #0]
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f88a 	bl	800a56a <USBD_CtlError>
      break;
 800a456:	bf00      	nop
  }
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	885b      	ldrh	r3, [r3, #2]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d107      	bne.n	800a482 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2201      	movs	r2, #1
 800a476:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f940 	bl	800a700 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a480:	e013      	b.n	800a4aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	885b      	ldrh	r3, [r3, #2]
 800a486:	2b02      	cmp	r3, #2
 800a488:	d10b      	bne.n	800a4a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	889b      	ldrh	r3, [r3, #4]
 800a48e:	0a1b      	lsrs	r3, r3, #8
 800a490:	b29b      	uxth	r3, r3
 800a492:	b2da      	uxtb	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f930 	bl	800a700 <USBD_CtlSendStatus>
}
 800a4a0:	e003      	b.n	800a4aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f860 	bl	800a56a <USBD_CtlError>
}
 800a4aa:	bf00      	nop
 800a4ac:	3708      	adds	r7, #8
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b082      	sub	sp, #8
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	d80b      	bhi.n	800a4e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	885b      	ldrh	r3, [r3, #2]
 800a4ce:	2b01      	cmp	r3, #1
 800a4d0:	d10c      	bne.n	800a4ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 f910 	bl	800a700 <USBD_CtlSendStatus>
      }
      break;
 800a4e0:	e004      	b.n	800a4ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a4e2:	6839      	ldr	r1, [r7, #0]
 800a4e4:	6878      	ldr	r0, [r7, #4]
 800a4e6:	f000 f840 	bl	800a56a <USBD_CtlError>
      break;
 800a4ea:	e000      	b.n	800a4ee <USBD_ClrFeature+0x3c>
      break;
 800a4ec:	bf00      	nop
  }
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
 800a4fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	781a      	ldrb	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	3301      	adds	r3, #1
 800a510:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	781a      	ldrb	r2, [r3, #0]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a520:	68f8      	ldr	r0, [r7, #12]
 800a522:	f7ff fa41 	bl	80099a8 <SWAPBYTE>
 800a526:	4603      	mov	r3, r0
 800a528:	461a      	mov	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	3301      	adds	r3, #1
 800a538:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7ff fa34 	bl	80099a8 <SWAPBYTE>
 800a540:	4603      	mov	r3, r0
 800a542:	461a      	mov	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3301      	adds	r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3301      	adds	r3, #1
 800a552:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f7ff fa27 	bl	80099a8 <SWAPBYTE>
 800a55a:	4603      	mov	r3, r0
 800a55c:	461a      	mov	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	80da      	strh	r2, [r3, #6]
}
 800a562:	bf00      	nop
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
 800a572:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a574:	2180      	movs	r1, #128	; 0x80
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fcea 	bl	800af50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a57c:	2100      	movs	r1, #0
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fce6 	bl	800af50 <USBD_LL_StallEP>
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a598:	2300      	movs	r3, #0
 800a59a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d036      	beq.n	800a610 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5a6:	6938      	ldr	r0, [r7, #16]
 800a5a8:	f000 f836 	bl	800a618 <USBD_GetLen>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a5ba:	7dfb      	ldrb	r3, [r7, #23]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	4413      	add	r3, r2
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	7812      	ldrb	r2, [r2, #0]
 800a5c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5c6:	7dfb      	ldrb	r3, [r7, #23]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a5cc:	7dfb      	ldrb	r3, [r7, #23]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	2203      	movs	r2, #3
 800a5d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
 800a5d8:	3301      	adds	r3, #1
 800a5da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a5dc:	e013      	b.n	800a606 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a5de:	7dfb      	ldrb	r3, [r7, #23]
 800a5e0:	68ba      	ldr	r2, [r7, #8]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	7812      	ldrb	r2, [r2, #0]
 800a5e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	613b      	str	r3, [r7, #16]
    idx++;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a5f6:	7dfb      	ldrb	r3, [r7, #23]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	3301      	adds	r3, #1
 800a604:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d1e7      	bne.n	800a5de <USBD_GetString+0x52>
 800a60e:	e000      	b.n	800a612 <USBD_GetString+0x86>
    return;
 800a610:	bf00      	nop
  }
}
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a620:	2300      	movs	r3, #0
 800a622:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a628:	e005      	b.n	800a636 <USBD_GetLen+0x1e>
  {
    len++;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
 800a62c:	3301      	adds	r3, #1
 800a62e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	3301      	adds	r3, #1
 800a634:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1f5      	bne.n	800a62a <USBD_GetLen+0x12>
  }

  return len;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	2100      	movs	r1, #0
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f000 fcf5 	bl	800b062 <USBD_LL_Transmit>

  return USBD_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a682:	b580      	push	{r7, lr}
 800a684:	b084      	sub	sp, #16
 800a686:	af00      	add	r7, sp, #0
 800a688:	60f8      	str	r0, [r7, #12]
 800a68a:	60b9      	str	r1, [r7, #8]
 800a68c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	2100      	movs	r1, #0
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 fce4 	bl	800b062 <USBD_LL_Transmit>

  return USBD_OK;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68ba      	ldr	r2, [r7, #8]
 800a6cc:	2100      	movs	r1, #0
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fce8 	bl	800b0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	60b9      	str	r1, [r7, #8]
 800a6e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68ba      	ldr	r2, [r7, #8]
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 fcd7 	bl	800b0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3710      	adds	r7, #16
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2204      	movs	r2, #4
 800a70c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a710:	2300      	movs	r3, #0
 800a712:	2200      	movs	r2, #0
 800a714:	2100      	movs	r1, #0
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 fca3 	bl	800b062 <USBD_LL_Transmit>

  return USBD_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2205      	movs	r2, #5
 800a732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a736:	2300      	movs	r3, #0
 800a738:	2200      	movs	r2, #0
 800a73a:	2100      	movs	r1, #0
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 fcb1 	bl	800b0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3708      	adds	r7, #8
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a750:	2200      	movs	r2, #0
 800a752:	4912      	ldr	r1, [pc, #72]	; (800a79c <MX_USB_DEVICE_Init+0x50>)
 800a754:	4812      	ldr	r0, [pc, #72]	; (800a7a0 <MX_USB_DEVICE_Init+0x54>)
 800a756:	f7fe fd07 	bl	8009168 <USBD_Init>
 800a75a:	4603      	mov	r3, r0
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a760:	f7f7 ffdc 	bl	800271c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a764:	490f      	ldr	r1, [pc, #60]	; (800a7a4 <MX_USB_DEVICE_Init+0x58>)
 800a766:	480e      	ldr	r0, [pc, #56]	; (800a7a0 <MX_USB_DEVICE_Init+0x54>)
 800a768:	f7fe fd2e 	bl	80091c8 <USBD_RegisterClass>
 800a76c:	4603      	mov	r3, r0
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a772:	f7f7 ffd3 	bl	800271c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a776:	490c      	ldr	r1, [pc, #48]	; (800a7a8 <MX_USB_DEVICE_Init+0x5c>)
 800a778:	4809      	ldr	r0, [pc, #36]	; (800a7a0 <MX_USB_DEVICE_Init+0x54>)
 800a77a:	f7fe fc1f 	bl	8008fbc <USBD_CDC_RegisterInterface>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a784:	f7f7 ffca 	bl	800271c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a788:	4805      	ldr	r0, [pc, #20]	; (800a7a0 <MX_USB_DEVICE_Init+0x54>)
 800a78a:	f7fe fd53 	bl	8009234 <USBD_Start>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a794:	f7f7 ffc2 	bl	800271c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a798:	bf00      	nop
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	200000b0 	.word	0x200000b0
 800a7a0:	20000af0 	.word	0x20000af0
 800a7a4:	2000001c 	.word	0x2000001c
 800a7a8:	2000009c 	.word	0x2000009c

0800a7ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4905      	ldr	r1, [pc, #20]	; (800a7c8 <CDC_Init_FS+0x1c>)
 800a7b4:	4805      	ldr	r0, [pc, #20]	; (800a7cc <CDC_Init_FS+0x20>)
 800a7b6:	f7fe fc1b 	bl	8008ff0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a7ba:	4905      	ldr	r1, [pc, #20]	; (800a7d0 <CDC_Init_FS+0x24>)
 800a7bc:	4803      	ldr	r0, [pc, #12]	; (800a7cc <CDC_Init_FS+0x20>)
 800a7be:	f7fe fc39 	bl	8009034 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a7c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	2000160c 	.word	0x2000160c
 800a7cc:	20000af0 	.word	0x20000af0
 800a7d0:	20000e0c 	.word	0x20000e0c

0800a7d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a7d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	71fb      	strb	r3, [r7, #7]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	2b23      	cmp	r3, #35	; 0x23
 800a7f8:	d84a      	bhi.n	800a890 <CDC_Control_FS+0xac>
 800a7fa:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <CDC_Control_FS+0x1c>)
 800a7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a800:	0800a891 	.word	0x0800a891
 800a804:	0800a891 	.word	0x0800a891
 800a808:	0800a891 	.word	0x0800a891
 800a80c:	0800a891 	.word	0x0800a891
 800a810:	0800a891 	.word	0x0800a891
 800a814:	0800a891 	.word	0x0800a891
 800a818:	0800a891 	.word	0x0800a891
 800a81c:	0800a891 	.word	0x0800a891
 800a820:	0800a891 	.word	0x0800a891
 800a824:	0800a891 	.word	0x0800a891
 800a828:	0800a891 	.word	0x0800a891
 800a82c:	0800a891 	.word	0x0800a891
 800a830:	0800a891 	.word	0x0800a891
 800a834:	0800a891 	.word	0x0800a891
 800a838:	0800a891 	.word	0x0800a891
 800a83c:	0800a891 	.word	0x0800a891
 800a840:	0800a891 	.word	0x0800a891
 800a844:	0800a891 	.word	0x0800a891
 800a848:	0800a891 	.word	0x0800a891
 800a84c:	0800a891 	.word	0x0800a891
 800a850:	0800a891 	.word	0x0800a891
 800a854:	0800a891 	.word	0x0800a891
 800a858:	0800a891 	.word	0x0800a891
 800a85c:	0800a891 	.word	0x0800a891
 800a860:	0800a891 	.word	0x0800a891
 800a864:	0800a891 	.word	0x0800a891
 800a868:	0800a891 	.word	0x0800a891
 800a86c:	0800a891 	.word	0x0800a891
 800a870:	0800a891 	.word	0x0800a891
 800a874:	0800a891 	.word	0x0800a891
 800a878:	0800a891 	.word	0x0800a891
 800a87c:	0800a891 	.word	0x0800a891
 800a880:	0800a891 	.word	0x0800a891
 800a884:	0800a891 	.word	0x0800a891
 800a888:	0800a891 	.word	0x0800a891
 800a88c:	0800a891 	.word	0x0800a891
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a890:	bf00      	nop
  }

  return (USBD_OK);
 800a892:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a894:	4618      	mov	r0, r3
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a8aa:	6879      	ldr	r1, [r7, #4]
 800a8ac:	4809      	ldr	r0, [pc, #36]	; (800a8d4 <CDC_Receive_FS+0x34>)
 800a8ae:	f7fe fbc1 	bl	8009034 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a8b2:	4808      	ldr	r0, [pc, #32]	; (800a8d4 <CDC_Receive_FS+0x34>)
 800a8b4:	f7fe fc22 	bl	80090fc <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)*Len;
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	73fb      	strb	r3, [r7, #15]
  memcpy (USB_Rx_buffer, Buf, len);
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	4804      	ldr	r0, [pc, #16]	; (800a8d8 <CDC_Receive_FS+0x38>)
 800a8c6:	f000 fc89 	bl	800b1dc <memcpy>
  return (USBD_OK);
 800a8ca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3710      	adds	r7, #16
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20000af0 	.word	0x20000af0
 800a8d8:	20000dcc 	.word	0x20000dcc

0800a8dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <CDC_Transmit_FS+0x48>)
 800a8ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e00b      	b.n	800a91a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a902:	887b      	ldrh	r3, [r7, #2]
 800a904:	461a      	mov	r2, r3
 800a906:	6879      	ldr	r1, [r7, #4]
 800a908:	4806      	ldr	r0, [pc, #24]	; (800a924 <CDC_Transmit_FS+0x48>)
 800a90a:	f7fe fb71 	bl	8008ff0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a90e:	4805      	ldr	r0, [pc, #20]	; (800a924 <CDC_Transmit_FS+0x48>)
 800a910:	f7fe fbae 	bl	8009070 <USBD_CDC_TransmitPacket>
 800a914:	4603      	mov	r3, r0
 800a916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a918:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20000af0 	.word	0x20000af0

0800a928 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a928:	b480      	push	{r7}
 800a92a:	b087      	sub	sp, #28
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4613      	mov	r3, r2
 800a934:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a93a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	371c      	adds	r7, #28
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
	...

0800a94c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	4603      	mov	r3, r0
 800a954:	6039      	str	r1, [r7, #0]
 800a956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	2212      	movs	r2, #18
 800a95c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a95e:	4b03      	ldr	r3, [pc, #12]	; (800a96c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	200000cc 	.word	0x200000cc

0800a970 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a970:	b480      	push	{r7}
 800a972:	b083      	sub	sp, #12
 800a974:	af00      	add	r7, sp, #0
 800a976:	4603      	mov	r3, r0
 800a978:	6039      	str	r1, [r7, #0]
 800a97a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	2204      	movs	r2, #4
 800a980:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a982:	4b03      	ldr	r3, [pc, #12]	; (800a990 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	200000e0 	.word	0x200000e0

0800a994 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b082      	sub	sp, #8
 800a998:	af00      	add	r7, sp, #0
 800a99a:	4603      	mov	r3, r0
 800a99c:	6039      	str	r1, [r7, #0]
 800a99e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a9a0:	79fb      	ldrb	r3, [r7, #7]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d105      	bne.n	800a9b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	4907      	ldr	r1, [pc, #28]	; (800a9c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9aa:	4808      	ldr	r0, [pc, #32]	; (800a9cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a9ac:	f7ff fdee 	bl	800a58c <USBD_GetString>
 800a9b0:	e004      	b.n	800a9bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	4904      	ldr	r1, [pc, #16]	; (800a9c8 <USBD_FS_ProductStrDescriptor+0x34>)
 800a9b6:	4805      	ldr	r0, [pc, #20]	; (800a9cc <USBD_FS_ProductStrDescriptor+0x38>)
 800a9b8:	f7ff fde8 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	20001e0c 	.word	0x20001e0c
 800a9cc:	0800b268 	.word	0x0800b268

0800a9d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	6039      	str	r1, [r7, #0]
 800a9da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	4904      	ldr	r1, [pc, #16]	; (800a9f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a9e0:	4804      	ldr	r0, [pc, #16]	; (800a9f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a9e2:	f7ff fdd3 	bl	800a58c <USBD_GetString>
  return USBD_StrDesc;
 800a9e6:	4b02      	ldr	r3, [pc, #8]	; (800a9f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3708      	adds	r7, #8
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	20001e0c 	.word	0x20001e0c
 800a9f4:	0800b274 	.word	0x0800b274

0800a9f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	6039      	str	r1, [r7, #0]
 800aa02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	221a      	movs	r2, #26
 800aa08:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aa0a:	f000 f843 	bl	800aa94 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aa0e:	4b02      	ldr	r3, [pc, #8]	; (800aa18 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3708      	adds	r7, #8
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}
 800aa18:	200000e4 	.word	0x200000e4

0800aa1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	6039      	str	r1, [r7, #0]
 800aa26:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d105      	bne.n	800aa3a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	4907      	ldr	r1, [pc, #28]	; (800aa50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa32:	4808      	ldr	r0, [pc, #32]	; (800aa54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa34:	f7ff fdaa 	bl	800a58c <USBD_GetString>
 800aa38:	e004      	b.n	800aa44 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aa3a:	683a      	ldr	r2, [r7, #0]
 800aa3c:	4904      	ldr	r1, [pc, #16]	; (800aa50 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aa3e:	4805      	ldr	r0, [pc, #20]	; (800aa54 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aa40:	f7ff fda4 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa44:	4b02      	ldr	r3, [pc, #8]	; (800aa50 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	20001e0c 	.word	0x20001e0c
 800aa54:	0800b288 	.word	0x0800b288

0800aa58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	6039      	str	r1, [r7, #0]
 800aa62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa64:	79fb      	ldrb	r3, [r7, #7]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d105      	bne.n	800aa76 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa6a:	683a      	ldr	r2, [r7, #0]
 800aa6c:	4907      	ldr	r1, [pc, #28]	; (800aa8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa6e:	4808      	ldr	r0, [pc, #32]	; (800aa90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa70:	f7ff fd8c 	bl	800a58c <USBD_GetString>
 800aa74:	e004      	b.n	800aa80 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aa76:	683a      	ldr	r2, [r7, #0]
 800aa78:	4904      	ldr	r1, [pc, #16]	; (800aa8c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aa7a:	4805      	ldr	r0, [pc, #20]	; (800aa90 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aa7c:	f7ff fd86 	bl	800a58c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa80:	4b02      	ldr	r3, [pc, #8]	; (800aa8c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}
 800aa8a:	bf00      	nop
 800aa8c:	20001e0c 	.word	0x20001e0c
 800aa90:	0800b294 	.word	0x0800b294

0800aa94 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b084      	sub	sp, #16
 800aa98:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <Get_SerialNum+0x44>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800aaa0:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <Get_SerialNum+0x48>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800aaa6:	4b0e      	ldr	r3, [pc, #56]	; (800aae0 <Get_SerialNum+0x4c>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d009      	beq.n	800aace <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800aaba:	2208      	movs	r2, #8
 800aabc:	4909      	ldr	r1, [pc, #36]	; (800aae4 <Get_SerialNum+0x50>)
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 f814 	bl	800aaec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800aac4:	2204      	movs	r2, #4
 800aac6:	4908      	ldr	r1, [pc, #32]	; (800aae8 <Get_SerialNum+0x54>)
 800aac8:	68b8      	ldr	r0, [r7, #8]
 800aaca:	f000 f80f 	bl	800aaec <IntToUnicode>
  }
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
 800aad6:	bf00      	nop
 800aad8:	1fff7a10 	.word	0x1fff7a10
 800aadc:	1fff7a14 	.word	0x1fff7a14
 800aae0:	1fff7a18 	.word	0x1fff7a18
 800aae4:	200000e6 	.word	0x200000e6
 800aae8:	200000f6 	.word	0x200000f6

0800aaec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b087      	sub	sp, #28
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aafe:	2300      	movs	r3, #0
 800ab00:	75fb      	strb	r3, [r7, #23]
 800ab02:	e027      	b.n	800ab54 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	0f1b      	lsrs	r3, r3, #28
 800ab08:	2b09      	cmp	r3, #9
 800ab0a:	d80b      	bhi.n	800ab24 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	0f1b      	lsrs	r3, r3, #28
 800ab10:	b2da      	uxtb	r2, r3
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	005b      	lsls	r3, r3, #1
 800ab16:	4619      	mov	r1, r3
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	440b      	add	r3, r1
 800ab1c:	3230      	adds	r2, #48	; 0x30
 800ab1e:	b2d2      	uxtb	r2, r2
 800ab20:	701a      	strb	r2, [r3, #0]
 800ab22:	e00a      	b.n	800ab3a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	0f1b      	lsrs	r3, r3, #28
 800ab28:	b2da      	uxtb	r2, r3
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	005b      	lsls	r3, r3, #1
 800ab2e:	4619      	mov	r1, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	440b      	add	r3, r1
 800ab34:	3237      	adds	r2, #55	; 0x37
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	011b      	lsls	r3, r3, #4
 800ab3e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ab40:	7dfb      	ldrb	r3, [r7, #23]
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	3301      	adds	r3, #1
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	4413      	add	r3, r2
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ab4e:	7dfb      	ldrb	r3, [r7, #23]
 800ab50:	3301      	adds	r3, #1
 800ab52:	75fb      	strb	r3, [r7, #23]
 800ab54:	7dfa      	ldrb	r2, [r7, #23]
 800ab56:	79fb      	ldrb	r3, [r7, #7]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d3d3      	bcc.n	800ab04 <IntToUnicode+0x18>
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	371c      	adds	r7, #28
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
	...

0800ab6c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08a      	sub	sp, #40	; 0x28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab74:	f107 0314 	add.w	r3, r7, #20
 800ab78:	2200      	movs	r2, #0
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	605a      	str	r2, [r3, #4]
 800ab7e:	609a      	str	r2, [r3, #8]
 800ab80:	60da      	str	r2, [r3, #12]
 800ab82:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab8c:	d13a      	bne.n	800ac04 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab8e:	2300      	movs	r3, #0
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	4b1e      	ldr	r3, [pc, #120]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800ab94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab96:	4a1d      	ldr	r2, [pc, #116]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800ab98:	f043 0301 	orr.w	r3, r3, #1
 800ab9c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab9e:	4b1b      	ldr	r3, [pc, #108]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800aba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	613b      	str	r3, [r7, #16]
 800aba8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800abaa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800abae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abb0:	2302      	movs	r3, #2
 800abb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb4:	2300      	movs	r3, #0
 800abb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abb8:	2303      	movs	r3, #3
 800abba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800abbc:	230a      	movs	r3, #10
 800abbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800abc0:	f107 0314 	add.w	r3, r7, #20
 800abc4:	4619      	mov	r1, r3
 800abc6:	4812      	ldr	r0, [pc, #72]	; (800ac10 <HAL_PCD_MspInit+0xa4>)
 800abc8:	f7f9 fc1a 	bl	8004400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800abcc:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800abce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abd0:	4a0e      	ldr	r2, [pc, #56]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800abd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abd6:	6353      	str	r3, [r2, #52]	; 0x34
 800abd8:	2300      	movs	r3, #0
 800abda:	60fb      	str	r3, [r7, #12]
 800abdc:	4b0b      	ldr	r3, [pc, #44]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800abde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abe0:	4a0a      	ldr	r2, [pc, #40]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800abe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abe6:	6453      	str	r3, [r2, #68]	; 0x44
 800abe8:	4b08      	ldr	r3, [pc, #32]	; (800ac0c <HAL_PCD_MspInit+0xa0>)
 800abea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800abf4:	2200      	movs	r2, #0
 800abf6:	2100      	movs	r1, #0
 800abf8:	2043      	movs	r0, #67	; 0x43
 800abfa:	f7f9 f888 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800abfe:	2043      	movs	r0, #67	; 0x43
 800ac00:	f7f9 f8a1 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ac04:	bf00      	nop
 800ac06:	3728      	adds	r7, #40	; 0x28
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}
 800ac0c:	40023800 	.word	0x40023800
 800ac10:	40020000 	.word	0x40020000

0800ac14 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ac28:	4619      	mov	r1, r3
 800ac2a:	4610      	mov	r0, r2
 800ac2c:	f7fe fb4f 	bl	80092ce <USBD_LL_SetupStage>
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	460b      	mov	r3, r1
 800ac42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	4413      	add	r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	440b      	add	r3, r1
 800ac58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	78fb      	ldrb	r3, [r7, #3]
 800ac60:	4619      	mov	r1, r3
 800ac62:	f7fe fb89 	bl	8009378 <USBD_LL_DataOutStage>
}
 800ac66:	bf00      	nop
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b082      	sub	sp, #8
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	460b      	mov	r3, r1
 800ac78:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ac80:	78fa      	ldrb	r2, [r7, #3]
 800ac82:	6879      	ldr	r1, [r7, #4]
 800ac84:	4613      	mov	r3, r2
 800ac86:	00db      	lsls	r3, r3, #3
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	440b      	add	r3, r1
 800ac8e:	334c      	adds	r3, #76	; 0x4c
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	78fb      	ldrb	r3, [r7, #3]
 800ac94:	4619      	mov	r1, r3
 800ac96:	f7fe fc22 	bl	80094de <USBD_LL_DataInStage>
}
 800ac9a:	bf00      	nop
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b082      	sub	sp, #8
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fd56 	bl	8009762 <USBD_LL_SOF>
}
 800acb6:	bf00      	nop
 800acb8:	3708      	adds	r7, #8
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}

0800acbe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800acc6:	2301      	movs	r3, #1
 800acc8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d102      	bne.n	800acd8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73fb      	strb	r3, [r7, #15]
 800acd6:	e008      	b.n	800acea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d102      	bne.n	800ace6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ace0:	2301      	movs	r3, #1
 800ace2:	73fb      	strb	r3, [r7, #15]
 800ace4:	e001      	b.n	800acea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ace6:	f7f7 fd19 	bl	800271c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acf0:	7bfa      	ldrb	r2, [r7, #15]
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe fcf6 	bl	80096e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7fe fc9e 	bl	8009642 <USBD_LL_Reset>
}
 800ad06:	bf00      	nop
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fe fcf1 	bl	8009706 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	6812      	ldr	r2, [r2, #0]
 800ad32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad36:	f043 0301 	orr.w	r3, r3, #1
 800ad3a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d005      	beq.n	800ad50 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad44:	4b04      	ldr	r3, [pc, #16]	; (800ad58 <HAL_PCD_SuspendCallback+0x48>)
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	4a03      	ldr	r2, [pc, #12]	; (800ad58 <HAL_PCD_SuspendCallback+0x48>)
 800ad4a:	f043 0306 	orr.w	r3, r3, #6
 800ad4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad50:	bf00      	nop
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	e000ed00 	.word	0xe000ed00

0800ad5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fe fce1 	bl	8009732 <USBD_LL_Resume>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad8a:	78fa      	ldrb	r2, [r7, #3]
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7fe fd39 	bl	8009806 <USBD_LL_IsoOUTIncomplete>
}
 800ad94:	bf00      	nop
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adae:	78fa      	ldrb	r2, [r7, #3]
 800adb0:	4611      	mov	r1, r2
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fcf5 	bl	80097a2 <USBD_LL_IsoINIncomplete>
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adce:	4618      	mov	r0, r3
 800add0:	f7fe fd4b 	bl	800986a <USBD_LL_DevConnected>
}
 800add4:	bf00      	nop
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800adea:	4618      	mov	r0, r3
 800adec:	f7fe fd48 	bl	8009880 <USBD_LL_DevDisconnected>
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d13c      	bne.n	800ae82 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ae08:	4a20      	ldr	r2, [pc, #128]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4a1e      	ldr	r2, [pc, #120]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae14:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae18:	4b1c      	ldr	r3, [pc, #112]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ae1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ae20:	4b1a      	ldr	r3, [pc, #104]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae22:	2204      	movs	r2, #4
 800ae24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae26:	4b19      	ldr	r3, [pc, #100]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae28:	2202      	movs	r2, #2
 800ae2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ae2c:	4b17      	ldr	r3, [pc, #92]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae2e:	2200      	movs	r2, #0
 800ae30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ae32:	4b16      	ldr	r3, [pc, #88]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae34:	2202      	movs	r2, #2
 800ae36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ae38:	4b14      	ldr	r3, [pc, #80]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ae3e:	4b13      	ldr	r3, [pc, #76]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ae44:	4b11      	ldr	r3, [pc, #68]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae46:	2200      	movs	r2, #0
 800ae48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ae4a:	4b10      	ldr	r3, [pc, #64]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ae50:	4b0e      	ldr	r3, [pc, #56]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae56:	480d      	ldr	r0, [pc, #52]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae58:	f7f9 fc56 	bl	8004708 <HAL_PCD_Init>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ae62:	f7f7 fc5b 	bl	800271c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ae66:	2180      	movs	r1, #128	; 0x80
 800ae68:	4808      	ldr	r0, [pc, #32]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae6a:	f7fa feae 	bl	8005bca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ae6e:	2240      	movs	r2, #64	; 0x40
 800ae70:	2100      	movs	r1, #0
 800ae72:	4806      	ldr	r0, [pc, #24]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae74:	f7fa fe62 	bl	8005b3c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ae78:	2280      	movs	r2, #128	; 0x80
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	4803      	ldr	r0, [pc, #12]	; (800ae8c <USBD_LL_Init+0x94>)
 800ae7e:	f7fa fe5d 	bl	8005b3c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ae82:	2300      	movs	r3, #0
}
 800ae84:	4618      	mov	r0, r3
 800ae86:	3708      	adds	r7, #8
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}
 800ae8c:	2000200c 	.word	0x2000200c

0800ae90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7f9 fd4b 	bl	8004942 <HAL_PCD_Start>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f942 	bl	800b13c <USBD_Get_USB_Status>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	4608      	mov	r0, r1
 800aed0:	4611      	mov	r1, r2
 800aed2:	461a      	mov	r2, r3
 800aed4:	4603      	mov	r3, r0
 800aed6:	70fb      	strb	r3, [r7, #3]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70bb      	strb	r3, [r7, #2]
 800aedc:	4613      	mov	r3, r2
 800aede:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aeee:	78bb      	ldrb	r3, [r7, #2]
 800aef0:	883a      	ldrh	r2, [r7, #0]
 800aef2:	78f9      	ldrb	r1, [r7, #3]
 800aef4:	f7fa fa1c 	bl	8005330 <HAL_PCD_EP_Open>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	4618      	mov	r0, r3
 800af00:	f000 f91c 	bl	800b13c <USBD_Get_USB_Status>
 800af04:	4603      	mov	r3, r0
 800af06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af08:	7bbb      	ldrb	r3, [r7, #14]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b084      	sub	sp, #16
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	460b      	mov	r3, r1
 800af1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af1e:	2300      	movs	r3, #0
 800af20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	4611      	mov	r1, r2
 800af30:	4618      	mov	r0, r3
 800af32:	f7fa fa65 	bl	8005400 <HAL_PCD_EP_Close>
 800af36:	4603      	mov	r3, r0
 800af38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 f8fd 	bl	800b13c <USBD_Get_USB_Status>
 800af42:	4603      	mov	r3, r0
 800af44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af46:	7bbb      	ldrb	r3, [r7, #14]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	460b      	mov	r3, r1
 800af5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af6a:	78fa      	ldrb	r2, [r7, #3]
 800af6c:	4611      	mov	r1, r2
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fa fb3d 	bl	80055ee <HAL_PCD_EP_SetStall>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 f8de 	bl	800b13c <USBD_Get_USB_Status>
 800af80:	4603      	mov	r3, r0
 800af82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af84:	7bbb      	ldrb	r3, [r7, #14]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b084      	sub	sp, #16
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	460b      	mov	r3, r1
 800af98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af9a:	2300      	movs	r3, #0
 800af9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af9e:	2300      	movs	r3, #0
 800afa0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afa8:	78fa      	ldrb	r2, [r7, #3]
 800afaa:	4611      	mov	r1, r2
 800afac:	4618      	mov	r0, r3
 800afae:	f7fa fb82 	bl	80056b6 <HAL_PCD_EP_ClrStall>
 800afb2:	4603      	mov	r3, r0
 800afb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afb6:	7bfb      	ldrb	r3, [r7, #15]
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 f8bf 	bl	800b13c <USBD_Get_USB_Status>
 800afbe:	4603      	mov	r3, r0
 800afc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800afc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800afde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800afe0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	da0b      	bge.n	800b000 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800afe8:	78fb      	ldrb	r3, [r7, #3]
 800afea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	4613      	mov	r3, r2
 800aff2:	00db      	lsls	r3, r3, #3
 800aff4:	4413      	add	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	440b      	add	r3, r1
 800affa:	333e      	adds	r3, #62	; 0x3e
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	e00b      	b.n	800b018 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b000:	78fb      	ldrb	r3, [r7, #3]
 800b002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	4613      	mov	r3, r2
 800b00a:	00db      	lsls	r3, r3, #3
 800b00c:	4413      	add	r3, r2
 800b00e:	009b      	lsls	r3, r3, #2
 800b010:	440b      	add	r3, r1
 800b012:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b016:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b030:	2300      	movs	r3, #0
 800b032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b03e:	78fa      	ldrb	r2, [r7, #3]
 800b040:	4611      	mov	r1, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f7fa f94f 	bl	80052e6 <HAL_PCD_SetAddress>
 800b048:	4603      	mov	r3, r0
 800b04a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 f874 	bl	800b13c <USBD_Get_USB_Status>
 800b054:	4603      	mov	r3, r0
 800b056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b058:	7bbb      	ldrb	r3, [r7, #14]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3710      	adds	r7, #16
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b086      	sub	sp, #24
 800b066:	af00      	add	r7, sp, #0
 800b068:	60f8      	str	r0, [r7, #12]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	603b      	str	r3, [r7, #0]
 800b06e:	460b      	mov	r3, r1
 800b070:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b080:	7af9      	ldrb	r1, [r7, #11]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	f7fa fa68 	bl	800555a <HAL_PCD_EP_Transmit>
 800b08a:	4603      	mov	r3, r0
 800b08c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08e:	7dfb      	ldrb	r3, [r7, #23]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f853 	bl	800b13c <USBD_Get_USB_Status>
 800b096:	4603      	mov	r3, r0
 800b098:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b09a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3718      	adds	r7, #24
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	607a      	str	r2, [r7, #4]
 800b0ae:	603b      	str	r3, [r7, #0]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0c2:	7af9      	ldrb	r1, [r7, #11]
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	f7fa f9e4 	bl	8005494 <HAL_PCD_EP_Receive>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 f832 	bl	800b13c <USBD_Get_USB_Status>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b0dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3718      	adds	r7, #24
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b082      	sub	sp, #8
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0f8:	78fa      	ldrb	r2, [r7, #3]
 800b0fa:	4611      	mov	r1, r2
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	f7fa fa14 	bl	800552a <HAL_PCD_EP_GetRxCount>
 800b102:	4603      	mov	r3, r0
}
 800b104:	4618      	mov	r0, r3
 800b106:	3708      	adds	r7, #8
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b114:	4b03      	ldr	r3, [pc, #12]	; (800b124 <USBD_static_malloc+0x18>)
}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	20002518 	.word	0x20002518

0800b128 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]

}
 800b130:	bf00      	nop
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b085      	sub	sp, #20
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b146:	2300      	movs	r3, #0
 800b148:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b14a:	79fb      	ldrb	r3, [r7, #7]
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d817      	bhi.n	800b180 <USBD_Get_USB_Status+0x44>
 800b150:	a201      	add	r2, pc, #4	; (adr r2, 800b158 <USBD_Get_USB_Status+0x1c>)
 800b152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b156:	bf00      	nop
 800b158:	0800b169 	.word	0x0800b169
 800b15c:	0800b16f 	.word	0x0800b16f
 800b160:	0800b175 	.word	0x0800b175
 800b164:	0800b17b 	.word	0x0800b17b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b168:	2300      	movs	r3, #0
 800b16a:	73fb      	strb	r3, [r7, #15]
    break;
 800b16c:	e00b      	b.n	800b186 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b16e:	2303      	movs	r3, #3
 800b170:	73fb      	strb	r3, [r7, #15]
    break;
 800b172:	e008      	b.n	800b186 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b174:	2301      	movs	r3, #1
 800b176:	73fb      	strb	r3, [r7, #15]
    break;
 800b178:	e005      	b.n	800b186 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b17a:	2303      	movs	r3, #3
 800b17c:	73fb      	strb	r3, [r7, #15]
    break;
 800b17e:	e002      	b.n	800b186 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b180:	2303      	movs	r3, #3
 800b182:	73fb      	strb	r3, [r7, #15]
    break;
 800b184:	bf00      	nop
  }
  return usb_status;
 800b186:	7bfb      	ldrb	r3, [r7, #15]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3714      	adds	r7, #20
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <__libc_init_array>:
 800b194:	b570      	push	{r4, r5, r6, lr}
 800b196:	4d0d      	ldr	r5, [pc, #52]	; (800b1cc <__libc_init_array+0x38>)
 800b198:	4c0d      	ldr	r4, [pc, #52]	; (800b1d0 <__libc_init_array+0x3c>)
 800b19a:	1b64      	subs	r4, r4, r5
 800b19c:	10a4      	asrs	r4, r4, #2
 800b19e:	2600      	movs	r6, #0
 800b1a0:	42a6      	cmp	r6, r4
 800b1a2:	d109      	bne.n	800b1b8 <__libc_init_array+0x24>
 800b1a4:	4d0b      	ldr	r5, [pc, #44]	; (800b1d4 <__libc_init_array+0x40>)
 800b1a6:	4c0c      	ldr	r4, [pc, #48]	; (800b1d8 <__libc_init_array+0x44>)
 800b1a8:	f000 f852 	bl	800b250 <_init>
 800b1ac:	1b64      	subs	r4, r4, r5
 800b1ae:	10a4      	asrs	r4, r4, #2
 800b1b0:	2600      	movs	r6, #0
 800b1b2:	42a6      	cmp	r6, r4
 800b1b4:	d105      	bne.n	800b1c2 <__libc_init_array+0x2e>
 800b1b6:	bd70      	pop	{r4, r5, r6, pc}
 800b1b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1bc:	4798      	blx	r3
 800b1be:	3601      	adds	r6, #1
 800b1c0:	e7ee      	b.n	800b1a0 <__libc_init_array+0xc>
 800b1c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1c6:	4798      	blx	r3
 800b1c8:	3601      	adds	r6, #1
 800b1ca:	e7f2      	b.n	800b1b2 <__libc_init_array+0x1e>
 800b1cc:	0800b2d4 	.word	0x0800b2d4
 800b1d0:	0800b2d4 	.word	0x0800b2d4
 800b1d4:	0800b2d4 	.word	0x0800b2d4
 800b1d8:	0800b2d8 	.word	0x0800b2d8

0800b1dc <memcpy>:
 800b1dc:	440a      	add	r2, r1
 800b1de:	4291      	cmp	r1, r2
 800b1e0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1e4:	d100      	bne.n	800b1e8 <memcpy+0xc>
 800b1e6:	4770      	bx	lr
 800b1e8:	b510      	push	{r4, lr}
 800b1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1f2:	4291      	cmp	r1, r2
 800b1f4:	d1f9      	bne.n	800b1ea <memcpy+0xe>
 800b1f6:	bd10      	pop	{r4, pc}

0800b1f8 <memset>:
 800b1f8:	4402      	add	r2, r0
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d100      	bne.n	800b202 <memset+0xa>
 800b200:	4770      	bx	lr
 800b202:	f803 1b01 	strb.w	r1, [r3], #1
 800b206:	e7f9      	b.n	800b1fc <memset+0x4>

0800b208 <roundf>:
 800b208:	ee10 0a10 	vmov	r0, s0
 800b20c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800b210:	3a7f      	subs	r2, #127	; 0x7f
 800b212:	2a16      	cmp	r2, #22
 800b214:	dc15      	bgt.n	800b242 <roundf+0x3a>
 800b216:	2a00      	cmp	r2, #0
 800b218:	da08      	bge.n	800b22c <roundf+0x24>
 800b21a:	3201      	adds	r2, #1
 800b21c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b220:	d101      	bne.n	800b226 <roundf+0x1e>
 800b222:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b226:	ee00 3a10 	vmov	s0, r3
 800b22a:	4770      	bx	lr
 800b22c:	4907      	ldr	r1, [pc, #28]	; (800b24c <roundf+0x44>)
 800b22e:	4111      	asrs	r1, r2
 800b230:	4208      	tst	r0, r1
 800b232:	d0fa      	beq.n	800b22a <roundf+0x22>
 800b234:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b238:	4113      	asrs	r3, r2
 800b23a:	4403      	add	r3, r0
 800b23c:	ea23 0301 	bic.w	r3, r3, r1
 800b240:	e7f1      	b.n	800b226 <roundf+0x1e>
 800b242:	2a80      	cmp	r2, #128	; 0x80
 800b244:	d1f1      	bne.n	800b22a <roundf+0x22>
 800b246:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b24a:	4770      	bx	lr
 800b24c:	007fffff 	.word	0x007fffff

0800b250 <_init>:
 800b250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b252:	bf00      	nop
 800b254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b256:	bc08      	pop	{r3}
 800b258:	469e      	mov	lr, r3
 800b25a:	4770      	bx	lr

0800b25c <_fini>:
 800b25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b25e:	bf00      	nop
 800b260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b262:	bc08      	pop	{r3}
 800b264:	469e      	mov	lr, r3
 800b266:	4770      	bx	lr
